%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: poster.dvi
%%CreationDate: Mon Jul  4 13:03:31 2011
%%DocumentFonts: CMBX10 CMBXSL10 CMTT10 CMR10 CMCSC10 CMSY10 CMSSI10
%%+ CMSS10 CMMI10
%%BoundingBox: 20 25 575 816
%%EndComments
%%BeginProcSet: epsffit 1 0
gsave
193.003 6.970 translate
90 rotate
0.240 0.240 scale
%%EndProcSet

%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E poster -o poster.eps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2011.07.04:1303
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMSSI10
%!PS-AdobeFont-1.0: CMSSI10 003.002
%%Title: CMSSI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSSI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSSI10 known{/CMSSI10 findfont dup/UniqueID known{dup
/UniqueID get 5000810 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSSI10 def
/FontBBox {-97 -250 1077 759 }readonly def
/UniqueID 5000810 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSSI10.) readonly def
/FullName (CMSSI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 39 /quoteright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 54 /six put
dup 58 /colon put
dup 65 /A put
dup 67 /C put
dup 69 /E put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 87 /W put
dup 96 /quoteleft put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2919BE7E94DF619E5D4CC604
78288A019B254A5A0A8E2D5ED465C9DB3CFEF0F444DA2A7DB2022495EA1B3FF8
BA3E769C503BAC77336BAAEFA8F7B4BCF9BD63253ABE621C7C696DDD22E0EDDE
ABDE1706338BB5F604B4F42356E2A96751B8EAF1112A1BE30B618E7F7BAA96CC
A264B5EA7138FD007E2CBE19B1F008AE13B47252D2956A06299FB28035624C39
08E9E5A4BC08DADE08861DB9940F6F0FA67E97E9A73C9F41525E865D0BF68F8B
6D48D1595EB69B3FF78F5F4B18470370BA219A010F9B5EA904289205DF20C7EC
91A2B866BA05251BD3D00FE5229CE2D2F220B6E25DA5B3C0EAC68979BB312E2C
532264814FF214CBD46C8B9C8E45878C9E28FF334C5CC7DF9D378EA5A37986DF
0450E2D5645371B8C577C28A008AB7A702E89FF337A17D05AFB0FDC55856AB3D
FFF997FF51AAD70FED81A5D307FFBE26E862070E361DDF6D162934B7852D2FC2
F3FE611F218E28CE0B964BE311E59D8729C7C0FC2B2D5781F73C87D64E6388D1
D7798FE70E74E76368174F5E055FB8CDA3809536768B0E6028826436C7E6454E
895EB7E435FF8AA342BDAD46A2C7BE5FEC83B8AD16F2C773F55F58870E70F2D4
FFCA12D89B06A706CC204383C0238C17EFD01E0118FA4CB77681CB7260BBACE8
30C8E7B16669700F884F234C36EE9694841EDD4FE5644949AA28AE2745FACFDC
CFEF1590F99B0DE494BB0851205DF4E7F2EB88CFF794DFA7958F6EC9197021DC
D4C3590B2729779345143AF6C349CBD2F17AEDDDC23AA8F0998C27170C44FE2F
163C1E2FC314C6CE27D6CB497C3A12F6D10B92D699E1578C23B5D9A907EEA297
4BF7D5C4ADFACA310E61EBE5655745FDCC48B661CC2D3EC016A87632AE410B69
C2B98B87D3F46491EE8611E31CE17843B05C05924FA42FBAD7687003C14599DB
08D72670855271EA55082BBF6AC146D452C1531338138D9AAC7E4D2F0CA1FDAD
11E4CB830A9F38A83999F6F0ED15D12FA631B8604D4E3018E625C8BABD8E1075
93F5E17CAD3CADA2210088E71C02CC6654DB4E12F8C2B6B7EADE37E52FAD3FD5
83E45B62FC9B573A6068EF3B43856CD4B6C3E096BA93728B05AEE2BB96C60AEF
58214FD24DEFA63E3FA299289B211A57E4B0CE9EB58414FB78E20151BCED3F4A
9AE6B1D7ED559B3B619385AA8496D6F56D2B353E4B1BCCFA0A50247E283B1540
4300E1119F710664ED5DECAAE9087B8C0CBA63F3FA09F217757B8448D13648BD
D16FEAB50D245C198EDF27C8628CC7BD02385EEB04AF8F4C76308BEF4D640C8D
6F2FDA7BED98F1498CEB1226F009BFAF6425265EC0D13FCACF4909B7495F4211
BA32B04A3B0BCBAC89D6A9088C47C47B4BAC36FB59D9B5D73B2E9E926A9DD183
1AE00AC58E9485379FC6DA119EEA3F6E478F22B60A464F192B2F43379407D4A8
795073B4309C27D8E945468055493D0204B4A57C39CFDC951A04E0288775FCFB
DE3993852671BE697999C9831A33CADEA75B369C179EB8A807CFEEA5CD97BC55
1B0EE49DCC4B6BF4137124123626A5C91603B01B4E0AC759526C129F6AC5BE74
B77B4E431B596E29C17BCCD1CE8279E9C00DF7557AB25770FC9B02762D7EF141
84FFB4730BB8451A485F784A34647741D9B8D2127D158283E01B38BDC39BFA8D
EAE249871ADB347827989E11FAC23F76C2389F8E883B01FFD1EA4968B44D1B1D
760A1FC8F79B50385D8327D6A6381923BE9A2FB8AB0CC6ACAAF5C7701C8F7BDC
81424F63D2CB312235AADD050FC4B71448EE02B7B25C82B6BFB070261919DC1E
32F5E6DD4C38691581D472C254BAF83D7F568016B5AFAEC895187E88AA4D05C8
FEBB3AEBC348AAB84907BC4D85C1F888ECAA5ED2714598384D7369F5FBA0B92B
ACA0B6BCD2D22F9F10B27FBF11A8AF204794CED402A3597D2D469A99CE64BF1C
9242867251B8EFEC0001A1ED0F470A4346BCD9DA22C005A079EE1DE3E33970FE
56620C318D2FD3DD9DFBB773B4FEA7FEECEA9FA1923AD4B2F49DAFEF48E1C529
DBE9EC77299E02DEA39C7B91F9E4F6D68EB224F4555F53E66CD00326CCB5FBAE
70243CDD407BE63DF7BB85E70A99F8B58BEC1562C290D8E50666E1E4EAA484DD
487C567B7BBFEED34A65A6407E3D8925E3C667AF40DB0EFBAE2C07EBE60A83DD
C1A02842861C994C4D314A87986CC94EE74DD4E29AA9E70F393CF956D3BE586B
AC618055571DE00541BA60D022DB49CB62C13FFCB3932DFBFD2D52C8F0C72F1E
9337D95767E376B80AB35264405CC5C385ED6DC9F95535E00C5252DE66961AFC
BC7C83ABFCFD5E0A055E37E7D261A19039D47EE792CA30EA673F80C48C0EEB20
DB21686ABD169A45DB94E35FF086C9946F51409E9E0836041081B04F861838C1
87157DB76A983928BB4122798551318EEB70A32C11A412FD56B7805BDA93AFCD
B11D35FE799224AE30C3BD09D971AC651D06184FCE45D898D09685009DA35EC9
CAB63751F8241297562AE2FEB577AB074D36381B0E5FC0DD5572E3A3079B166F
56C42FBE6147FBDC7EC2ECF6380A70F87D1E44CFD02A70BB3AF4BD9D350C7B21
5DDFD4FE288F0D9EB2FF4C24612FA759B41D0854C04163DC973570B974BAD7B7
BF766AD59D543E808E8F56F831472ECFEECFA7BEA74CBCCB025AB04079AE0838
75852BDC83E1D723824761459DA6A8920A27282043C38BDDB43157A70D552072
400E84CED5FDFDA0F09DF94431956F304F6E92F3DE5F99874F995B467E2038A3
B9C787E650C4A31B2FEFF078BCAC93ACA5816F5DC3FCE322C9DDB15E34856182
BA15F2D56FF4E91573BD2D8B34767974BE928F10EDB3525C2B259F320DF99B88
87801826F2B6AAB2C178270B27730496C44CC83C8036EE6D7D33D6D4C0D871A3
62B7BBC8D8A4E86AEB2CAE76CC7B091B7DF5516EEF043C7D2727FE569B2E28FF
F6BCC6FD3696A85CF5ED26571BFD346494CD6C0974BDE257EDD4A2C53C70FA89
C81F9D32F5CCBAB39A7C00A1BE116FA1254F291AD26C1DE4CBA27BC03C5E5561
8E960A7169F86C0DF884419ECAC607FA82B00CE0B41F7696B2C384582AF6A986
5A9FF800D3A1F4B6C2524F1A4300B9FCDAE2C2050B9882BE4F512FF539FA6BE4
C9577484EB323E7BFA5BDF628875A3634214B14947F7C16541CCE359F72A0E27
C0DB4CCD1653693F7D0BA68D02D5A61AB516173E794BBE4C2C3F34ED9C33BE3C
4A9E20A687498DA1DF7BCB1F6C595B90A5730A10070A54180318A1BD01844585
E78C6EA28EEACCDCB49F1CAF1D21EE97B1DF74523291FCE2ABFE2C000E8F061A
7CAEA494183B9261307CEAC6CD13B362130AE56A651DFACBBE7A6F6747CB61BF
F94BF393769F2A1BD493E1E6502A3507416984FE0F7E509D901A106B857E2448
7284E7ECC2D316EC1C54EE4FD7DC9972DE33B46356E414C92CF8DF9E472F7FE6
7404362C8DFF6BE223B8886503A83A83348F7E9F88726CE068C904D45496494C
641E4443D9474344508ABACF3FF3424383D79A8BDFE6E9D9138E660EB3FFCDCF
8F4E01B24B3070E8B480064D946D0D200F4468EDDF7BDE9D3DAFF03B6D8165F4
0CCB584D542D40DC72554A7597A19EFF3BD72B8520EA71A51048F15E2CA53F3B
C3432278CC19751B38AEB52534BE6CD9BBD489444D313F8C78C2C252AB25AE6A
5EC7D05F3FC21202C4B30A7FF9E1BDC6AE3F6B39B1E09F65E95292FBB1915D20
44D7212A60408FC0F5A2E957BCEBE93DDDAD35D05D23F7E58A3602FB3FC1D431
754A3A21F181C437437D7A22C402DC82275DE903E256979985B6E794B459FEFB
393317FE573DAA5416AC52AED36AE9E79040097E2BAF6A0C6CB68C346E4EB059
5E8A6AA1C751CA4A4094257C39ED48FE4414BE73B4E0BF6394FAC05CEEFD1C3A
F5F5233CEB4625752057789ADF113E1E2F77F5B471A0AAA761AEB46CF37C2360
E701B0DCAE13D4583D8DA516BE2E264230DEEE5053AED15368B6CD81DB761A49
9987A07FC48E1EC246D04D80D86B32F7A093AA23B769B0DBC554EE48DA202C28
55847E3D36D80B7C8E779DFE6EAFE3EB35811A1EF80DC639195D5810D90B4DB9
6BABF8F4468AD92939567DEB43BB00CADB46964B73AE13ECC82C3A57A63A23A9
92A46206C70B027CE34FB81E6919828462F8C2166AEBE9663259CE5D4CD8084A
8BA479CDB203F1B0C3579B3E0B8B8E7AA616D798970A11423C391C25EAD95351
A46A856512518A92C7693B42BE92C2E375047E9DF8620B624AF8DCF2836FB1BA
801C822472AAF5AAA719038D3B53D0AE481753F2EC689394CFF9A911C42BE535
C5B4A187712D487C63A0C8607D67D1DBD0EE766B526184768A93416366B2CCF6
364F2D24B44021D0935CAEA289B120A613378399B53E2B50C11F67B7DC4BB1E5
861D745B7FA3C7906AD591765884FA7D746A19EF86C30309DE0F43D4747EA290
8E3C68BAF4D5F4C0C4E08DCA301E46AE3A0141A58074BA2EBBAD8B3F326C240E
ABE33FA5AC689444E7E04B78C29E49D3A128567D08E712C5EC42EC1BD3D95E19
5A7337B8AB2AA410EF1C0EB31D5766575340016CE477CBA3478FB68A98362C60
18CDC9BA410A545AB339B2AAA2934222DA734F6A1AED9942B43B18BAF77FB63A
71059FA66EE04B76730B499FA022A52139BEFF9CA6CE3F9855C7706E3F804F6D
D622A6929D049F921079DF979F31828C31A73CA0238C0D2F11BE2FD68F2228EF
BDE9837348C10E9F08477F754F6343A39736386912D6BC865BE30D1862BACA23
0DF2061049CDF9F894D73A549C10E7BE7790043F9A642E4676F9DE2B934A7F8A
7B0917DDF3255E6FE122D88DBD80252D0C1C8047A13F835E3FCFBFC0AA1D92CD
F1CAB8D1C673EBDC5601B84615F513E4D9FE1F8CBF2337C9FFCDDAC85B6922E0
0BCB0DEF0FA647E6828DED2F5B20F227AF3A792C0C63AD888D7AF39B10171FB1
A24840EDC55158FF3D8513C89F666A2DECB4AA4A1D46503919A4CFD911977DAE
4779F23271C23BDF14F4EF8352D9C66A7C24100C28CAD7BCD89E6E344EEE173F
CF8BD462E1C67F06D73A9085A2AD1EA3DFCD19EB5FE217406771B80C8A3EE798
A4CBFAB9AA93672B8FC9D02014F7076FBB477A777867C6A6AF2E6FFE3CBF3917
1E4F68BCED22EC345F87A92480F4568006BAC16A2DAB940CB9F3462D254614B7
78ECD86F7C3B3A7DAF06DA2D790F353D9254133C38D668C38082D0CC1BDC226B
4A7EBB1460735A5CB04BCA4D71995483CDDC9EA7D3E070C00D5EA6DD4AB539E7
E5C8E436656C99F30B3B464E5BA6CF7025E098C1FDED8B76260ACF62D1A08DB1
F126517B05C47376D20C999565399B06CC686A817B226101AEE3644A706F3767
372117607576BC2B9AD2637DD13C76F9CF2A356F1B9101496868EA8875C94C3B
D181936A02D5387D1C3C285F2DBEEA25457F6A74FF7E00449FA41878776C0DF7
C58FE07009574AE6B457F3BDE448E71CD04AC7E3C22E0CC8AF56B8B5611C4014
3CC20A39A5FA3D9F6A5599495BA0457109823CE71BAC2B7057AF826DC623213E
A6738E640DAECF08E69FE365741CFF8858337131B53A0AF9E49C3655F62E367E
DE824A37A5DA853E1DD5970EC07D3594A59DA1AA85D4FFE3E9E7745FA7FC7F2F
AFD4B9405C7907F383A5149D4DEACA083B457151CDCE3BA5F0C350945E8B92A1
635239241B8FAF7704E3013EE5D21F421254F23194B537C36F8B673E70073189
8B2DE6C30159232A2D054AB8254A450759ACE9C0B94DE035D9D6E5024E8AB56B
644A5C3EF00A5B2EAC0F89C5FE8D7DEB9BC817EF1F87C2BBD956AFE4DD4B50C3
A3BA4931A32827E612DC3059E97069D3894234BAC0E9AA1DB7B7EEE7F97C648E
0B7E7012CA4977258733C72CE466A2EBA8F2B391BDB7652BC07C2343FC8A4B5F
7C6B926D1B751BFFC6FCFDFAB9CBFF6D630CFC8BF374DF4DFB4B0845237E1E0A
E2D044324B4F05C8C96970451C9348E8AA6F1153EAC8BA1C57FFA09B3A181CF1
3EACE89F204BDBA7884FF6F90D1D0CB578DE1CDE56F526AB11F9DEC4FC09642C
A68C8F1DD2EFC7BB301279F474967B1B10DD7FBA6B09B95E7B4D34F66CAAE07B
F792BFE7755882FC790961FAD109A7C35258021DE25BB14410828F9122E01428
D72EDC917C835553A30FBCAE5D067266A205DDD3AF3A4734371426968A7BF7C7
9F48A5D91B596D765E15356F388E74D100B2243D230BFB33147BBCB298320930
000670CB15B7EE9C787EC751621851C3BD5EA6E70FDE66C9834189A9B0D796C4
1FA4179D594B7E8A39987A3DB806F337945A02DDD2B33D43F1E39FD20F41CA25
BA3B5ECD3B32F961F4A98BE40604BF61732690F3C8B247C6E381AED4F277788E
223F8EBECE8CBA7F48801118966E39D4EEEE3F04B254A87EB21C2E4B00F15AE6
F1E2E59DA6353A45BD0A5BF4B822D86E0E7237809C1F0129B83BA2DF82D5D54A
522697FD78DC73D8A75DC6BEE09FC523E5DDEA837BEDD90DEFCF214640DFD4E5
477FD73B86A08885AC44CEE72F0E27AA63A901F2DCC7C42EC261EDD9699A278B
507ABA7BE7101057297C6A3D67C37D61CA4015E7A46C30202617F3585D719309
7DFF48AF4FBDFC7DD9F66E9549B8B800DDFB2D8AD69B3C6D2C3410E982559191
93498926825E6A96A2CB12F8FD15F858AA28E4F9A9D1457D7B9AB16D9B9D4D45
8FD6853853DF5851C529D134CBE17C6B99A8286519535CC1368407909A5B3CF3
C75B4F86A40BD2EAB1918F03D93A283EB119A8F63E346E7502F0CFD12369B2B0
09A2AD610FD210E8CBAEF4C0498B0E53BF4EE1A00B0C067C113F88E5E000E6F4
FACE37B09D72B4242CD320E4F72F5E123E5578ACC48F604124A0A45559E1DCD9
B58D9EE14F3BC6B4452B9236F6A3CAD7FB7E7D5C949DF2875CE44537DBA8B1D4
C7ECEB76F55EA06D56209E0BAC984AD37A459B6C45B4D7F8B84CA66BF274F1D8
02BF247751733715BDCAFBD55854B0F436BCC787F66B44784838F56AA29F83B7
7D46F0D88835E45159413BEDFEC525BDEDE44291003D313CD2268E240C2388DC
37380A430557D988332DF505B16CE488AF68C8F8626B7EA790121D6ACB87D94C
83418919E0CAF58E41A3E036DF13D13C6B107500902A747CD7D7BF12235A766C
00539129C31EA3E738733C4E443698673AAF4E9588AFAFBD00577721011A12BA
D556591A82E2739AC4234917DD7A850C05F595BD87E0F7719D42DCBD9D724C85
520006A9069E1CB2557D2F97D7A0C54AB564DC62759F793D60A4760854AFB05B
AE445CB9131D0C14B6A6ADFE12DB225684D8254EFD295E7542031CCADC4B27E4
F579C84F35DC502F17DAD24C1775F15F505888F0C3E0FD42357ED07FB5076E78
E862016F7E5835CD5BAF87CECAC4BC92375B426E9512928E748E0328947B1844
E251F3A6E99BAA5B97045D1ACA798296D0CCEC2044E59F32075BB7CB7C636BDE
755916CB59C802761A99B211EEB550EF9BC14AADC70818D0053993C9F299B3D5
AB1427B463A4D76459385F036A95770A8157D225FB75B2C92CA39D1AE7411AD7
19AB8DEAABDE9A2F7530B474CC7119E4335AE12A9CE84BA7FA92AD46D6A7AD54
A676EF1B2B0F3A73E6FB24B20F9702ED522DB7BC30DD2212ED63C88128ED1FA3
7B05D70B0BD95BC58F1330343EAD91AED48EB4252314CA3B7FF921B61E040858
EB3F545F8A8ADD86FD770249BDAAD02613AD5A45C3997E33188E59E004E2255D
BDC14AFFD80F49365D5006821F2A4A2F801820D4D1DA9D11F02CA514EED93425
742D97CC8F84E529FDE0BF4C6437A849A6630BD6760B31870D69C4C15EEA09E1
831354F7C4A70C5F04DDB4B27952C3745B76EE5B168F047E59360CDD5D084D3D
BC8BA0C569C7DDE62033CE401D65C35DF34D2875D4E6E83E7854E73F44EDBADA
9368225C6160F4B0C4032A9800198C83EABDE656CFC1C1B65993D629A1BE0263
41D83EDDCD589F05D1135AE5FDF759260CAA81FFA75E52E7721686F09ED30B6F
A7E3A8B23FD647A7156FC46A098835E130519E9B03D51BE72D93AFD1C8E26369
1003E8DECAB113FB42AFEC3EB1B58E4D4C57DA6A7EFF05766E9640AD6221244D
863351C7E11AAE874D2C37B6AD9F9324344621662E0F626F85F2466C4DD58751
8CF9D2ABFFE134E2281BEC8D06F7B41B1E46873EDDD6D5EE7953B988399A6C98
57B8186F02ED5CFA0229068FC2081EF9EADF5E55FDD2BC01B7CCE7B7B9DB269F
BAD0575B7FECDAB83A4D8C332E22BB59045DD739B76F54FABD7F4C5FDFFF6E23
99004DEF8C1F264C09965022247FA31962915381D3D6ED287C5803B56F4058A1
6F685E6986D3A2CF1F6E1F8F5816F21F6926B6C64E23BA4C3AD4F4DAC719BDB5
7E451D585F0EA913EE53D0A84FF84BF5939A9B48E4BAA396FF13CC82CF8F662F
DA2D29254834C743B8EC33795C858D90E2FC2D4E979585EB86216F4CDA3E2296
5E2FA5A876491576502F535B2564F43AAD807A591FE31A53EF04BD6B9F59ECBD
F209436286E638E642946C49E749DCBD16C21DBE81ABF892CC7EEAD04BAD78BA
444239651B9F33FBE0A2582832D5FBE5FA0EE0BB86C4FEE1721009E2C59F10E7
159E7C9468CBE109F1CCE48F7A4C87E6D4F8D399E8581EEA06254150A16C5AC3
DE54CC9A608F64BD4A37968413B825A0933E83FDC9D0249DF032141232D75221
63B2871DDBAFC4CD7B091B3280E78834962DCFDAF1920B6C61684363E8F7F322
1C2A0784C81DB291114C32B6E2EE97412D8CDDA2C1E993807BB1912DEE1A64C0
6FDDDC1F222E2CD4FF98DCCBE09DB18EA10CB18BA33AF43E34D0ABF8BC405B5F
4B20DC37860E1243A31D171FA6DA82088F2191103A33285F06071969F5EBDA23
E0DA43AC54D6FBA93BBC49660A38FA10B79C9860B096DA03780101507F05256D
F456B68AD7AF9CE6F9F6E6F51CC78F03B8CBA421F107E2DBE064940FE627971C
32958BC54351FBDDB449FAECD99BEB2BB4A7028CAA4585AC0669CDC62C30887B
3B9D4CC0B9CA7B3A76E4AC04F5BA51828B78781778D282FDB909611D1EA10C14
C9AD5EA10DA9672BFB118B15F7C3CF5AFB98DDE0BB264F0A455AF16F8E901A58
EDEDE22F175FC1C208135AB8C784241B662CCB51E80F85E861D8FDE7C62B721B
6741C947A3D22063F99F929EF1B1774C8BC555260F00557D63F0E9E865620847
11E5D216F6A6395073D88DF83CBA33EA21C44B4AE7D5814555968B1D500F53B1
849B0C4BFA7749F19C7E12132A2D9B2CC55EAC0C4B46A39768F32175C3D46E71
286006ED74DDB043A4DDF779F9A9CD2CDA8140B6F53ACEF07B773805C41461EC
061B53B5A68D6B5D5B7FD2B6E626C7245BA58CC9B170F6CD6EB2677F411C4B04
C8AD9B4AC2848012E88755CDB90A814D8CAA132AC03A25067F4572E2ECB00955
CC8B171DCAB172B6902B28191FEFBC48947A8A436F2778CC393DA454FD8FF71D
7F470C33BC3E386819529587B368257CE6E1B09DD387F324CAEEF39F7705C6F7
5B709E9224B7B2FCD1DE9918966116ECBE71056BB8A5A2CF9EE688FB73B3921F
E097E2F4226A80587FA27BEC6C8A42586E64AB3761068743FC102BEC24B8EF91
FF20136712F636C95B9F8A4DCE7CE3ED46D0CF3CFED1EBF8CEF64D4267149164
380559C98B021CC48500C8CB32A1833AD27749CF0852B9B52B19D4E9FA3DB6F9
5A346338290260ADFBC8EABEECF37B9AA5B372892838A9317808C8016F9213A5
1E67FBB2AC973D755A162DF8B5EB94A49FAAF0F24C93D2EBEDC96151E3FD041D
D6CE396A0A26152B556C97D6CD68A631C4E6BCC9E39056CEDF101F2845E30C4D
3CE69BAC4465E03C507C65D8DDC4190E5960AAC407CCAABC0774F8A63E0BF87D
48CD3999C38AC478A1911FF84863B61EE7F585FDFAD18268FC02D9806CD56F74
257521F03AF3E02DFAAFF16D13EBDB52D5305AC94A71D189DA3B4354BEB32C9B
BB4762D17C8BC7753062E7E7E72697F3419AE1E4441F6A433DC512BB156D8E89
4172A3757D3EF2D66EC2076DC69BEC614623C26934BF679E3549892B9214F72D
4613E05F08CD3B31F4B2A502A9E1FE58DF3A8BB7E1FBFA4817CC58815448677F
78069BE9C9C6022A69B89589EDD0D3C19E6E1E1860A7532C1DC450E8E7324B37
ABA8EADAADF124CCEC935233E3CF72AF5E1F36CA1C00390171DAB9956F920CA7
9EF8987A4227EFA55DD7C6B1CDF3221C22B1552672B0838757F2645DBAF9C1EA
4BB0C1BA26274178CE1E44685DA8E0EDF17D7CAC3708BD53FAE27B4C12028404
9AF91316DF9062610CF9FD4FE50608B786DCBB15C5E896851C4633C913B1EC42
0A711AA2C7DEB989802C430BEDC12B238C567EFAD11169E7B9D4623BBA8E2476
CFAAF9EECE9B41F3DA71B9D2073271427A1E4466800BA70CEE1EA6DEBEA9D1A4
C30F510DD5D23FE01D36A12ED90260E92106E6EAE9165AF59C45C6614C35E4D7
6316F1718B7635A813B09F4C3451126B6DC8BA6880833A8FA52DF055706FC932
8126ED0B50E8C4A73DF45432B52EEE825C4C0F70845CEC9005A18F696B3C2D66
923B9E39344D94AB68E055CF83427B591A05E98FCD02DFB0FC278B529CBB889B
2BC5B42FE31E22BEF2E6AB64C63D123E64D5E3E1A55CAA75BECA057DBC486EC3
2D8B2FAFF3064ACCD67457E73AC11EA5736A6C772E70A7CB64BF75FCB325B516
EF974D4894F6BFED08A0AA457872C3C1AF85D3B098F6205AB0B01FCBC1128B1C
259F4B2CA2C1D6EB09F5DD48D9ABB36433D382687264A945D002ADDA34BF3D2D
2B1429591018F81BBAFC83BB2F6B6626B74F912E9205AC24A4F2DC5F34C8ADF4
B6ED60BBA08F874D9EFBE8C04F34CAC55ABCA28F2FF1DDF55D27C217CA7144AE
D731F01872EFB91D6D01F7AD47F671FED5E2CB769CACB94825E960DB054D67D8
3A0F942C5FD1F87F468A3BA9DA4560A74067F9C13EA0133CE9E823CAE502F10D
34804ABA0E21FE8AF8C71C4F0DC10D39E0717846C69AAB18467CDA06BEDF6FE3
5BABA600FEF08CF768B905D094958FACBD453C28752E4C5BE5A53EAED876282B
EB337F72F0EB22BECBE4CDFC4A59431185F19A4F82251C0FA53D963066EA87C8
1A82B8E38811642BD17BA7E8DED0B48EAF4CE41FC6765197C6DCAA1D868AEE2E
4F5175F942A8387AECB6DBE674798015BB7B93BBEB493734EEFE4E674DD42BDC
C98B21929EE1D3B4A47EDA92D6DDED8A64DFA0550A215AC0D0890D8F4A54BEB9
1872E05339B79F096882D94EB0524F3BC3E35459E40161234E05708541A53BD7
F4C0ED48EE155E635BB9028FCA6E0D755BAF4C798FFBF14D18A2C6AF6D1951B8
775D4CA400A66FD423EC2CC60BA659D7D2E45179AA188E870041532267FAF144
EA0EA7F63006E88D408FA83E4D65D185B3ED6BF198E9AB1D2579CF0B1EA998CC
4358997504B5A7E4A356F484119709CD9CD767DBD8D819D32DDD8CD170597533
94E1071E93519EABA4676665708B9A3324DE20978937814A6318E41B5191DD88
300D58166E88CED9CF3682DC16C6F6ABDD16ACFE975CAE5F42A33B01A22F873D
19AA06F6CAC4B50B96BA78A137C6CDAEB25E8663CC7D55FAB1C6FF32F7E501F9
A1D8B2054B19B3310F6288DC10208DFDE163516AC3548A1BA8B52E7F6E76BEC3
89C103BCCE18607AB4199CB629874E3BD06C26C835BEE0AF72F7FEE526B25E0B
4D1BA8B23039637B480C91399DE330023CA1A845ED3F4F1A968A073A0FD9917F
917D921FB66E40343911B6A8B46DA26E1561FB302E99398379AA7464A6AC8CD0
0E1378D89ED7BDFEDC3BD0449BA576D6E0DAD85D6E10DB13536C732AE87754B9
56C3ECBA3C5595A0B36AC7BF9BC35671F6701DB7AF7D40A85250E702B35DAB4B
D0CE157A90E8DB302904808C0CC8D49939C67332E6C46FC57B6963EB0AAB44BA
7A2F90A42EF7D238EB1C7FB88F6E93BD9BA1F632BD85B813A5B8D536C9424532
0E13371D4CD013B682EE29AB05F3192AC174B667F18452EB07D8E91787A59361
1FE838594A00BAE4C964ACC5FE33E3CBB716F72A50DE7C3FA57E98BC7D6C413B
258CE3AECD2A8DF297DA2DB461A63655ABB06F266D3E3EA385592BCDCE828DD9
93C778BC980F1096C3D539454C3FD61D0486B75FE82E88EAA0E30FDF2F3DBA99
8A24CDA13529484E0F66DF77B4553A0C0543A8803939A38CBB38FD4F54C21544
0C83CFF40C4D935C0114FB5C21A660961AF9DED8A7216F8B75FAA78EA7F53F2F
C1048B0358FA84BCBD07E9734BA126C2A8697E2C677F6866DF461FFC71639B3B
9C78A4EB9D65660A468693268E4DF9E01F8BF9E2AB1E3B9597A30DAFD95D3172
8547734DF75933CEDC48EC4FEC2713B91FBF689152E27DC2B96438F9B495ED93
27553976D1674CF6168E7A618EC5F20C6DF7B2C259A5B4F18DC5BDB0F97F4769
E3AFFDACD8C962F9FC139A9F85009727FC4684593EDFC18B53C938411C06A16C
F7C05C4B3F2B5635ABD61B54CDC8106E47ACD840D67D58C592F90FAC5E96A829
7AC321D5A0CAAFD5A63C3234A3C6D3941577C3B23BAAA38700327EC83C6A66FD
6A0C2549802F9FAB57A1BA6874C0DDC257B2598D47653CC20D1F0598D7EA3A31
8CA9683BBF1DA50F6EA3D84A745E40D5ED13DA232A28911543A556601DA3EAEF
110F86F6522498DD07212ACA96A0983D62BBC58104F31B6928BA76A48CB7BAB5
408D38B08C2D7C5C80C394F5C1DC86B8DDD3ED56235E991502172FCED5781865
7FEE490467DCEC67805B9B94518AA15F02B7EA4E84D18FC34F16E43F7ABEC5DB
74C19735202CFC39EB804F2ECED6E6164C9DC4CF2C85794A28C5DFF88D8A24EA
FD0CC7647CD38CEE46E6184A1F1329B6E79613F9515FB269DC7A0E7101111485
4CB51175B088CC2CA29BB895F10047995C909DE6CEDBCA39F56BF5EDE23BEF7B
3A59CE48098ED4BD0E5BBE40E0645A5773241C504A2ED988FB920205CBFFE5C9
19A0DA8C609B4E1431D78499E76C68C3C780F03DCB96C005F67CF380130642D1
412B4788E16A80A46FB08FD0F3114A1315499F47FAE822EDFB4261678329874D
9CBBF50B6EE3D944C3855F8A6CD963A5F7B5DBA3872ECE26A7F2AF8090F1EE4F
5FDE9B905BFBE6F1ED487FA41682986F759528A0D8B27570951EB5793252C1EB
8BFDB83D0A6E8174C055E3C9BCB5BA86734289D32FC2CA7E1A756F8FE9DEC594
E32BD23E40832CA821C2C363E3D499F3DCA35682835A15906A61144BB689CC83
6F795BDF2812136EF9A619C890EFA04727808B16068294BEABA51C9788B478CD
FE2E80D5BC72034E10F08A0AD38A57CB8A11AE93E1CD719EBE4D7D6B069FE763
BB9122E9DCB4430D330C35564CA1F49F86F3CBFC24FDAA2AC29172AA271D4D4A
DDF6297D0080ACC582BC2E500CE00CF8E2682167F813334CBAB56661295BB44A
A74810725DB9539636D8E2BC447AD008DC1073CA54DA0A5BCAFFF39A143BFC1D
61A3392B13C2BA731EB7A60E603D1887E6FA0827B226402B333CC79963DAB598
3D4DD0D7CF9C9DDC8AA4D9047116846FC71EA53F33865962D352A3817E71F76B
D2D7486A717294F8C6FE4E4DB3AFBE430338FA0F91C6BF09B6D5007F7DAB433A
F858A04FEDEFDF24B580D89A11642F0762C73211AAE6DD46200B0DBBFEB35AA3
BE0E72BF61EB4612BCFF43FBDD3D567DBAF90202A5BEA82481603830D8CBAF4E
BFFF370347E4434E6A02AD9CEFE85C2C94CAD0F07C5148C6778C89BB9F809B94
60E3BDB89606E56789B12EDD6E57CB671D0A5DC267C2BBACD3842301FB8BC2C5
87F0C8EF500702E3F4336CF563A08A74AB58E6BA045A6A6EF617B10959A36E83
6420F22969C30310067EA4B2C4BE8CA02125170824F0DE5B8FB382218422A791
203C85647648786196BA572E9D08587BFA92AAB7C1CE23E0A8EF5877BC6A4AFD
0F98E4864C7F4FE29CE4952D5E8C7EF5FF0BE35B9666A3E6327F6620764933B9
43D7054349A4A26B1852CD57D6294BFE31E850BD57A3EC11E4BC9386B50BCE11
DAC95193CDD4747B5CCCDDC32B42EA8D4DD82613571212BE2F9576A35FC7407B
AA552BA2A2E1D677CD32D7A11280E405C78D977C045602C06CF8E8CBCB4D31C8
E5E6DB588A57ABA5EDCA21C3A404814800BD460F1EC81DAFC320967FA9BE2F07
1081C68AA8C2AA81A6921C4332E64F80C9D748E785C81623351B4F6015D7743E
0E8CC8A1A13824EF15E18E85658A1BB7A4E34BB2BB886CB07BB0585701E934B2
9D61EFD0780CCCB1432591D2AB21FDA44B8305C3E044B2602DF7C5D7A7AB260F
531E7490F623956399C60CC4023013B84DD284DB3812FD9EBB03FBAAB74A3BDC
EE161451155FF260B60E700977DBB6C565E7C9487898103E667C57CC40C4D637
477F1724E2AEFC02266CD77998D94B9D6DC5B7F02D7F6CD942D24F3C1E117160
7898C9DC8A87EC94DB4BBB4F414636CC8DB6FC53657DA1C3CCC0C9428E3875D3
F3D3A99813AEE9AA5385BBEBB74BDA3383841F5352C09D7BC7BE6D3151CFBD9C
817AB78B48DD4CA8FEE95787499BA6AEF9D07C0645721CC220F031FE70E2AC38
50FB96C07B6451B1052CE452AE8DE7567046D0495CB5F6302C9EC5D45904A2C6
E756E3BDE2057925327EE98208F8B87B5BEED1576214F35C999F3474DED5D17D
9F55977476C6CB3C6CC7F3C6A6E7B36644F4B08A4EBF0C32A8C0FA8A04A387FA
16D78EBFCAF0437B441E349EACEA0E028241C46E7B37695A8C66E886EE390DC1
042A3587572E161C1A76EADECBED6908032DB238CE2F266103E021AECEC42F61
DE2AAA1F4C6E8E2C5F22A824EF360A27644C42E69A5E0FCCE309F9AE85CC4E4A
E64C608EEEF6FC7B10BE5635951761F54354BBB3C6AE13AA32C0DA9F9034E775
D6EBA63147479FA134C00E147F3EB978001CF0107EA4906E895C2627088F00F2
30548741D106FE69F08E2FABF6CE53ABDC5A704A0A1D677127819A891A058EF7
9DA325531F71B34D411628A0C328951E46F59FA7D25BF0ED54781DDB7F167961
EC46B192CF35363D86773490AC1E93D4D5A6D539C111070FD1B8B013AE15762A
D44982E3FCB2D9C8843850430C3598B531E4C88D16DD9DA34F9A8DBCD68B053C
DD340071DE99F44CCDF46D83AE6B46D32C78EAB1162DE4EEC7706B8570E70524
F9F7AE0899B2A04223665076D84306D4D24A7D5D3281F57C5FC2508FDC618848
A5B164A4F3AEFAA8014DBFF69A958897894820DBBABAD4E6B01DED96CFEAC901
2819F84DCD34F5EA4403E55B5609C1F9D58CB98D83D7136344033EBFFC21D748
8521ED8C905FED402F0252F6794E5CD62CABB8841E3C5325AF70D2426E9644A5
99F088F2B2ECAB49C8AA632EBD34838966440FEA8293A3F5C79A7A168093AE5D
C190D7D87B55C75CDC0146900233E39AA7F4D342EC03EE4D1580277AC1D67856
6F195AE8CABCFE1B9400
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/UniqueID 5000793 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 13 /fl put
dup 37 /percent put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 63 /question put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 86 /V put
dup 87 /W put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /endash put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD604548D553D4A6EDB247853225E24E7E9
89D71F6BC94DB986467E755CCC99069B313F5745B02B4BB608A39F0A0A732B87
7EA2DED68219754BF1FBCA350327572D769C962EF9242132D93A5C8E9725D8D3
AAAEC15ED0F362471AA58488620156F3474FA59CA080EA96FE995D2B3DEEADF3
3141D157481C66507725ACA5953CBBE1ACEE7E3F02C72C6552D15EB3D612730E
61A06A43575568DC3CF3844BABF04CA767E299575EF2ECAAC7649193843D694E
6CA59318C01132C361A3E43BE637B70B9966664E12EF4707F6B100BC37778D1C
F1806B1DE081D2C9B995BF1EE3842EFFBB8416161FE31633A6EDA118E563BDC1
C42F403BE8A009FC756406669E34C6A08668808E0C31A589D0720BE32F3181F9
8039645643E15D25917F38DFFD8BD08A420854DE15AF291ED675A634C151193D
29AA6E04E84A598350AF17E71973854842AFEC3EB1B58E4D4433309BF5ED9D86
32C4BD136C89169D45718A88BABE25072D8E552AA4CA3F840ECB11519B06EB44
13026DD6800CBAA90F3BF0022E66A54BE1059BD5D224B674AD319FF9987350C3
D9BCA7F584B4D9E304CF614565FBC76518B70B7A86FFA7A4E0AB3F6104C8F05A
2A12D463FDB1CE3CF726D64933BE3E7B9289E87FBBEFB6FEBA19B313A27AD632
3009DC44DA90B76A05860EF095420B29373543A2C18439DBDEEB8FF478259FD7
350E1007E385151B7813AC152F1849C792C92B8241B204B45AF650899D11BE76
EC06E4E4CCE426044B3F72DD84699E2788FBD3C304A73034BE2F6AE29F5E77B1
D19174816471DB7450C0CADBF7FC46E25B9E7C914E0074C476556B4247EA5AC5
282C6E739CE2D772AEAD676C94D34A2D6E71457B517DBFA6F08DC7B007337B68
8C1CD741EA0DA803DC738673CDA67DA918CA00CC856FE7D20B081264A710B0FD
5F8ADEFF72173E9A21D6412F2F018997A16F0A25784EDD7EBC8A0B634D42B32E
5C022331B32068A8F8286A93A0A6F3D5CE36CE55612D3516E6673A21713666A5
95EE2A9F91F39051740FCA293D97C26FBA028D944DE156E4428BA4CA637C32CD
7959ECB9ED4D16EFFBB235BB5289F7EC8CD3C32BD9054741EBDFB9638263A449
22CE37CB58B87ECB4576F100A3770D38441A486C7B4A976C46C35075518FA14A
26F75E10E62799625392A43F88B3F0EFF0D6228E2159C1DE351F7864291A3B3F
7543788903F8654C2580C144C1A98F9747734D5428FE7B816CD74CA613A35EAE
2FADDC8757B87A0E337A5DA998200436CFF018A091C4D3E41D63211EFFE3052E
1F3A079164456A88F88F754C3B6D924ED4963F1A9473DDF6253297556B3CB756
9E45E81086D15AC78B50EA8F3A85F0DFC1C267798888590E3475F645513FB654
7F6E4CE8817510F7786DA5F6C849F145100A8B26B0B09675FE9EC168A29D4333
B479D89DC565746F12E0DF743C28ACEA3E02B00E203487F3B8A4C6EB761A15A8
E0A19BEB72BCCD714427ABB381D7E78C44DEAEF0791EDDA1A5BD22037A9BE32A
F67F106193005B17C153BB38539AE5B64C3EE4481DF54AE6686EEB06A17DEDD6
A14279D75334BCED7A860BB758FCDCAD041120AAC0862B614085AE1C10EC8F86
B39BA9AAE341296170B648CC5C9EC0288EF5B33DE2F45597EE0694AF8445C41A
12A0DD5382793CFC4FDDC7077E29025F144DA5F06F904A61C147BE8CED6A1A54
E5565495A59783752B0039DE15E62B752E3AF82CDC16B008CB050FF784B5B699
DD0A5B2EB60BE12FF80FC95BA83F2645E29228C49C5BA65EAA4099642451AE68
535345318B6D97A077F8076E20138FC98CC0792109220AE5FAB46932FD02496E
5F5E2937C95B50D0FCE34DF459F5286FFF30CBA905AA4B6AE741B8F0A4ABF75E
0DBF780CD310D946E8E0A478831E6A60A1C0554F6563FC167AE821526C95657C
DA8C2CCB271314CCED8FF73FA1D0E44CB5C0041310556883B066437E29ED7FC1
B440E69B7D0A7704EEAAC280A94CF9CAEE5CD5A50E1FBEF6E3778DE174FA5619
8A888EA1D07BD20D0CE2093207470711B42AFEB9DCC9BC7ADB8767C462C63916
272E0F5ECD8C100374B8469FFB7B055AA5572177B58B735C1F44C5DCD0FFF958
8A439D4D1FC4034B052A00B4DF452973D191AC4B382CFA61C644166F0F1294E1
C0AC67ED53DBE87FA2B9FD5C78839321E3B2DA5B6697FC6F0FBEE6B137B048F0
4954ABBBA8A5737368664950625F4889631B44102DB04EB6495035A84251D75F
F5A2F73AF802E7D09C67D4F443A96F82480E7F4CEFD31FEF6A904D7DB13D8A3D
8F82F699AAE17419C5296C4A73725CD8DAB77CB95AC527DC7D73ED52994BC5E3
F77BF6EE43CFD08C91307234FC3F94DC211CB2CB94DCCA7DBB86140EACAD617F
8C0BB49B7C22BD326CB8701454D928EF97F80D107CDAF7D939822D8938C52D4C
6296270BEF3C81A9AD955AB433987B2291FDBB7F8E45CB2FD9AA2EA98E381A01
BA4C4E317472DADC2AB701F16FFAC44FAD5A50EC402F70F4C2B407446B10DABA
B6116D53BF50D60F0360A941DA224FF39D335DFCC9310925ABDAAF2C9C9B3CA5
467E56E53B9BDEF27BC2D35C18D864C86C7DB62ECB4EDDFEF7AD909919C531BE
E044942DF763A4BC080BB5C3683E98BBB693FCB93802D72D75FDCC9039E08B3E
5253808D085F08AF4A2329A4AB2D0B0D2C303CCAAEC9349732391BD069927BB2
66B91C57C347DAE5884443D5A08151A8DE0D0332713F325D3F041276D9082E0A
74EDF851067307FAB0ADB6EC29AC1293D9F365FDD092681BD890BAF0328ABF11
D8833442804A16B6B25565DC5CD6FFB3B06D2480584681A1F6518873BB51A8B5
491CC0794F2CB82749D68BB3C33A7EF83057759D3D702A85311C733B311A695C
E9ED7F3FDD8973BB07D3F65E0D47327B1D390FB44BC35A3AE9F145390FC5BDBA
029841AE0133571219AFBFABAE4AF3997824929B80F5D58BCD077C5564648981
63A99D39849E4ECCE8712A107B7C6BC46136E789DFBB559198A9C9998D4F3044
FC7B809123FC02672A0FBFE9D5BF6A01FCEF21C8A85FFF32776555B160EA2B73
40EE102B92B30B3A5442D3E020C18097F3252EA3800CC8AD97D85769BCBB760A
49636937914567358843F182A9182AE6FDF038C628857430E4E74E7DC8B19D27
D2E6A76AD6F3347B27755B05919EB542D04B207A6ABCD3301D34BFEC20E6ADD3
EFF09DCFA431E79FFFAF61AC43C98770EA65282F1BDCC44AEC2C026D6E4BB804
25136FD995EA087987450557828EB58D5A80F3A8E113ED7AE479D4FE9EEFAC4E
9387E3E188F2F5429C192E6C671B72075308F2ECFC1478DF6691E34EC130AD2F
689FF52916F0AB41B429CB0360EBD60BE8E20D628AFC46D6143218C9501E4E4F
2A2C804798A49CBA00DCE4346D23E4290E265C8A8833130516234D079BBAE301
F98A79CD9465EE78D747F418039EF2F31348D48E48DCAA3912BD529FB7CDE3A1
A0DB18207AAD0191A8AB0808B671C2F06B0345A04D140B511B4CF0FF6C2D8465
05D43F883E1C794B9DBE9AECA14524D58B6E6FD57F1A2A52E531FA15D30B7292
FD83B6E1D4D5F2F5E6A25F53AB0F25FC26FFE72034C95B4AD941E9937C963D1B
060F65433598121627B24D5BDCAB2B635F85832F23508DD2787DE7E133A3AD99
8185BAF9889F590D1F350292A5549D1ED3F7BEB8183EA221E35803DF03B8FE5C
27C1508D3EE59315EFD8CF2428B51852D4DA802504A09FBF7DA3233D0DEF0EFB
AC19F2C660B21C7FFC0F838198B4D905E61828AE89822F3DC3F1025961096DB6
6FDEAF2A75E2CFC506DABDE15B28B8A899747EDA87A4A263D4B38C36A5D0F0E0
CAFCBAF87A504E4823D93A69FB240C1D72338C8E6E75D5E79295E37B56FE3183
349D77142F9CEB88DC7864A1D0DF8E6D5C5FCEDFECB3E3088F87707E8035EBC4
71148129A552996AB6474F370F7F61CC919A8F550F0AB272E7123600391324C8
426B6B9DA378E0DA35169C9C0ABF06921828C1D890B35C868EC00C8BD6EB20AB
ED5D22E2EF82602D115622C4AFBA925A54D050720CEB18C593243853302DB580
277A6D0C4AB2A699E0BEDDF399CB7C26FD6C8FEFA94CC862DD34E1AAD4AAA58F
227FB5AC66CDC5615045F05E98C44654C29A5A8093D0A0188CFB4AC98BD8AEAB
D75BE006D12975FBC71D755F046DDB534F5FE2BA4DF09EA19AC78DCDC11FBC54
1426DF035A2EAF9A4052B1A382AA2E1E1DA244F00DDD16CEB589938E88B20939
EFAC81F69F1090B44EDB233B7B9C732FAD89EE26017473A8C5E303794FFDD7D8
0481DFA0DB3BE3F97EAD710457788C9A291528618977204C96A398C3FED62118
4DBB5DB15A02DD27FC2C8CDADCB92DF28E7D92A01B36A63106FC5733F6834D38
95E2B9AF2BCA1DAD558C1400271A446E91133C49BB85A65CAA69CCACFB318A20
8C80FB1B6C49423417B4191488C81ACD6C2E72B439FF600F1F3E461010C4C1D5
2887C33DB1BCADC5823D4FBD9ADCAE64C1E53E126F77AC973C4DF3E6B00EF06F
22FEB6AC7F7DE678CDC6C691C7B8C93C463A4D7E48F52A536134557239BC4A10
F70F941ECE27688D0F6B08A6B0A42B8C61EC1256ADB3A1789CE5262868EAF7F2
97F8C35867EC079C2BF0B3577B0D33B63DFA6C31BFB963133C9671B4329C4785
09F4DF6F8293785364A5F7BAD2997D26481C02A184638B5A94AD3D5F87E36C96
957E72980EF1DAC89A23D384E6BC700B5EF5835B848B94A6155BB0695CB857D7
D18E788D2DF9753691F48A486421D0B4A04DDF34CB499EB4B05A23E3940A7961
E9D9BEFCA30B34C22EE73F7EB80ABE44B9D647DE600928D05E8969CB929564F6
4A1A197E2A560E388F6110A4EB97914557776C43AC4D34BB89CBB4AE7B8AEDDC
17BDF457835F33BDEBAC1DBCF1A25076119C4CBFC016A8E8933D1D6EBB528E6D
3927B6341FA6C916F6A73D59E642BA3CD5CAC0F17E43456E257F2A56BCA47EB9
C50463B545B955B1CA094CB51C24A57764E5775C5FFE436E3067798433263E6D
3653FE41F372CC67ED835E3E6B00A653D5F2066474763370EECC33543DA0464C
87C7860C2C9FDD0E7A0C0FD5FBE726B374C1EB8F7DD5E205744652D5C1AF8251
FFD78CE66CFF8F0D030C4A10BAB66A7A72F73E75354815CF3F6A23628411C111
3D617DBC36E1B394F819D5FA6D3879D854FC762E9A6269F1F650A5411C6287EC
FB10CF14250C19F55DA17F577422E621665E4757414108DC54229CF23BA5A87A
674DB30DE540C495BF494187E13587E1EB4ECB9A60B9C54F6AD47359295B31A2
1BD06DA5F383D78A9BA9EE1A88DBA5B2E965E165DD866B75EF5F09FE05B6F29C
3F098AE0CC9388F983BA2ED3978D7C48C9AC98AC8BD6B95DA8AFEE2E9AEC1EE4
720E17875631BC00CFE36F7D76CF858168195F434944C752106B24D6E26B2C94
2FE8E59AF4BE8D99393F89B158B434D1F6CD901DF5721CC7E45883A5715E7DF4
B9F4F9CAA5B8CE8254CEB4C338124A781432FB44E71A16D2E7669AE4AD975F1C
C679CB62A49F5D22910407275FDA7030643DE3E5F437CC272611937FF572BF32
B82412766F02C71882172EB8E4F7C7F65ADA3D31E0898C0131A45E1714C56002
0C814BB8717413DD2D78EF72889D942E153679847799C0444337FD9DA74579B4
FD294C55F248483D7E051B812E3072471A556D6E43DBE02536E476BA13E87248
FEBFEFA5EFF61F51CBE3C95138CE5335AFEBB4A261BF4ED68E98A36D05A6C58A
6F7C23352B1BE9781E284786F470A69891C1FF7B01B1ABF5D126C855C415B110
73852FA07673BDFDD9E8871A83B0FED13053C7F46C56DB35CDE8479DCCC09C28
FB85D0741E5FA8AED91B6DD363877B4FF1C919C64F28B3E74322032B44B8A278
2FA690CBA03C04F8E04A02116FBDFF3A2A02A995392B4C3A9DD45800B61E9420
D15E347D19D9B3E6F7A0C5164EF6EF69B520B607800508A9793ABF4E7F1FD8A5
3F4AB39B2561B7C29E108A5F5FCDD61A0C1ED6C4E152F6AA7623BE5352A0FE7D
C568B9FCFA72472DFC598B0DEB890B38714229098732ADD93CA8F065BB733C91
49F7D9BFD51C9459C13861F8F38ABE24798B9C5ACECB84015218964A959ECCEA
CDFCC5AD89F4B85B5D9C6F00709583469B46CA2F0A7775B47D69384EC827E30A
D987079333A3CECEC676A2FCEE7B264DB3163C5E135D18B469FB7FB188BA26B3
F5886F2C544ED206F1CA775AE15226F0E385085555A1975117F837CEA7C31E72
B4596574AF5E11DA7509F548CD508DFDB49240BD8BDEF360F58A5502E01A8394
C0F6C1650248EC3AD072D24A356C650CFB6D05FA39720A9842228398EF91E536
27A041FC5B3364399C99A42E59981BA917B10B32ED08E731714D36CB12387B69
14641BB19E4C19E0D512A6670E65E76C5763498285498B483D5B1DF14DD54B78
6027DA6EDF94F286652AF3C8C5E4363026D58FD2DDCA7498A917060C1C2D558F
9DFA1C97BC9AFE6B24A4244945E7DE3ABD209DF0563687E2D01546852270405F
8DCC6C260E32443268AD00F2FB29ECAD1C4D068F8ADA0617481B2C1478C67845
C9768E16CE6033054CEE883A53745D3D58E0343EDE3D369585FA1F2C142254E1
5BD3D98B730D7F0D6D7DC137A9042372083615C75F741B347DC3E17F23D8EFA8
6A9725AD8C0F3819B6DC88F6979C3B830E3F9EC4FAE4A976EB55EE99CADF8803
B3B47951C9E432951687E8DB98C12A04FFE378C6F866CAD8F3121246BB55E4D2
1F2397BD6B4EA476D1DC5B680A2C16C5921052DC73EFF9AC470493F378AEB0A8
3E535673625D660BFFC49645790DD11C5A93AE874200E79AE752F1AF437BE4D4
6E3504F86BAAABF508214F5E04C43E93806B86F68A2B2420DF24282AB34A835E
CF352A30D0857AA451AFFEC8D4777DD3935AF7474112911E07D4E136032BD682
9864548A78EDCFEAF42B4988E5356BCA884CAB3AAA47D0F516054B677019E30D
59DC4EE8ACB74F4BE544B73E73D8A5D3473FC8BA68DE94F9BCA99119B1F2AE8E
16446F4C9EE6520956FACB3271ECF8F2961924C5D1D2B487FB03CF8F9297E3AA
556D261845AFFADD6A45923C1B5D08C0E1EE8C5E300A394A9E1DD2B81C8833E8
E8FE1A521B0F72B8903EF688896676D535980FF005D27D8AB48425DE54719513
CF0FFA3ADD7B5650D6FEB4B618C3F22E47D3C773F879F6546B1530C1824C1087
01F1068945A43EFBF5F2638DC0A41265A7EBADA37DF48274C2A2276E6C5A7DC4
AE3C8C73A9D5D4C6668C23B5A8779DDB875E8E4F9C5DC24589F04CEE35C0B418
F1531734F081052B2EC8AF9A0214A507C0EDA65719992EAEF0877180726A384E
AA63174D451300E78397DD85C47F13230DB04F9CBB1486DE36CAC208B2FEE06E
BE3EDAC5BE90A4398093F3BA283EAC41D86F4CA365B8565EB84281C6D20EF41D
9B015D3F7C12844A8DDA7ED91FC2D8A51F6596904502F8F7E37405C1DF6E5682
AEF26020F0CBA556F380F4D89FBF721F8D1F92BEFAFEA2E82AC56038ECBB994B
057CDC39222B65D00F85BA68D535493023481716B37E44265DC820C7F2E66F0B
02AE64D267F2C0424CCE8ACB3392931DF705E48FD08524846DCD25A61343AF63
6E8F58C4CF18877220324EA88E9D98BA846E4100203E6AAE0942BDD7BFA19D7B
0B89DE2B51C905BD28EF01A9CAA48741FB09D83E10B40316858AC1D0C8393BD6
BA7C79FDBD5B667B66978A4DB1273F669AAB4042B77A195688892DC26643D757
D035A91A5A5EF8979DE4F0A7316EE3B945F199A95FD69A9CBCE25FCA6B9D59B4
93F1355034A568A9EFDC3069174AA8C5C889033573034E4D836317C4EF65AA44
380C83BA0CC5741BE81F1D6384AE79C5F1D0EC60DF11034F0535143192DA5A89
C561FA8C99E1F50D10FECDCBB0C64487FFA69C572DA30EC25C706183EDA76026
22BB34E0249203C6C744471F2E852AAAAC41EE58FEFDDB49334795A47BEB3787
81B2641E63C84B3B377C2A21B568F5327E7533EFF830197B0F4FEB08EEFF101F
C996A43BAD8CBFEC888FEE20DB79EA670EED2E2DCF988BED36EE1715F8726E5B
AE0A3812376A3FF5D5F06B19F26BBF45E7BE70C58B8E2547507653656FAFE654
849B6B67210B41309C2D0C1B65E453AE2821C5AD612FD43F3B7F0173B8CF79C6
8F061E656526BE5DAAE75FEC5ADDE9F8D13F72947E94A1C3BEAAA9578BE37CE7
DA4C290F4EBEF3D25978DA3D020E34D7374315A736793F0C6BEE67C8C34470E5
E7612699527FA01355BA80A96478571B5060B02F14E5A6DA4324E2FA69E6E45C
795E4EE77DA537A98757307AA940FD649456823478FE839D99FCE6044B408E87
BA5ADB1FAC7E03CB76931D841193777A07F13CEDEEBC4AD4678AD77994902262
D6F7C9B0509EEBD68A3BE612402BCC5B7162FE0698C8B383D89E8C713D54D7BC
721663BE20A71F3C12B7D51D3DF7FE5BBA537EFA3A867D95293E7380AF786BF3
95877ABE50F7814BC61BCBF259198C316FD5CA65D412FF6DA3892392E05E5836
4391D10D3068B23C15D2B00E7F48B1F9F41669064A15C944B04629479893DD01
FB58E4473BE8F4AEC0B499B519FAF6DFE285F4DA7E23B38FEBF3A46205DFCD32
A80AE9A5385DB1D26C1023F801D61CCEB8B10560659644650888ACE5E2599EE9
832FC6295AF6A58B6587FB7F04585920EDE7339FC33A0C7791C2C7AF23D4B556
CA0222FA5E95488161EE2810103FF723AFD4F6DE83F99C895B3EFE9ED2DD6754
8962C201A4AE391AD6BB61E2FC6F8F4E199B0B8C578DA8EFE1FA31E602A7E795
44F0BDACC78CB2824CBEB15AFCA045BF0FE8BDC1B6F2688D3E8133821AA38E13
152F3EE78AF6A4CDF555A95D624C5AD391E3CF99A7A14C2C22E6484C881BFAA4
1BF0A7F27D2A27F5758EA8C47DF848A16133DA4477C6ED3B739AB5F410F936E2
EF7BF07447A458BEC66C8C87D4CC170CCDFBA8D7586882B52440D618D25EF03F
0F3C053FFDC41499520A1D4284C1348D2F153ADF5EB0300E56B84585664B8494
AEC96C3061825D74EC61D6EE7F37F8FE7F5E51D7E9C4341E6AA52E7AB3A120DB
C6F1BE53333A54CFC2F849E5AA224269982649B59248903EE4F184D785136F92
3A1A34525DD9508DA5435F7E5AB85DA35A4A00AF80CA3BAA64FA5B404CCEEC09
5C01F1BC73F3C2FE510CA757908767E5BF3B89B5D61CB5137A383EEEB4B392DE
482C8FB5537B4D032B507F0F11DDE2CE9FB7E46E1EBF5A23C2956ECFF94FCC9A
EF672CA69A31B459C67B528290DE474B6312B438D25BF07E6A15E135887663AA
94F1A3DCAC94B2A3F19262CAE61171C964981B56495643232B98CEA6C9B95FF0
AB8C7F844598373A2A128D99A50B9FF96F5DB7ED0DBFB5A3F0B3867EDE0A050E
52E8165C8A0A43E58943015C0481E1DA64E227EDE30541B59B4046701B863D37
650F432A1C25FD61762C34E28323DFCF4F2A5A2CDE6FDD9848E2FC7E6BAA9259
F3EC1D9CD87E4A67A45CB26E7021D872D85A2994DE0836C4BB16A7246621D64A
919E28C6D83BCC3EBD0525806BA4B5D390844ACC39651102C3BFF7B7472A1573
A6F2BDCD51D90F8613AE0E027627107D618A32FCF06C537AD364F601E20CC354
22F071409556FEB373160186C8A57DB28613E3EA897C8D472A92DEA660660470
07D4672D3AAB0C3887B67C6310CBF048488F39A7932D874C69BE4101DFDDA522
58A95E68FF5218541A1B7A79372401C1B25EFAF0B6C9DB4FB162BACA8DD0D3EE
1C89B75AE09246578DFFDAE34CD4981EF2BDE425DAFAD57305EA38F8F5937EB1
31457FE094B9989DDC8B2B4AE32C9F024B41D174C9171301E00093B749074B4D
71B1A395695698CC0554088ADDF7DE76B550C12FFED7F3D86BB9ECCEC1460BC3
492D4E2D43A3FF2BA0F97CDB6BA9B9A5E973AB048FC5DD525E8C161A4CA10811
B93C47F3373F4FB6C6F6C5FB4554663DCCECE15284133059CC05A2A5BF427FE6
A4FEF475DFEDCB4D470815885DD875AFF0D3E1162AC41F444B8306D8DE1F07E0
A23D24C11843813887F132E858ECB12A3BF88D4C373EF55381DC7CC426CF4DD3
27C80755489570D0177DB2CF2FBC19CA19A022B3319879B583D2947F2AFF2EAA
ECB36B5ECB37F64ED5A557BED377BF41F0BDA2B608998D6C1693EB014B974C65
25DD1B5F0D536D68A397897A8051C88ADDB6A7AA52E456ECC31C09F3B4A84EF3
AB2F4AD747590687ECD0A882FEF2C9477B305A2522E932C7D13A59845679D20E
004C801D72ECF91C04D637F19952849DDA6EABF5F6F82C036CFD8CC3AB581D0F
EFCECAA1C67C578A0FD5885E058E5458B790DA9C570DBAF16489AE68AA3E7B22
6595294C4F58DAA8B50D3174A09EF9EE094DA94D465B64181D7608C39939B353
218D4077CCA1F51D800942513695E29D96EB9DF8CDC2E99BD230D73282D37CA1
32C8D8D8A1D5576B8122233B8629A45EA4F5AECF5F6CB5BAF47F47F56209E29A
008F5B0CAD5A0D33947FEEFCEB87F9E5DB08577CDF514D89222B9EDB746D994F
9CB16B0F39DF72047F1B54D024DCB2A058CAA7D2853F12AD968A71BC260D99F1
D18B30742760DD3654A5B1CF4670EC40D6801299D4683AF33DD5F685EDC21975
B046D2256DEE063D2B14492B5BEE848385ED0203E85C11E770A43A37AA6134C0
E69C14B9A8D107BD562FB9652AD7331C32DE153A1CD7DA4C1B994D8262A7CE9C
F016EF118082875ABE66251FC92344E1CC8A1714E73606198EE883E8FA307442
2D0A3B5AEBCCA1B9F21DAFFE5EDA1DF77BED8668E1CD9476060093B97070FE4F
291EDC56687A8685FF8F7A5F55E45A7CD0EE8D4DD9C89EC57695EF317EAA2EBB
ECAFD370308737769B2D05BC5A2D6479F3BDBD823F3256457356DF19E4206B08
EAB28B6E40C949C51CA38E1440A40FEF637C6C8F52ED93BE799FBA07E773AFA4
13FA020456C2A7E549786C13EB6039E6AFFC4AF6D74338BCC106655885F350C6
7DE970A9CD567850971D3B6EAAB854491A00F3EF184F073037C8EBD18EF1F0A4
8064304C49A4C221CC07A78B626D79CBB18285BD9C0C8320B0DDB39593C8CD4C
F3A47E19366EF63AC77D02DF366805C5FF7906D4589865036B4C875CDA4FB421
E2DE5A1ECE599E9E1B8781CD6E93FB7A606C0F2B670A8FF46D08DD4D49C2B9C6
A55472C76B0887A4269906B443A54C573A389EEA62E516ECD4C77704E200A305
49CA515BD240B349F333E5CF8E29E40680A6965599170F705CF3F1C0F2FCE16D
2AF2AB05C92A410CD1EE86CEBFB59BA8D92919F5E4F8E564B6A21F174C030A24
EF7E0AD0B505F9EF10C6FF10BE9623578340902634F07F1DB1D0DC1FBDFA5BDF
823DE34150D3AD69AAE25086DE2767D48BBBEDBA5703A43120DD1D8B9780D08D
4555B0689A0F5FFF8C1E1D3A7920E9D998D1471AA93DE3D929023AD37C97C581
4EE6B3ED3846AE686A2365B99BF6842B0D92F5A992F1BD475D30B6E3DE98C32D
B09C1C553A420AC587BFE655DE53550397CD075EF9CD4108807910AD1B2E1B03
7029B3DEC361F6BABA3C3CC6D063F7FAC82F53AB2649D6AA8C2A729934155E84
EE8652DF9C530B30E7CEA248256A943717622E65E875D020DB9AFDD6FDB61726
B1120153F7A54346BB56BE52D8D9E446F38BBAC71C8D76BDB8867CBD2E3E18A6
DFC450FF004DD14AC87B5FCE6052020DD0BB54964BC69F029005FE65990DB680
9CDB5646E6E36EB26C9AC6050901BE291AB18C14A74AF988BDC8524D89C39B10
EE24BF7937E45164BCBDA5B84BCE21A72D0BAD235A6BA3C423427B7D0B2CC72D
382126109CEA5799C86258DED4EB9AF1530C5D217FE3F59DED9F5FB79AEFAC80
D14A3C13369FDF443F7F89515501683915EA7C7F073DDB8612095CDA394AE966
CC2A4D8EC2CE04B25FAC67E49516E8AB6D8C27FBD0ABA164EB8B70A5EB75EAE7
1B4EDC63859805BB7B714944B20A638507D0F737928A439148A456405A6BDE1C
BDCAB201057A0D20781443EB00456526D689D6D9D549A3CA18063125F9479456
7129F98F5E87CF80FA42DD4BE001C6926EA83131BA0738B0647FEB1D8C6490F6
95CD2B3CC6238AF23F26E8A7E73F2CB0E018792ED4849BC8BCB703B7BC094B13
8997416483F883B7AA53670B77FBB94D7F25208BFC4BD629F0675C24A815FC62
9E491051C15D3965F89135EC7ABB0FB9E537D8A1E90CF7F4238FF6BDE56F24AC
BD89A0EB0C3FFF39129085D76788DDFFF6535F76CE5904974132B179C22AC760
5416C23F9DBE0AC3D68F80233556C31EB70E087623FF5BDB7DB64C30FBAFC08C
AF7224024CB9F9CC52D013988DC1486193E439B3495809FBA3AECE84129BDD3B
551F67E1EF5FC9A28A3D569BFAB2D8E60CF796CA51D7F3D2B1B5C9035A8497D3
9BFB90B47BE4FEB02E55E1D1957238448E90F1AF9947A85CD6E43167C963D112
ED5A4B5F3926CD47F8CD84A2BDFD18EDAE2AC6F92C903560EE99B8D9F213B64A
0AA112FFF78651ECF78DE53F376DDF064D0E5C7D10772A96B3624DF05562DBF0
92C34C152416FE8E4CEEC1B930C47C32637285C887194568761C5699A1BD72B8
E26481384648919BE168E7FED518D55C9BDD014DD4E1303FA545DDEAF0907359
C4ABA7712ADD3E0DF238C0C8D8CF7F0061AED61AAD32532FB045E39C3BB1A102
C1FC7017C67BF7EDE2E1F112662BC1AEB09776892278CDE91F48C8F209C28A1F
45830C9B03A5193A5E616B0D562D4554FFD151A678BA0FB0FE05632C7E03359C
C9346F59A216252C0585DA79797B1ED4E58A40492682D92A4F529AE4D6E39382
DCAE26D07923E9E9DE414268F0EF28303811E8D80619C866ECBF8473EEEA52A9
E201CDED982840C04920F9997D4AE495EC7B88F67F412BE9703311D217E7A39C
2D81B561DAE0FAB8C3E702958FD8A2AFA463D399898FD03E4239DCE09DA30D1D
2B74FE063C83603271885E273FFD6F9041A3BF535341D078AD468EF424500645
4AD98BE8917FA3AE4EC1D17E1055204134D6098759EE77F26B0B7A45E6C7DFCA
9F768FC754132A632D3A298FCB5B9A26AA1D00A402345725AD1E3AF50FC22B93
0377F63EA57490C8659F7070B3D60DDF90439242B490222ED1F6A1B37ED3F1B5
3F361B157AB74164ADA5EB6B5A44466A530A8924632282557897F88B1DF7B090
10A5F78202E397ED638C17C0A4A776126EFF8CED799AA05CBFD626C3E458B9AF
CF019E034A996FBC6332E5FB954B11DED847C9C29BE28BDE174420E47B69218E
5B139337857A214D7FEAE41F0904852A33426CB410C51DC668DB8AE27D0E039E
BA5190DEB78D3F527DF8BE5A308AFDB886B0A0A2F17E08DCE3FA82C5879267A5
87231BCB8C6838D696EEC0D690092228D3E662444737CE13277B989EB9031E6D
7C744B2E5AE2893EE2E0CFC250CE34FE7C4CD6E0C840FC9F0EA800512888FB62
BD14EDEE9E440C2E97C0D4D2E84244FE9022F4CE705E005FD2A0C3C758B8F16C
C584BF8C364600A83412CDA03691C11F3B53B08AF0A0D24DE746A91FAAC0DED2
FB176372C1FDF9F655F41A867CC64DCE61517D1A382F0C657768CAB2EC58E363
D60B785E10AA45540009101CE5B45D2FF682F136376F5B2D754BDC15CF32B990
A039D2143A925FD2C9BEBE38EC1997A9CD1D2FDD16819A6002D55A676E52EB05
4B272E385C6BF84A1320609841DECF0CC445BA139F47B22F68094D8A30CF0589
3F766202B1223B5469B280CC0D2BF786ABB68EAD2C5F355904CA62AD9B0F9A29
D1C32653E0526CEF2D6BF5F29B97759FC96D82181D30A35188F9D3666728FD0C
DF7B30783DB2AAEC486A1D0CFE4748ECC87B317E3C53717B6B351BDB357C26EA
D38D6BAEDE15586C9183CF50C3241D708620E468CA022C9A92B439C90D62C52D
1FD3813032FDCE664D09EB2A48F1C857CD2376A1C15BBB1EEB37E8B551EEA30A
CD73C0FE6B04E497EF4F39B87975A9508E0C4B71BC9CE09B5C44C749EB1D54DA
4EB07C11AFB06F599F57D65329E3395CD96DE4B7D7132D3933FF113A7591D606
ECE2A58FAF028B5B368FC324E117F007EEF32303728D7AC17D906B1110F10A2C
7DBFBFC166C2675E1A328686071FF45FF4891827B42191A4F1DD78618FBEBAEC
359305D1EA0F3B553DBE5603AD2C6BC74F993645A54CD026E9257FE352EC31C9
4D554A7DEAE9BC0554A87D0321C1E6AF39BDC76D50022B04F0EAE917F5424747
EE1CF8020255CC25DE01D06EA8F5F116473EE6927C88996F371D0E7E4BDA4EE1
E31ED79A05F84C40AB830E5032085A59CA931B74B66068F4EE92338FEBABF8F3
FB9124252C965D4A83270D5F15AC1BF5610336C51DAE6EDC0A9B7560C3711FCA
AEA9F1554A9BA8AB223E1DDF90B833080969A44C772B5D827717F17BC88076A2
7573B0575F8AF86F4CB7777423FBFB60E9181B3DDFB21BF8BECC7D7A129BDAEB
EE7DFE65929D118C097B8271A261CC5E5A9AB27619EB98718F5E746036DD97BA
DE9A93358E4DE45025CFA0EA70480A0BEF0DDE2BC380C3B4432C687854820730
07093F93AA8E6612AEBA0C1EABF82AD62DC29009CDECA7CA9E67CF319CA2C345
9709F6D0E075092F9B97068E5FE8FE88D6A38845A3031D27F444E000AA980B1E
0226C0ABAA790CE4D543A62F8ABE3BA73C5B8E26021FCF9F18E7A3A812D3757D
625730F6038C452F6D58915EE6DE5A4C27167E340DD0D478F4AE2ED5AB371EFF
558805E00ADEC7475EC5774DC579163DF835BC7A2A01A149463A73A05A696AD0
5F8CA5D6E154239C691A108DDF279CBB2C1E8652116998F9E3F6DBD157A55D10
8F2EC16439251E5481B3C206B0BCB30EA0233A8EEA1C0E70833B5C4E1AA268BC
9CB13F1D3ED1C6AC8348E8152C6B484942A109F1DF543BEF6167B2FDAE97E038
7B7B4FD6BB490A0E0DF00C4E072865865367B99365E7C5E77184BF797C37653D
66A8C1F4766970B1ABF16801716B49C2564750E26D9BA5D0E15A5AC4C6ED2233
0B3211944FB826D39F77C54BFDCB4F349FDDF44187973178179352C229D4AACD
57C74538A02683CBB1DC6879C4BBD862EAD10F8A5A08C6482222C76567E1932A
632B81042086461DF29B23AF194E7388B72B6DB124675C6CFF970A852F67EDB4
C46476A375371517BDCFA99968A88E39562F9775E52D9E20485FCBB81EBA4972
F9DF3433CE57A9DC445A1904A00E780E2B0E57BE2EAB44168F496CB4DFB2DF36
58B94B8EAB8BEF01118C87C4F2906F3D4BE0EAA15C2B760175CE05EA4C4A0FC3
130DC6F57A41FDEA6DC980864B384012A4E160DFD78142A7513D465AA4C27D63
F3C57811A8B4D2F2CF476855783C937BAF80464A1F61CFD2D4C389513D0201E8
021D99CAEF5CBD5F3E1938A15CDC32CCD10EEEAE42FA7268EC6FB27886FFB48C
AA7DE9AF0D4894C71F25CD5787A0A32BDAC2086368551195B09D02E84BD7D543
FA70376059ED523138C883C3CF303DE6296995883437A063D255EC479B7DCD20
96F5826C0630E51350EE7F57B9A16545A27E0FFADEDC725E18CE55E31C29E9CF
6A166057259D3B0A315B55740A96944A77B182E401CB1EB4F18E882CE3FB0453
AB9AFCD1B9F51D6EF3D14611E7359E0C7B5C47D7AB86EB468CAF286E1C256A13
E7C2E98180A4D6FED42EB39ED28C995D2EEEBDBE1520253FAA4A4E1E162773AA
DA1335501E5B833284E90BC3CED9B4F84FDB37623BEB18E526E441AB5B828B5F
5B2F5F837059570D7D7F201AD2A48693D8B9499B1292A02B9679B75446131F84
073286612F9AD9656B11253E9E09F0D89D95121DB694B6AA2D70745D2BDD8417
0D5D200DA18F8E118BF8FF273738E60F8B2F78438A7C2A6C1C2DC6F8D96F7D18
42314CDEFA26DBB0120A190A260B1D273606275DA5F30F5DBD111F1952A9A452
9FB7CDE3A1A0DB3E9FA42FD8F4E1B0E51E4101718A4688E410B2E6CE3F68D888
6956C43685EED779F1E9DD16211D50E49196310EC9CE22D4A8DC0D414A49230D
619F3841A8E612F4EBDA2985651E4EA2C88BFDD283FF299B70A7AC58DABFCD05
2C847957165E3AAD10791E509764FCEB1E47430DE03062AD206749C60AC86AC9
F57A961882DAF6E8B7BC662FC81BFBB1771E165C517446FFBA5F03DB26C2C68C
1A85D181994C5DBBCA37941D709C79E9DA83806EA9CFA74AB13C9FD2EC55FB53
BA868DB7E4B6A1489AE97E2026067B5ED0D841198E27FDC9C50EAAF39FD3E045
64B05A70CFBD571F20F583D9C682856A802FBEF0DED13A9F8F13AEA105DB8CBD
C1E3AED27881E11A96C748FA3E76AA2E6CA33602AF54675E2578A9CD6E1C4B8E
CB6615D6C81C5CC77850CABBFD2EF770954CFB5CF1D5075777E628611F8F9123
BE7130A565DBB93C3DEAAC543D50A74A6A27E75AA25288112776FFA1C9EC432E
77A69CC40A895BF8868F6F7126357E5F62AC68CC5DAB74F9D0D9FB4D91BC9313
38E43C01254BDF59BBE1968B25B63D643959A9EB87DA2AF549EFC3DE0BA6EDD7
6AAEC9A8ED546F069DF4F733ECC7B1A497DA6AB94DBE1A892C2D363AFBEAF730
D6A981385DF1C5D1849CC8BD515B0D11ED0C7BDDBC69FC1E125E0035B32C8189
D1F3B896E316F48A5D52EBEB145606A9EAC8DB111868C851B64023F55F639F0E
1AD032D8B6358EF2D58F9AA24F9FE4F1FEC6E87404F2BCD86C8FCE12DBC52E31
623BE6C26469CB312B050A51D68078DEBED8E73987054A20B0045E75303FE939
3078A0469F5EDD3CCCB22DD9866D4D395CF497A9131F46C16D0EF6F44D5D0BC3
275AF9CB4AF29674085D7A5B01794153EA33499449F6AA3C04EC4E36990D9369
BFCA93C31E42A03501AEC3C80F7EFF8C02D75BE6F5154BA736F588AE6E026773
076F674585E3C07104489EFCE0E2DADAED5D1C62B8604A2431C191D9680AA039
FF221A812F720E21956A2E033626974C87EC81DBC0A7F1344B4B90E98C3632F0
B4AAAA7536C14BBD42E4419F33A06AF51863F49BF54B26587A9478529CC7AD49
242882F8777E909F101BC421BEE2A0A78442D25BEE0B976B72E0A729290725E7
C0DE8C3C79D449B3C9D06A2838B614C7524FB36114E24D1FBDA583DAA109A44B
5C5DEFF73C9174391378B77D50811FE64A8006D5DE23455AE6182D8ABE22AB5A
66ECA88ACC9ADA146B943D79D4F1ACA132A3A4F88B7530FB1AAE5D906E39C138
8073AA6BE6CB64B393D7E78C5A6BAA39DAC9EDA6F6A4EED10BD8B2C8DEF43283
BCA59F109E30CF3BC4DB45B63B2C06095AE76405DB4B447DB00BE2A598F6425E
57A3F420362EAC8ED3066CFEF5C2C78CC5B51AE3D1BC0B59DE733A5D3BC0BE55
E5AB0C28E3D1DCF74A0460C2D544A547FA72ADE321BE712351077F7012E6BFA4
EC70C63297B03C9F7F76187207096308882D6C6F03C6AFE4870946ADD0027D50
ABEFC5A13810FBDACD4BFE3B88FE50219DA95733FB29178D1AB146F6465B8D2B
FDF260493C254FDB7C7522B98D053EE183886D57DA1B5C8756BF342E2C2E0A03
A907D060F1A81AFCF2DF52C89F8CFE71B0438E75BFC6437DCE638DB3AD91AAB3
3F9A26CFCEFF0A17CBE6140C651EC18339FB3DD81DED4A527DF197CDE89D2E5B
142E362B160F2D70F3B0732F89C35F4222D2A80851C216D68AA1C25AE6A741F8
D6151898F295F69F7535938109777F34C50C1849CD1A342735D718BF00174F0E
F211BEA9ED67D8FEA944B876506BAE5035F7B32AD33F9C19A2BEA224148329B2
0D47AE8F8039A12BBBB7FC0CF1D40B0E3787EA1C4851CB60603870583723D34E
F35F2977E59B0C8B9DC88224D3CA23832FCF717D7882E7D313703FD9243652A9
DC12C4C3D0BB77E3CC665AF440A24A2CC6AF4907D5AA4FAEB237B45D119A3193
177721392CA0322F4981054E4D25870A44CD3411BCC3E5972284BE6598F4EDA7
4C2C90DD3D8D665948141CA2FF954C97507FF1D0685A96F6F25486C81286B924
60F780D81D5E04E732A91FBFA02C34EC2E0F76769B34A6ECA2ED5009CA34DDBC
FB8E2693F3735D4112330878CC4F5E3A136856DCED8321078C773E45F975F151
D2626C3D9F6C72EE68F3AB075A5B8FD90AB5A1C3F41E337417E37D0C9096557B
C889A7CB17BADB9D71FFAFA1EB402028A2EAE68BE8B02F9F2920C075B98985E4
D54051873416D9EE4BDB031312FB6F0822A9C207C3372A976ED328379AB20325
0DB92D94F6A7C6DB30000336BABCBCC2ADAB019E31202B24F7AB15C9D91567F4
B60CFFBCF4E4E16DB04D35C0A7FB5E9CBBE3AA05279EC5B0F51748A01A70DB60
70D2A9CCA9C57F8515BAEB201FA6267F27663C45FE1D38F539E5B493524F1389
448A393FCE1A7B2872AF7728F3D39E0D60348B6EB14B827B901CB81A0D933A20
B2B20F8215EF09530ABA23D8667E306F51E0F8476A395D215F16F459DDF0C575
BC8E0129D5BC2B191721C5E2316226818A287B043B085F05D1861218F1B1A258
7380352CDFEF28904FC0016A0C4DB969538906E4D1C4BA92786E43A09155DD6D
694E1E4D302DF4401D5E496B953164CDF721DD2AAC09BE5A04504396C21EB131
511B079DB31B88E92B0FEEBCC01AB65406D6F085C8A463EABEFC3CA9621218B9
D31BD3D78BD995ED3CBBD6167311CEBE57F6085F2BDB2069050296ECF0188950
4B4BC8A897960874C40FB860436A6A4E319A65AE09C523468AD4CD1FDC52080E
279CC29D4B8247BBA7C12202B08DE68B4A049A1D9460E4E466989BBA5DA654C4
8B3628506F3B515BCA0568505A38FD92A7D029D00367A9328EBC348D2667984F
16D636DDF83E6593C64D8FFA6FC33AD9284C71A340C2C5A544BB564ED425C285
0EA487E5614AA1915DDF005FCC15F85F9841D57A756E080699CE084B9BA16AA2
741AD9628FFE197CAC65FE3B71E6BD01FEDF5F2DB211E6C298F44E94ED4DA850
1859FC8C5C863A617DCA71B1990A3F5D07CF5CC89591165567286400F88E6D47
2623E65F2B24EFE961D929DD7A1E3CCC10BD3782FEA866AAB09DF68A2D01AA68
78FA5C5B88AC53778299F97D275B662A7D62F9B913ED5901686586E53050CF8E
F0AF3AEA8286E809031D8C48391D0ECC50DD43C2AA07650589676139B95B6170
07B9C8C4597DF36ECB2434067AF63125DFACEBE279796CD185038CE6A73CE4C0
F7E0C1F88802CCE16F803C0B39435B7E8AD02DCE558F14CD093F373E847B3981
6D1598F464176CA1814B7D503AED31523E3866B8405735C66FDBDEB5B8A696D3
FDD5DFFAF237DF11B6B0AC908D9F5BA72B109BAFC20959D43C8717B192772C69
99D8E2271E23D97CE113E611A0806CB42A9C29E22E36FAFE64FAC45554A09479
D6E7277FCA31676E57E765AC6CB46C66E4A794B031CFFC033128C574DE6F9608
9EB6920DAB43735C1E726C70FC47EEAF21B7EC3D9511D12DA656C01539B29AC3
56CCFE73A3074D23CD33D7D74C507368B9FA443A8380D41212F29F9F08C3D6E1
AF9882DEC0D0E7B01AE9B1CAABFE3C717C25AC0293AF82245CC229C8B9703B4A
8E619F0125CD0281EABA20F84BAE6AFFBF7AB088620821E42DD3DA4595E361AA
3FD08DCDDFAEAC0422A304F0A745B5A58B3529E1F79294E023BE841799962EE7
2828746E36C00F9830E72DF2DBE6832B17FF48283C2FF4F06B17F7ECA45CD6D8
2F74AC24B6EE00F945CCE9661D3ED1D2ADB7ABC13B8BE60A75F6783AF2489C22
E0DEF2F46AC554F637A2E8AA51937F603C24C09DD4577EC69D8E09A5D1624633
EBD365C8CCFC528D04881BFE4C30C6C6140049F6EB2BF277D315A734A264BAD6
043F5C32DB7AF7A6F7E6F14449306597246E126A78BDAF01B997CE93BF1D29FF
0A67ACA0F501877C9EDF8DDAE50695FD089FFF825F9A5DF6373C30CC1B3C1343
D0A239C1CE599FA8AEA9A6EB83B4ED1E02A2E9F1ADA09FE89F5C359751F97DF4
B8D99F72633DDC9C318B1F6FDFAAAA284F647F2A8C2522DD89E1113BE93A9BC4
A5D7855D63389F309EBF63CD466A52D670884212282BB7BDFC5514F47C6E22D4
006DF82204E20C61E4A263A02CC1A99CD9ADFCBB97B62C154A42529EC19FB7B1
7F8F79BBD43DFF150B99040EB708F535B900FF55D6CC03B851240F120B3ACD06
42B5391F8FC2B6F45758CCA61DEF86700098FD6BB4505BA779E746C5F5EDCC75
AF25592EB77206312831AD1B4337B66E198190CE806E6B742C560D713B3DDE22
AF61F37416BF11BF245C4757D39A1D6CB266B35BE0B8F8EEA54F902BC07DF163
4018E5BD154D98CA8551C675021EB7C935BB6C427AB5AD8FE1BFD0BF06DE115C
1D9A842CF81EA96FB3C886FB4CB29872BC36264AD39CF3F0A76D8AFD5636B938
00BF51D1FCE996B6FC48DE39C8C9958DB215D56ECD72727552E9FAF091B08A83
E09ECD1CC05CEC3F77BE24250C53B005973B247A96CBDE5A4CA14B643F663477
8E2067A367AE56DE39EDE966E1CD647E1891CCAA909E4D93031DC7ECB6FD6F90
4CD4EE2E15543D422F1FD5D00A11C73850F1025C2BD2DBA58023A5F76A0F55AF
9E27D0E600C8C60A420C939F51E67859E98AFEBA2A3A0192D1EEFE213FAD309E
8D2065FE470D17398BAE7C982DFB3E57A39AD790DB7CFEB76F1E44DAB9D65094
9D437E9500F95B6063898638A98B9F2327A6A84C1F435500E76C876411809AEC
10E0F7E932E8D7E11D204D30396E5D0414CAF2F9BDB912B38F4C80F6143295BA
B372F862C34BB852F458D4B598BA70352177C08E401FB626750C8D469122089D
86805E3029F169A9FD55B023B1524D719FCF6D83DCC77436E3F39DA5E8E5034D
5DA99FC521C817FD17462A0BB9E8CE82D2E621E3088DBFA0C0D2B51C21166E55
4A251AC2AE94A6D564F00D3F6A40E41F9CA8C119EEA3757A90072C9327FB8671
DC9F1B6E5772B8E65DF2651F152F7F6B1D3A39459FFFE4EB149601747FA7F8C5
21CC1A4E7981540E43880B908409A86489F154FCD7B30761A281086601BDFD37
C14C24EDB4BA24EB32038D2D9F11F01560DAAD1E414D30CD9B1A1244DC64C814
1DB86B2447CD91BECF02A53B3C1720CD9DA52F484D8BC9B5754F40E41B699509
33068C0287F8E3412D428154AA3D219DAD16BC7286DF3C41C0E8770824DACA81
22263C05CDD35862BAE14353C1B0EF78DC33427D08F4EE3D3B88AB9EEAEAFF40
E6851D50AACBD87F67BFDA883F71E9E0078221C945672E5B909343387A7B8A59
B1A0CB9EC904BC98ED3A20924E0AD48A0F932CAAA509996E37866E04AD9472B8
114DEA8472389AB5FE7FD3654BC1DE5EE9875C020A3642BD966CD63FB4A035A0
10B23BD2C6A9F8B18E5D30D92EB37D0A59F6A1FC35BCD3B2B6A1A0ABD623C9E2
F000F38E6B1DED580FCEEF9F0BB1CAB1FE71C614310AFBC4BD07DC704DE25C55
BC6E83F8043749CC741128BE5B78F366F9F14B8F4B9A0457FDAA728F59526B2D
DE775E33BC03C3F630C8BEFF4BE81EF41F8EF48D24B846B430EAD0548AD1BF85
58FEDE4F7052C503D829BCE21486FB68F95724F6ED413314B83D375D5678E18F
27FEABFE34D0893DF9B3364A2A6F1E6EBBED8F6CBBE82A0D0A566517C53B1D10
82F9F2593A23D73D6CE836FD85BBAECE3DA0D74FAF38F65D10171C9F92C3CA8C
742A819D9DD3AEB34DC77FBE6815557F3D8F5D329427FCE160A2D985228C043A
D144B2FB6BDA24F2B444FD970339009211C768BACAAFC9B7AC611527AF45DF3A
D24054A9A21E45428A97157C85625723CEF4327769A9CAEB00ABE61D9C52F85B
DEFBE79BD4784A1DBB8B0F6305314969C71F018D5D1F0231FD9E2FC1B8EBD185
29EB61849551BFD0DD2FCE782E8079EDF3BA1120F0896BB10D88D7648AAAEEF2
2AC320084125226267DFB8F0CB7C238C7C992BEDDA45936867475731BFCBF7F9
216B810A34B3C66340147AE2C120830AB394A938E0E4D965F1448F6EED003E8A
7FFDA5F0967268C23A2D72B6F7A0510F38953DD2F4EFF42E239F27ED1C92CA96
00D5D4F051B54FEE43E0B60FB090A56A8B763609903D6A886FB76D0A43B6725D
082A9B9D48E5FAB0DBEE62A8A773DAC723628CFF0A8D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/UniqueID 5087385 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /period put
dup 62 /greater put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D9173633D9B50449E0
F9026E7A4CC1A3694D6C030E5AE53C0DAAF90B0046E22E14FF2787AC8194C42A
4B8846856AE2F0598DA82CA727FC5B3CC7E5AB7C0429E231861153B6336191B8
5C8156C5AE509A0E9F9D3F3D8C0DEC5ED5782110C5A6DF8056B3B675BC047721
CB956DB654E8D048A21F3593B0C11EBA35A96B80AC2217EC0A3453BD87E549C9
27A78FA3A462234FA2703FC50FE4DBC079D9220193CBF5CC4B16AAD6E682B851
C1B9F664D684600F2CA12F840A93A499B9C2B906C602D20E55F34D6A73AEA3A7
56AFB4ADA04E2E3518521E392E1C456F2F2596F99A13CEB5429909BA265E803F
A362400D5786F05A45BEA39F0953378F759885DDA12D8D3269D4748432AFF971
C03D5AF550FB08C0F4F6F9D39ED0952D7295C26FED1FC615F685FBF1CB93D635
E042FDE0946B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMTT10
%!PS-AdobeFont-1.0: CMTT10 003.002
%%Title: CMTT10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTT10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTT10 known{/CMTT10 findfont dup/UniqueID known{dup
/UniqueID get 5000832 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTT10 def
/FontBBox {-4 -233 537 696 }readonly def
/UniqueID 5000832 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTT10.) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 51 /three put
dup 53 /five put
dup 57 /nine put
dup 58 /colon put
dup 62 /greater put
dup 63 /question put
dup 64 /at put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 78 /N put
dup 80 /P put
dup 86 /V put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 121 /y put
dup 123 /braceleft put
dup 125 /braceright put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794DDF2E5ECEBA191DB82B3
7A69521B0C4D40495B5D9CE7A3AF33D17EE69979B82B715BAD8A5904C5DE0260
6C15950CCF6E188A0CDF841EB68E5A2F88253E382140F87C87E55C9EA93B8C89
14A36CDF630D6BE7CD36DBDCE22B21778E8648B97B7EC6742EB5114BDF0454B0
0EA7B1FE236C84C0E5308C871F67B973892890557AA12E00B2C20C71F516C397
3F3BBD14A1D0149CA064391056E45E9470FC7F6F556ABC82653B3C8049AB5CF4
BA83C8F2158C236B2FFD4208846013BAF4165E8BB8D334C8FF2E8D74AF5DAB2F
D44788869B08399421AAA900ECC6A2D594641C121660D4B5F512938994C18DD0
FCD9B008F68F0351D21ED735B2740CB1E0C1CCD25EB548C35B844601D98828DB
556F71D07E081A593FF12DAF83676492A0FFE16E95717A07082B43A966C1EE8F
8A59E1255E1705C43A23CF29A5E4A6547C93F1680A870EE7BAD8CF74D838CD5E
F806911D8FE4262ED8E7F5BC58B92C9C6D74F8AD45FBB021EC7E97393018B9DB
B1B84E7B243ADB05ADD3F1DB3692ADC5D47FEC7DF93080669E63281F1576B673
125EDF08016664BE73364F65389F7C3B66623AD1754ECBEF9E5CE6948D933787
A5674279ACB2EBECD3B4E6361419AB32028A27670C9F3E18B746A10B00AF6D77
4EC00E3BE521C02A99AE5BAA98F793EB1228952BE67934B91472E01AF7B816BC
56D7F19F631A1927846D800C107B1E9CBFF9D2DD513B4A8CE2E0DFD77B1ED178
E43FA7052765E9FAF89989D490D8FEF6C536EC0D4AE27A74F474B98DA9E6B92F
15E063DB260571979A5DE2423920CE1F59F56EB11E00E3BB9D466A8263E1E385
2014BEFDA8D1EA3EDA04BE32AEE6CD15C5C010A1DF7F705A2C0C18E87C8DCCE9
05D9163181CBA56C0FAC8C06A2990554C8E759D076B01BBEADE3B5FB8B551390
6C8E4A2A1C6E7D9C708614626F3770C0AB7DD2027469C77975C27576065862AD
04E5E50CEBE907E3E991FA0C627302C0E207B4D5992BEBAB5853AD1C0D271728
C76F40A79392ACCA7358F948AC65DC823CFDA59E1FF69CEBB6B7EC3CF21669E4
70D999508F9C49E2D9F8818CA53C977D93E15FBBBAF75B1E84F0BA62BCC4BAFA
4EEC82D804C8A8C0210F3E5E258BB1F6921AF02BA9861BAD5C3D5FC8CEFABA8A
A607E547B802096F7AEB09FBA99C83C9A494B94408DD607CA6561A6E6660C473
62CF8D35F31D052F6C6C8138A8E1430CBA7EA6973D6D510C1A06B3FBD79D9364
240C1A00272DA44B89A9FE8D5BF36DC1B5EBB4A78ADBE9C5EDB485F093D9517D
69E1AC9A8E6C9D7C324E3797CFEAD9A18E82E03F69B2CED7D5DDCD1A218BF2E2
ED2293AE999FE2A4B5213A10083EE0407BCF8007670B8C737EAB30311C868D84
121149ACB4A27F3ED6C0C181C98AAAF51B105F264B5672D7F745131ABAB5BEA4
0C9B43C0DD9116D6DC61F90BE72018F290D26D5E9D341055CAF09C9F45333CDB
D45B7954271767F638EEC499F7B53C2CC5774EA7A7F024C4CABFB93D9CB1856A
0C671A4ECA7C62EA5242648A84E7F3AFB9547A0AFC29593CFCE6D8B873A78157
D337CABD291431C0A2CE1F37E0CD7340567AC206FF98E4B5A6410F70F750451C
550EFB54AA259A1B236CA9CB730D2CEF125EC65D959441F7CC9768F777B44844
CC9842A307C72B740680ACBBF6AA35FA7A94825069BF7696ED81A371A9E5475A
9D997F2DFAD339AADF797F7E03E654234455AC3D17702A420EE0A597BA31BDE4
FEB8DBA7C61D311CC90441A620164DC22DC2D373973EF84CC553453AB1B3337F
7B39983B8DFFB3A9425F119B45C1CD37A76F905777B3154CA6200792F1759D06
E017890F4041A385F2238E3C48B6C8EE6F5258463FDBFF7AC762F6C4363926D6
50F004D473B7B7F73CA686B559C2885F1AA761653C727A77D73431E9D110E76A
2E55C68CD50F43997C9B2FC4710F8C8540909829E215678E63BB8363C4B8AF05
9986102BB36580D9CA95CD216B7C321822CB41B2E0422CD077F3B55E0246FDB2
44D5976F67296B5B0BE4B06F6E43535C21164E6C5089C3E9BA2D6B30888C57DE
49DC8D9D46C0D5EDC47ACF2C03B72DE3B69512508539019B759280BABEA12BC9
385308A0395C4CD33182A10A5A229743379C2075D82D8BFCE4A66E1AA087A091
8F5372684FA5037D1B92D50CD9CB4F50AD4F8EE7D51F1C9E63C721CB5B9BD011
6F0A8DD4FDCD2B008F223A1036D90F0F3B252487DE7898F9AFBB3A9D9CD49E0C
EF4ADAD5155A98D2125ED5A3D3907F67301649519419F33CD942E8DDEAC1BDA0
E90C431B198F646766A8FA9F8D1561B57E126EF604838C0C1966655CF31FB7EB
C8CCC434FC1C96046D38203E1791EC824A3D7AED85C029288D4608CA7668A2BE
484C99639F121845B22EEFCE0A3B808261921AA042AE19E641769E91277BEC29
4594082CCB3058F90FAC4A700A8A827ACA00FCF574ABC8EB7DBCECD97F2B22C0
0AA19E8739B81AF8C6F621D69B8E6F29BAE233FBA655A0AF5BDFD7F5C6B9167C
6BC7AB693D45EF2AD999F5DA3CEFA39BA48A17EE6D9F2C4DAB91AE3F0044DC3F
5D5506CE4675AA928B0092D6F173644F91295216D8BBB14CDDE0AD524A4D545C
1B5E284A3BF0396664081CFB4F186A84A0D24D61E82F4767C1E55A0642720CF3
909FA1AB8EAB78030B59BEA067DEDBD2F1D0340E790AB2777DB18248521934A8
BB38A58B7F633DEA4291B0D5D13E9A882C974697CC6D3B49E030C94EA29B5506
CC29C44D01B4751B453A46A9F6BF3BF135AE87A4CE232AF57B66578310DE41E0
2A6AC422117F1963C4D7CC306BD25A6E724E51921779F22F029733122E23E2F0
CB340008813ABB104380C80A492B3FC6D0BB07CB8D8409E9576891EF6E5C9D08
EB8320DFA31BAFFBD336D0C2BBC3D3B2D30368B9860768FC080D30569C7F7811
0EBEDA2962476113625EEB555490B8CE4C5F99D74ED10F738C61854CFF8B41C6
9402E56BE8856144A1A05D0B05F4CB7EF728B2F4F5A439F18C3B68CEFA41E59A
D8308ADC92EC1289DC84CF48D2CDEFF509A145BF945E1E00D552D329EBD2A7C4
21D58082CC8FA790E981F4AC8EAB99950678FD3A7DA3DF13778681B208DD71A0
7C3CBD0664B37C9EDC6B601D79A2C51FB54DAEE849F93209793849104E722D3F
52DFAF7047EEEDDFE744787A5801E4AC2C3D58EC5DDC15FCEE03990C53B0C57A
FC54F125A04C8E4A0ADAA725808C587E7DAFB9F784FA2875689979D316DC22BD
AA36B306A1ABCF907B63C6476737B746099973CAEA8C1E2C5C41F27E0F7DE8D7
F0D942E34E92F43FE902653D4D2EBB6F3B9F7928B1550A82AF234D45D028F429
067652BD3D391BF423AE72B9CB1E8D91E898161BE3A7849D456A861A2046711E
E934DC59442AE7D81661CE8EF727D8D7DDC0270E937E40F896AEAE6171661431
C1025C53172F9D366834BA0054FBFD84503FBAE328B6FDEA180F8EA35B1DA937
5CC3B8F00C206908C2FFFFA6A7AC6915D15EA44BDCF29E2BFCFD4A849535F19B
0D307C696BE8205C7D84B9C77F02EF27D911056EDBB4080E4D3ED72788666CAD
CD91B0ECE27A177DB23320A7FA9C31408B4D02D2A4B1CC6DDE1A6CAC3D8EC1EC
2226EC98E51046D1EC26FA20EE62D24747D83CF4941DCE5CCEEC0DBE387149CD
E05B19FFCAFC0D117F9A3E60DCD4C815228D98EF95EB559AD0ACC0D50FFDF714
56C3C812EA5ADBB013BBD956A7C4CC0ED7D3E25D5C9AF5E626F18297F75D4957
F5B0B33379114B903FE98BCF35C3FF76FEE1D9AEB711F2962276531F7380EE3F
E368720E0292A170A15C5539B1FC7BB954EE2624B504CB8C805B8D31AC38307F
0513606F09211AE64DAC447693B2A0AD15E9A64C34F5A911ECD0ABCA90E9791D
67C6BD202B0858EF96E7722305B8AC02B01AB1706CC6AE875A8DDD15EE349046
EAA65005E7866B506EDFB7A5A2AFD5C9E9DCC821A79EE9C1EA2C7BBA32A40BC7
CEC26DB1AC473C8C3960ACEC581B37D6569E8C8C42950BAB7930B65E1570E3F8
9A7FA719F1DCFDA45A3BF2AAB32C9A93BA3552608A61C623DE59BCB346E87EF5
9CF025A87803161221C5C1C6F6B3403712C76E9D755C7BD68D7F2DC03C14CDF0
C1BBED1D648B905B4B17037B7263C1EA7A7F06FAAC4E09E08483A8D714C19861
327CD9C32DDF850302DD6DDE24912D00C22ECDF3CDFB18FA831A41A7488EC203
F564CFE30D506F0829A96D35A7E09C3DCD107D589B627A15B55C5D6649126BEC
60B88C55ECCBB4E680265D9EAB4CE22965D3B1AF759B01ACB0D0E6C92B6B4EFD
A81E6A648708979487FC591CF09631310D46891423F4EC159A73E30D8DD147A4
B0EACF6D45D18CD16CEB8176F03ABCB41F2234747B9733C8FAF34AE5D43D3BA5
0CE0FACFC9B087F84FB6C68678BC6E76022B1526D6E5B3A48EC1A110BD75F45F
1C4DC6D39F254976453F57DF873B7D635C80C42026DE020E5BAFE0DA0D54D1E1
DC634D2621BA184347E5252F645A6A1DB7657C48124186F0E4C644077457C24D
55753C651A9A7B6349867641464B515B821349C795A645420508673B93750D0C
7A3B33EB1F09782033742AE8F3A23FC02284E6C03818FADD1731361542E3FA3E
75B8D52B668C3E18A4AE967D0FC3157083D952AFB8144D549E69EAAC51C279C5
E5D88A0D9D53013DFFB4352A1598FF84DCDE6FA32FC377306B9B92C0F96EE149
8CD55E7B2445B86CCA7A547FA732D52D59025129FD8C6333AC0DF4F0CFF6287E
F2036D5DBBB3B91B92F12FEBE0B61A313A4DB5A9CF0BB3DDB781A56FEBFFACCB
8CB9D1D3DBDBC4CB6AAE6769E470582403CB920630221B68BCB625CD4605FA8F
D3D5B7A1A28D15E44B38E92E906C138E72C15B86F64C38E23BF0440052A8C914
54397F49DBED99D0AF7CEA3B0A05FF37C2D7EAE1412567E6776333237C31E3C0
49949EC8BFD6E0F6446CE2D4DCD2C1524A288818CC5D159BF8463A847AE4A2B9
CC8C58F822804B81B13BF4F2DEB6229C4F51F093075581791D02C36A13B855A0
34900AA7CD4F1A797652656FE3A8425A38F421C4CC0ACA1CDD44FA6B31219276
1CDE1CD63D6A58CE705CB56CCA1260F9B86E989019071563A9B4C274A87558CA
6EF1660D574EDA276801F0057740E2C3B80D253D697736484D892CE1AB128B8A
DECD69712F5E70E895FBAA927E8194D792A04AB6CE205E04E38A433BBB793FB4
E8BBC4279D58A223C6673D909D6AFECD246E66A52F4CB35E5931D24C828489BD
4ECAF621A220D8ECF702BEB01C4FC7510197D3F6D15321EC87175ADBA6434ECD
2B5A306E91375CAD22CD94301763E4A8B981472890422C5488FCD523C9CB17DC
ED22FBF12D5F7525D0D6BCFE8CE85B0DFB1D6F989C267FFBA0A996D309E4A934
3DB54A9D29C88B9D55D7300DA3D46419256C5A07A2A529A8DE8BD1727281F5FE
97033D861E0531B14E811378EC1AF1CC7EE9BA2B07D935843D3053F673979F8C
FAFD59D555B56CE338F606747238B22BD62C42BB7238FEA335678D474A643570
A9E7B4970E8C541CE9DBC7BF70ED7BA33639D6744A18379455029E934C95E2EF
639C4848CE9A0879B51649FAB023A71782444B451F92A34CB8A124270CCF86D4
D18EEF5C1D2B2A29012613851C49F50702D63BACF95EE2AB4D72B375E0A62615
E0991E130A67ECBA9E05329B740708F1CB148724C3A6E5E3AEC1F88EBCA398D2
1CA8827C977D72734310233176D1AE26C55CF2CEACA62223315C28FCF6305C7E
A22414D4739A059F552F1F9372CCCA5FED4F9AC987942848EB498900269511F3
F408CBEA0659B954F5F1B18AE4FB270213646F9B28AE4439D2BA2D3E0AAAA780
5E530E4EFC8A060EB979E12191044509DA0C14397AFF949E12DC970658D5EAF5
4EA963F5BC1407A32F3837CA6A24B7F3D60EB8E6222B702E25ED903F9D21AE50
664A095009BDEAF4B78DAF94E5A55D48366CABF07791A1684B2F54EA69070844
4F031AF8DF416C2D3679F8BA038B0DC9DD0400CA6B34667BCBBC07E62C1668A8
35A8C57C9048A7227E672E89681B54D662079A189A9E96A3CA96D8DD10189B04
1DA49BA2729F1CA585B1BD5C467295285D52E47CA904235A1A3E48EFAE9EB6F6
01374125CE89D53C276858668CF45D2F092DDCAA52418E0BB94C2B8266B4D88A
5D911507BB1DDA3D8F6E7C14A91CA11AE799EC42E993098E18CADA70BD2A1D82
2C39326C6E3F9E84CD9758B9AE43D79BF99E6A0CD713E95B3D9B7DB90D127DE0
DAFEBF850CAAACBD860B5DEF2082F1ADA64B44B193C4A1417BE221FDCA36456C
BE5934C8CE3ED55AE3A11697C2D682B7D0F72D48976451D205783BE25DBD2507
39C14FFB4BB828DFD187104F38A7F11D5F0698C11E8C1D4F107CACE573FDC4B1
C56FDAE47024D6FD16A2FEABB434CA320300FC4B6C1B6CA08F76C60B7C08A665
99F404DBA8A2A1EB18EF6750E4EC186E31561A3F080BA6562967546715859481
7BA782940F5C5D06626D6F6A412CA7C13820EC7C1DF23E15E5829F698CF617BE
D940523E4EE4ADECEC48C24297DBAD528BA1DCE7AC335A1D15D55415B108EFC8
6D45030D27B3EA63B2B4CD771DBE66AE0218ABB1153D4B7482289D1313CEF184
5C960B1E3C3C953912CC6F4521D1E15636C1545EEE457EFB87B88C9E43CC2F38
6BC4BC96969F4FF28ABB06F4454C01CEF1B6DC538F1E832FC1666D977E5A881B
F72F1B4C7DD4BE167A5535F1163A0706F9A0B26400178DF8A128FB5EBE6A7B81
E478AD183EC06622B591337B9F1872AAEA356F4FC67EE767B34CB5A4D90702D9
39FB846947F4096FB3DCF16EC81455164783BA0B5D723060DAFF411B68307E81
7BEA1D9A47A5AA3D648E618C83C60F060029E6EC4D46B045FA7415BAB2AD0AA5
ED9C729C24136F6AF61E6409C0B5CA760B16225641E268A68CFB8260BBEAFC77
6626EBD97195E77CAB425CFB0096D805D9EE699E41680D095AE9FA10122A7882
2F00F495C9EB2102DF0D3E61833BC0A2E468C5CF7AB430FDB7C0BE3DF2C0D230
1580BAA25D65F599378D873165482A1FBB224AEA89C6BCCFBDBA42AE1C5DCF41
06969F585CD3B737D1388D6359F5468D88FCD2279BDB270F6A858FB7D2ABDEFE
5EE8FB79FA437F8F50237B92C307B73B0DCB808D07A9C3255CB9B3B17039CE5A
288103D05D132863FB522A02CEE3839EF9AF7F07D99732F0B8B384745369FB3E
7901166478F4A16076A1504C5E98D17408494E270BBF4470ED12B4332422679F
759F1D93984D7E506D16950DB6C2682FE1379EFFA6F6C95DD71F6E55BE3EF6AF
E0CB25388EEB436E6527806FC75484133F6E561DEB979D5C1FFEFDAF2A6D964E
03BAE0BD593C2992AD84569C81050F7A793C5263E50C2F50B98C4CC703EAE17A
6AEDAACE312DAFAF5278D125B6EFC5587484F61DAFF46B87B7C9B1EEDECA4859
314A9A9E2248467DE1E54D90DD671660B9040B3E0DD982260822177EFD757266
74A16C83A7FB168016A320D3DF3BD7726F1F4EC90EE5DFE810C96B099FD4368D
906AE4699049EFD37E8EF058D4B97BF71106445AADD4FC6E90615A0066823A36
673B8DE32322BBE861AE251226B4385AB28702831270DBD25D666FBB0AD7B96E
A44E891EA1EAF0F87013AFC982E33D67A28E96E0C9CB99B9E4192536830D9901
931A8CAFA41289633B20BA3BD7AA3414B6DA8D57CCF2FBE39920CC06361F075B
CC40335DB9A0071CFF77F6B7BB47F3100DBDC9C4A58C2B81EC99E8E966AF3390
E3FBCC28BA1D79961C8A1584266454DF772FBA99664D74D4A89FC82FFEDFCFE1
4C9E4A04291E803D142E37E7ACA66AB279378F2F192FFB2B5BBAD18B95F03136
2CB594A3D6D3F8576B90A6C4DAD6D6C8EE07AF682F925F01D0B26CBA347C03BE
F3B0585CF4539FDC66915E22117078CC94D621F31DCB3E021998A5D6EE94CA4B
E214D07517283D56973D8E4367392BF6C1150DEBF459D141AE0941C1C8C5CFBE
E735D796E365A1B0F60BB4CF2801EAFE4889EE5F338D3C4885368281B3C95CCE
251C28A90D318A8A0384439B38D63B94757252062EA44E88509FDD2E75FAAB71
7329622828B2785C1A8B26351BC7448C1719C88FE99BCB73F7DEA427FBFCDF4F
00EE079B0C712F7D2C8DF98D4830A9D8C8B70A8C5D54BC1DF3171135278BED55
DA1CF0E696B12935EB59B606AA3C0CC50C7A259AF32F4C81D9B39470D9993CBC
864447F6C0152DADAD834A432D6E854CF5C0699C00D11582970C19B07B9D9390
52B29327EA0B6468326F9E6CA98BDE1A4B71AE37615D89A797240A8FD5DB7B44
384EFE2BF437221A65AD51D3F9F90AE53D10B4805B0695EBF753873809A003E3
B8BE01459C48719C57EA2816F8DB0AEB60C54AC08131B56DF3F11C2E607AC3E4
977E95A4B434573F0B7DA5B7E91D59F40111F9E208233D5A227B85C6D279CC08
B086858D21E668BD8ED1067CAD94EA030C6AC71DC2A9A26D2E2A5E895D7F9478
554484412765E2FC9541C8344D35764EA0FCEB4503D281F5443F84BE6EC4ECAF
1BDF49C3A629B2195F29379C4B88C50DF01F591763F16FE1D2FD84BB311DB67D
0136E0984ACFF19D2AB6FD3022816665FB7C139D5F26181E5EFAF2AA379E39BF
F15B361204E7C333A7F9759BF94C66F2845FB6B31C29DFA79E98EAC72E179F4F
86D94E1B6102C1BD67947A2A0991D28E151DBE7DB96604B6A3D2345D9972DD80
3733B41F91A009CDA281F82CD8E6D7EAD84B49ED61D185E06F8741AE6FBB6DDA
9C8EBDE42F5C0EB17F54D3CC7C8C48CDD889C389D35E4D4BF0BCF9866996672B
239F339C39CF69081E9E1109883E353265D14EA2C50E68BBA739FD02832059EA
7A6C788A20487BEA29DA727E9DC10A9B7550B239E8603AFE1C3FE3F0F000B900
64E81BD80E025C2B8EA3689D75AE0FCF7421BBE03BEA8601B453D6F79F9200DD
64B7E97D2BDF288F5FD1096C99C1984FB097B3F39502EBF843B14C63EAACAD82
CB3443E3A732C0F9F0107CD8325955DF769696186A8D1BCE5C9DECE27A33E322
D6D3D9675E23EBEE3478352EAA05DEC5A6772B15B60357631E8FCBF5BC6EAB71
4EBD60E1D3B1927E259C5BCE6B0E9B760FAC62828B9B2C3BAC419B073BD60815
77B6AE44C6E4000F8E83E0FA13BE24CE4979CC280ED033AD04799EB9F13AD2F4
373BDA157D238AFAA47E507EE6EF317C394275A8D4EA9E4728E8FE7C20EB04A4
39D43635254CFF36C827155FC7F5C670316935C9A334BF1BD6181A2E7DEEAAF4
58F26C236861F3AA667335ABF979004361E4DEF3D5B062FFBB28D810E44E7EE7
18BABB4A57C910F49DB8780B5A3F8B63804B4E657EA575404B734C335273A94E
4C9E09E020BE56E8D48A62D3F8EB1F44B5FC0FAEAD16810FEC774BD78678186E
9417C4AF1E4E777C346277C05BB2C75F20D8EFF9C49135232DD92352E5B0709C
42F72B71852D5292C8C709E28262C17C081C60A09E383309DE6323A125D1551F
9CF4D7125B493FC576D9E7D55624F6A7CD7EAFDFADA9448F1D9BD284A61325A5
24D676161B9A5BC78565C2A034E127E192DBD54D4CA95E2343E06E13690F831A
C3A426D5808F63FA1F4464E1DB4923E44B129933E3FE5DBA8965CF383F4F4AE6
DA98D1611D05E59ED9BE01DC597F4B2EF1070EC9528F0B476FA174B65E579732
C9C11EEC5E7E28AD70AF745817CA28E54CC98F4E0D7C712C1367086F8E21EC3A
25AA133573FC6C25E2C6039D8DE45F8F70D60AEE97C41C1E1E15B23E59C215E9
3ACF1533457A965BB8C80DE30F81C96E2A20E134CC82954502887B4732C0D264
D16760A1E8B82FFEAEBA9E2B848DEF57057A014BD7273DD15527638698314F08
98139735A30EAD9060EC7B1C8357BFC5E812DC40A5909ABC2CC5C1D6BC4A1F36
07CA09909A8FCE4E68B91CFC8314FD62F116941558BD0FE5521D4FAA60B68903
9E205FE6042AF09CF7DFBAE69307301C2ECF295D2AD79649BD8A846E6BD353E5
83727A13C96C0E2C11E1F48E0DDCEFE1F6613C06CC5687F072B0614DA8C5DE36
57D12814C5C2C7658579E59B4E4802F92CBF4AAF793DB9E52A94973C2F5D8E99
B6A625861D2D447316FFA6B38023D90B4F320EC24BC2F5BAC829D3A9A54D2224
EE0B50E89549B87D284384D6AD08E0DF24352E32BC28DEEB590A9F7D1BB78E0D
6691C2297D5B212A317679E988DECAF6751D42E29485AA3E72B99BF6D1EDA6FE
2561507484C7EDA5480EACA609E4C25E5E7E3F65E24FEA77CBD299A201FF4EB1
7CB1E01F00D0FB4A6F4A84206415E2E933F65C2ABA802B1D83C974089DD58B98
2BA2DF36F988F42F9CE58D9AC0A2304F5ADF386732F01C8419C9C7FBE0035E5B
F66BDB22BEE13E5170D3C520EEF67A7AE15AAE8C5D392138E7847EE8F8A55401
910CC393BA92FCF7152B82CCDA6C78C7C63B22B0F1D6342C43288B1149ED2096
6727D51B7D713F6C9D6E9D1AD0C7523EF470401632AF6A1B34278F470EB207D0
88EE8EEAA0896369D59A6B8297CC9EFE00FCB9EFCA2D26256BA227CB98A914D2
2E25B41FE35179D5E020790534D1430F8715E2ABF5B2EC4E5F99FB858AA1325B
381A21C8FA0FFF5047F14F65B1146928AAF73775122C66EC7D5EFC9B2BE9FEB0
B277D73B332242C362116957D0321AFB459FE06E012CC3E9D6FF102020ABE1D6
699992A813632F5EE8138B0746369EB101182D9CC46B336CFB285830CB250783
923C878D70682BC752B957DFC1A97D528D4E659609E22A470DE20CA81D3CFB93
1EA2E52C431E3177B34D84A3166A0DDAFCAC00F756BD046F22745BFC71197748
8D7FC400ACA2307224C26A5A8E1BAB9C79D45D85885F8B399200DF90BA2B63E2
5767C311C0B76C0CF51784DA23C2D29311C4F82514DCF27C6B92CC928FAAB6BE
26151101B7807B2F2EE631BD20B062116DD66FBB9E7F70CC4ACE146EE44844C1
34A851393B9CE6E990F6B17408ACEDCD50E0A5EBCEEFB67AA7B96DE784429732
F5ECDA6092B9317DFFD723156CB63C6D4D5C0D408952F141B9534D85D280618F
558B50811E66F4DBD7DF4FC7DE23929058F5DA36529C8D3A56B2D11AB35D3BF1
4E27BCB17DFA0E13328CD0AE9B91343F4A3FB16B8B47423EF26189F314391E7A
B68EB6C4931F5469FF97F287828F0BC7D4191406BE5743D230F6E5F4FD641DE6
59904A1DEF42635AEEFAF3ED04BA2891F2F93CF0735D99A55B6543C2AF509111
C526BA3B5061C1008C827650795A93AF97E02C3B0806AD4011DBACFDB85DACA0
1F7DF1FBC745E57874C6B9E3E147BF19EB59EC7FEB1D12DE33E0EE7B012F7AF1
452AC938CBC38BC39563CAB31AB9F97D54F2C000467845129FA3E98C4A161F3D
05279DF215F2D449FD2833641BD06286CA9E4282C41CB74EBB80E9F022CFB002
6A42EB4F7EDCCAFFF3F3763F4D78695BC0C35FB561EA73B2AC84C47401629434
3BF4B6F36E883C3283A9F674770AD1202EC338572BF79D13A3F1E4D7380D0BD4
8B2C81E8256E5C6577707884CBEA59B9BC30EB80EFADC2676F62E2BECB7A2329
3B83444BA37F8C8FDC0B1552BA1B1DC28C6B92FF9A6F1A006F748B046C390205
E91815FC250D68CEA0A695ACD8C3FB543B6BEF35F0AC5F8FD208D600256AD5B5
06E2403D69F8E910ADB1E480EDC1D3F200263A78F9962F104B478252E2656E3D
7453FB97AB04CAB33AC12104457FFE3B6A50B6EB8B5A1F95B76105B28B32D127
0BBFE47EA18ECA92C00A559D2EAF0171CB925BE1197F51898F0079BA5519F230
13141FBD9ABBAAD552B2E7F6A5EAE6735DE2C4F506E127B3629B0D5E7B3D6932
3FC1E007183CFAA58A13D93B2868F5D6D4B1D86B7413647DC7271BB6997ECDDF
5421EB2A6A67AC30B0D4F9B49D89D1145B79B3F67CB49F7D19C4C3649289DB26
C32BB422C96FA8CA192FD0EC8A1F964331738C154AED426740DF79FC8CDED6B4
E894F224C4A978F3474EDFAEC549BFB04516B19D6EFEC12B5FB13834EF6D789A
A8A21F616EC20C5A41031FECAE6664AE1BDA30A53370189975172F875199FEAC
62ECC5AC7DEE99539B2F10B7285AFF0BA859F7645F886FC3023ACB66BFA13448
ECA92872B022DE018C1438605E3DC3CA870B5E3AAB9804625FC4598DF868827A
89198261EDA83C9BCAC4CA53A6062226F608C4A37530395CB052D2561233509A
7776A0D04F75B627A310B447E8B45445D72C0BB9918EE917DB1632BA14557D4E
D6A86C36374EB7584F372B6689F13D30A388D1EA966E130F3A3B09EF15BA4084
956C3CF6D6DD621E0C63D2A150AF8E6354E906EF0175033CEA06C030DC43B224
5F552CED35BF2359A99FB86AA0F8DC80B865EFA1A606BDEF05BE41426B0A5CF3
AB0C1F234B7204E9D7A22D3ADED77702C0BFEE0BD6B499BC7B75004050F5B52A
B30CCE71D29526D202271E84AC03E2BBD176147174B41CB7CA1BCD0720FE71C1
5CD93A0603312C6E37B003F2107138F9ECC8E5266EE7295DF6BB72C67AAAF4E7
62086BD6640A1E1677367CF66783B5FE7B003760E72365919FC2AB96B4050675
4E09C68196B9E27BC5945105147C7C672A4D7599647922C00DF7FAE7156A1EF2
F222B781924355DC7CF2AFBE503D56B7CDE62B2272E5A83535631049DDDCF612
92A30615D8E87C26088D33E0970FCF13F05A277FC5FC2A9E1E4026FCD3899725
3E98DC7ADC90FD512BF6ACEC325CF80602BDB269DDDDF2E913B3F45C8BDD7661
55C4DB641A3325E909C27533DFCE0EFD91A1160379906F715E9BE60BE3BE8F7B
7A62001626C3F8BDAF587C101B73A0375F8B295F79AF16C88BBEA1195354E1CE
FB8F335B7BE43064AB4355C92441BB732635635F6A69D8C2D9FD45DF6414C7F9
233F555B37A9BCD64056B86AFBD244C6C33B1BB7AEABF17F2425443B38FBB0CF
B28EE98410429EF1C5348803DF32896DC6A6A2C93A700E84176AAC94902EF16C
B214EC938699F65A6B464DD584290BA83B2A3B9BF81DB013DAF9AAA40294FB25
3F0D177E9F96D80C056EC1C1600BBD66CDA9729D51C10629A0C0A57EAF11F37E
EB98F112A1DF60B1F9D72098153FFDD27DF3324EC93E31F78FD5135894E453F1
B506DBF2FD045283C1565370384853C2C087FF17E7723EE6DCEDD730CF341A22
D16F850DA4277B35EE2FB591429A59DC0711A103027F2EE1B306C89980902A6A
6E091D9BE494AD21B5D5E6D537DF4A0B73F0095335CEFA7B9F8AEDFA141A1C46
1E66B0B29A3F80C14811D360F92596D43D70D6C6D42FB222EB0379452B66B0AF
F534E8AE8FF370BDA64CBDA8EE71770C30757678988274CE2AE0BA51CB07DCCE
D99A4D9B53364CC0D141D612C56FB407FBCD5335332CF12183C3C6DFAB6314C8
E508CFE62B9DF4C045FD3D8F94FA58FEB907C42A6385A9B48100C0595BD69D24
07D48E53C83C1B5947E8BB9BB3E045A730080B138BD8C1CDCB983A15331BDA3F
225567C2C1F13ED4DFC017EC5D1B349DECF77D9899C3D9E9B1E43D1ADC91E07F
9670FFD34A14D9AE406D68C170BDCC92BCBB10F138616A3432EAA3D34986BA1D
9AC586C4642B695A650554246D65C8055B063E01F4A7B84B270B561D2F127B18
575D0779434B1920DD08A292F6E36BE64AE8712F687872D85C48198A10A97CE7
D1213AF88ED544705046C97155574ADAA730A1B81631714DEF111E6D121E44CA
A1E212B22DB20A058A2729B3451C595087E18BA4DA27A0FA5A18321056A3C948
E4AED575432079B0C4D3C9EE7E1147472D64E2E391D96F7C3E3999606F1AAEA2
CB306A0327EAF514701A5D449DA5BAF17849F941E3D8885099CD87B55E61939A
A535E6BFEF32EECEE98F9685BB39B6096FA74921E0CE52159282E86DD6B998CB
7142E402B289C0F5A6A130C956CB80E2D0F9068528BA5FF99B1AEA3D1FBAB798
86E381E0ED9F216944925EE115E5500DDA03042EE7DCEB79223C5DCF189E05BD
4524224EA681C7AE28CB04C1B6AAAD0C3F01E52BF15B53156A84D19CCCB22B7F
5DC3D51383652C389F1F3104BAB18D7B2266F1A1AEC65492108AC6E3A7317909
970831806398F9E79F125B816EF879A294D010CF36B6EDE8ABE9850A731A8E8E
EC10FCF8492D15035D87D94F7576E2E532265D4D055FAB941FDDE8D94F6DA788
52021D0BB1E29B6FCF31AC62C023E1844497A03C3B1CD272FE4B362B54C80339
C7918B4F6CEA63A2AFA7AF64FE72CBA1924DB6EBAC53B58C711D1C94B4DA6D3F
E8CEEBE93FE3DD408A8FE2C8E0414630543C8C1E5F3EDD871FEFA62E6207600E
788D6E769F68E8A1444C5DB823BF6B2EE9890261F8EA96BF0A4F3E6B85C9702F
C008F436C3B8E242F5E7595013D7E4FFC2E9E8E261930CD57AFF2D6BA8266BA4
127D09B99CE7592CE2BFE89201CE443D6252467B859F71F37C95C83A875F325D
A2EC1B1B794B52F7C2CD6FDDB7DDD0F5E691E0DF5C39799D770F38A10C5FC718
C23224005153A63E3FF5B4CDCF36EC90F4FACDBC455F500703D5E557D8D9FFC4
1AF745AE2168E060594CA90D690120277A2BBD24C2E0381061784472F8F35090
1C49D0914B9D893C40A6E3CD75A3F7B3F1CB4F80F87CCF3C6BAF7237DF870FD6
1EC2B3368115ABFCFC748BE6F1672A43537A235CFF71DAE23A0F60DBDD4A35BC
EB26074E3BC877FAEF370919681D56EC0705553F403D4443B7EC7D971CE217FB
69B7D48140AE55CD5DF2F8189E23E579C3C922541643EBDD208EFD37383E248F
24C7BD2EA8068C969C1FC2C0742577320C1BA3A3986FB7AC7E17B6B356B60C85
48BF834D5F8344C7C607A35A66ED1D6901BF3C49D4BDE6FD28E54BC3CD7030F0
536B7E35A78AC822B1359F8C018477D107652B1C39DB66B7BDA2B2E7A5EA43E1
265F9FF5EAA965FFBEA2616D7EE883E41C28FECE8A7D46109A249A4C6D966152
84862EF8E03347857AF5BBEB725E51E2BC9BF43734EA94631692F055EDC57E68
4C8043897DFE83BDE6DC4C50584C0E0F6C6C4EC7E6BCCC09896FFC349A7D1275
3314D263D535E866859BF0F2368FC177C0061860BB027BC1212A0F1A8390E4BF
1EB6334744D33351AA6C280EEC3EFE7EC5C8D327C5BFC89F13BF3884C86EA06E
78A353C5B9CDFA8ECF78D6078A82A154A217EB06F908622F6C5A85925C32ABF2
48E86C57505BBFF8989A151F9094ADFA5C538C513467186BA72CA8BB729D9798
C5D7F86E7C9E7E7479D8A69D02F50E2B16C7DFC71BB49810DFA1428BF2FBBEBA
4A9630ED0ABEABDF0AF22A0869F5E315153CBEB9756F783D0983A3016BB501C5
DDC47B4C8117590C8C5A147E3434AED773DF4812324F6B9047D9059CDA9B3687
7F9E08AF6606B85D940D930D94D1F5327B9AF9CAFBCA00B0C4E59F5CD6FBBFEB
916D0C7881ECCE9D897A0A13B64F0E5ACAE1E9A57F4934BC315DA47CB5DAC37A
3E96630E75AF79B1726726D70B051EC9E5D2B1A5BE92A409BB633C5DE6E1867F
BD72B1839C6A528DEED8705E0642908527F595AB13AFF43671B184AACDF46FE1
4375C462E4BFEDCC1131878C79C31E8CB34E30A878D10A0FDF8E04724D9F05E9
4DE32F66CA2B4264D8DD0820CEABCC1CAFAD34862025F3DD96B454547A68C508
43876A778214CD174F025C8584F8231A292B6B8BF01A3E97FB77CD659FCC9155
1EC6AECB90984A0187925298D3811ADF738E0E1C5443EA86EA45C1DBB07C10AC
C67651F7DB3F454EDB26C6F17ED450C87A78FA272A70FB294750C6F77D92254B
A40F887C2E9B442966BFEF2717BB8421912854FD8FAC27D60527FF0DC1824DE1
1B931D29595A0700B6153305D77EFA0E7B8B3AC67845FDBA173D5AC4F49F0C60
9B566742F2D5710B0C2C30E7E3A8560BDB045F5BFB1374BE8106DFF3DAE60D99
0366E256CA4E59EE2C3DCF9DCF39C8820EDDECB86C02F3C143FC90831E328D3B
A3C2E8031971F995E3939BE00968D2FDB1FDF7ADA899936BD12B6116F5ADF2D6
D2A8EF141F3E0F9C8DB4E787AD18AD02ABB6357F0AEBACA7B7305BA11434F786
CFF0561DFC412A0E3F35B76447A87FD30BD7A7102B5D15DD7B1DFDFBD99742D9
47BAE9EAF86FC2BD93EA98B1FB9CB8C39D9DB291415DBBD9F66BBDF0AB4C07A1
A4A063D3CD4D0EE03B4EFFC6325296F3178E37348A8A2AB7706EC72826FC0D69
5335A5FFA1A671D78A2ECC3B54A70D53D91A9889901757709311ACE2B0FD36B2
867E0B88169A99F19A9201CD9B257705F4C5ECD8E8510E05D3A5CD4D30238312
E9981C4309733A8B4F4091A5E6B7DA20F3A4402E50EB9EB75617C4417B9AF9DF
A46EB10110B563DB05C43DB424A6CBDEA65357F27AC9F79CD1AB3B492FE056A6
E26D52BEC23C2170D8290275EEEE9302D7E251C87FA9A94A7AAC64AF8B4CA5AC
52C4F61435EB47D3B3F651F3082BA422A3C148017F9EE3B0EBB6D8D54F2C2766
15BAA0BDD87B2DE6288AED15A42411E80086D53EC2891FE8EFEECEBCD58C289C
8E0DC08F8F12EDB50E57700B0FAA95525A72DCB0C2FD898AE7BFFF3C92C087B9
246EC03907FC456F77844FC2743856B8BB85093188A86AD0F549BB7C57E6414C
9D92A536EBB616C9918AFCE7D7CFA81193F54A17224142B5F22987314903475E
3C965A90B730CF86ECCF797BEA462062940E4F4FCF140906F3315C1A2B2246EA
ADD4C399CDF9CB87F8B038CC21E21C9368F24C735F34FBB8763208637F3E3B8E
35767A23290E12A8C893EB1BAD524113944FC49CFEFFDD7BA151F826BB7EE3F4
C273C4616056BCE3122BAC97D62DB289B724297461430249857FA2444371FAAC
114712B337A7B278FC26B4C0B1C5A28C5184652F50E817C4A00EFF994312C9D6
C438165B88A3A45CF6E1E524AFF0C6A48AC7CADDBE0E49B62068A00093DF7544
4839C1163D1A401691B5C13E9CF1172FE236229485382BCC58D4F6E99763056A
CE1F66A66F62D95433372175C48B92BAC9041733D7BFBE6D86140B0AF9A5ED68
092DC6B53ECD21131AAC1FEEF1657EE0030674F296196DD1205A74C724C2A252
AB093B59532F391FEE052DE7BAFF0896A1CD085DD7B157B070A2938E55A04E7B
CFEA7DEBD9CD0BD4A6BF45BD7E085B1F5A7AE87FCDBC7099CE6DECA396C6DA93
B30C614EDC8BE47674D5B95C2E1D8C2C4506ED359D0A5A65AF2C66E414A655BC
DF41D03E8DB59989DEE9189A12BBCEEB4CDA52AE429D3C1B8CEFB3333E54638B
DB8B497D9377E6315563F91E71A060A46603263DF023F7341B1603930D5C160E
4ACBA4BA0098BCCC7CA98DD5D680AF02B8303831D346258944130E18CA9DE78B
CC4C7D8DF125846255AD6576F6742EB1CA422822BB2D44D904AA186784EDC346
0405F4A9B27808EC9ACD2D61D0B28090607D2D8E4F59D9A9E9525F16E1720014
9E6DBE92A7475050FB722942589FA87C4CB57E14AC7C202EADDE84D805558372
30346CF3C7B8CB508A111CFB3A8E32A8F2E73018EC050C689A80EA80EAFE7929
8119B3FCB8BBD36C453DD157B162EC91DDD5D65D48AF8A3F53E5460EB454CF72
1EB15CD8A657E69657D6B6702B8B4362D59FE747F6E9F59C428DFAFD724BEE7B
ADED2098BA1B831E4256CC35B7525BDCBC7F756B0E4C0541DD9F3571F79B24D5
7DC7E4B9B0DE518EE9FF6BFF1411FE81EA77E2BAE5BDD227D8090DDC8965532D
ADED7DA81B7F8A6AC0ADDA199237A514770FE6AB5C89C6ADABDCC2D6AC96D5EE
05EE227BA3594B1C00E6B920E09C100BC5149EB9DACAAF4CE2BE875C1F1D6F33
9DD094770C1A1B84D9347C9E74E6FA17F54EDEA42444E7946B4EA10845C2DDDF
9298AB6C9DCCC29380C38F12CA2B709D34E397CB7E4B419AF1A049DC51513AF5
12114C262BBAE36EF42D874D59743D6ED5D402ABCF57B8EB15FDAB257ACF2102
2226B9620F28DD0E672F582A1FA3A8A6664658B3FBE7BF39AB37E31807550410
1F51196059F4F229EABFAF048E0FB4DB771A06373218E2E5908AE6E4C8A62D9D
350CD2547B3A0836C7790257ADAB0C118A0D73DB196FBD1D860A54D8E6562367
397B0452E45D9EB5D34D4C4E2C522C9FC6F86C74AF4CBED801D2D4693A1D0EEA
6A6F21D84655A2F317FBB4A4214833F6D6B5161EEA3D7BBE0016C88EECC6E467
4ECE968569406D2C698A44DADC3C5FCB25A23286936FBB1B9B9E11FCC9C8AF99
45A6088A08541B39C6AF104E1F611EE49296899BDBB706609BBF1C7B4AFC085B
580EA700F6B5973B03AC00DFFD8EE7188DEF5743D062A361DDB47FADB3D877F3
86D01F7AAC7A11CCC90D54FA5E0E7C078ABE8D6941353D234C41FA96DD8CD22C
44EC18D737CCB7E3FBCF0F86B136A96380DC6C625475C239CEE8477B9F57F855
4957C6EEB610B467AB6292D1ED9DFAB8F665F6A1E106B49F9A7FDFEE286F8DFC
D8E4A2C314A726FE997A7C4904C591F7832B94D5FDC67CF9C7936C86CE696C0B
BB42C5091F8B44C2A953D44A4FADE9AE32297A4728F82CA3BD29CABD998F532E
2FC67B5278942022B0A7B76315D664D6C8704EF9F5DA67D4EA385812330D65B9
8337551ED7CAB8C5426114884B51DB0CBE7CBF46AA4E48FABD3B6A7AF503218C
C26E3FA8C461797872E96FE7AB3FC45472042D13A5AD27A10F7DE6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSS10
%!PS-AdobeFont-1.0: CMSS10 003.002
%%Title: CMSS10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSS10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSS10 known{/CMSS10 findfont dup/UniqueID known{dup
/UniqueID get 5000803 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSS10 def
/FontBBox {-61 -250 999 759 }readonly def
/UniqueID 5000803 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSS10.) readonly def
/FullName (CMSS10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 101 /e put
dup 102 /f put
dup 105 /i put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C295470093CA270C4488BB4EB864B48
63941B9739638D2E6F3CC778582B46AEB4E466D89D1C211225274356A4BC90F3
274C6AA56E200249B7D0949A3FD4185DCB3E5286910EFD7CA72D5D8E8052C96F
388D12094B87D3705CE64459558CF024667C0FE96CBB32B0BC9E51037D7BD62B
E4B05FF99384E71D78441A79B0B1DBA1CAE02434A9FAE46596FB86B873B1670D
AE0BAF516445A0DDC127F8FF3ADA0B10EC30A9CC1F7E9248828B5E8AB46C3FE4
154B80A54128A08777F5F9B8C519C7E3B632B3476F007FA156E9F39FBE57638B
4214CD2BA79BA9DDA0F4C073AED814ABCCC2F7906C57A872C00E67FF03AC1200
29DAB92376422FA21C67CA98BCEB8C431CA2D3EDDC16972F84BF6DB2F705BAB5
CAB39C82D139FB1304B9E7BF1F6FF447596081D5690B1519E468D6BE49C329C5
C9C809023EDEB9DCE4A6D52A8049E0CC134E8B41BFC6558CFCAD3D9D2773EA16
131567AE6231B3235869767A1E7C1FA6C8D6FC1B276CBB1CAD14D376188C9682
302836A9290E587D4225EB8BB1DBA2C4580A81FACFDA197174FE948CE757C575
F23070FD84DE121955D7D9307BF986C5E739FFFB6CB76822C341FBD9FC2E3378
AC9332B40C07D5B8745D74E30F1D719EAFAEDBF5FBC40D0546F69A66072D8A49
28D2CC2E76B9B1EFD191E0BC7510C2C8761BD92EFCFDAC263342A01398A56D18
121A591FF5CD4AD8B25699A7897E60BA940336BC17B9EC9F97C2464D031F958A
A3548D0C97C50C580B6EEFD0FE8330EE2BB0D2E7FD1DAE33448953544A4B1C5D
8EB57798D0ED4B22909FEA78ECDBC4D8A124DA05B9999242D68681017285A0C7
69041C1F79442279FBE328733EA0A6694D68BA89739FDB9297BE0CF1808C07F7
BBF6F1538DFE084EC8C0EC24D883F6CC08A51DFEA23EE920F44BA55FFF58E960
C7BEE551FCD2D5814DE7E3F835608073C2CB80EC57100CFD484C837881674E92
B217F4D11165427DACCC29C129005874C05CDE5FBB2D912368EA2B98C45AEDD8
8A0D2493F60EF36809C8C6EBBC7856F6656E8D398BCB29DAACD4F7D4300A0B01
161CEF51195D2C58DDFBCAFC1C03F49304ADF02789889826F1E20BCC14827565
F2A45CA57DCC61B52E33638A0C6C5A59B145E82B82571DF1806EC40FC0E8634E
A34A791B1325571E19F3AC2EF6FE68A14B0ABEF7EBE0EDA3942E85E5AE967A14
0C5AEBFF2A36DCA8866700CB7082D2ABE470864C44AEE1F6D180D511304C8674
D02FAB12A7079ABF96E1CA3CDF9D75532123E87663B1D524265AEF63EB5C2169
B67A651A101E1C7EDB008D3DB06DB1FC1A81B41B291D6C4A58FB57989FFCA434
DA84B3914D1D80B17AA3A55A70BBC06C49DD5F7DDD03FEB0055088558FA192A5
261477899857CF598DB740E82D035E84CF17B33048CFED2DCBEBC2B75CCAEBEA
B6C5AA1C6978FBB36ED98D9047028360ED430A0AA69AC85A8F83825EA649E1B2
64B260197B06A24A1DD969CEEEE136FB046D713D0630B246BD41CA285F076038
F7F8431913BB9A3E70311844D4C22AA446E3CA217A9DFD75A898997130269B29
AD4AB7D9662856E677FB2DAED7078639CF31C6E6637C74DE2B5D0ACB88BD61F3
CE3C5D56D3D4B3EC1ACB33EACBE05E53A133EBFE93CE6A0CBC8F24BDC5B31BBF
5B3E55D6B40B1CED389076014667E28BBBD60145A06BDECEE8011A2C6F06D091
73767A8045CEF2A110B614149FEE783A2351FB2938A9F73CA406538EAD82ACC5
A3DFD3DE00221E1B4EA977AF8C89661357FF7D2F1FCEAD6CFC9D6AD81F95100D
EA1F328249AD84AE849220E6593D45015B4D7C9527F3063E9F6DB6E572092A1F
1F460696227D5F0FA5A5484B1F0D8B4A35066451663BE448D924DBBFD388B6D6
D7CFC87C9E75B7CF79A4C9207E29E0BAAAD7FDF529B860F7731EA978E335334C
13CB2F0A4250F5957B44CAA0674AE8356F586A24FD137103973B9A1FC31090C7
C84DC5D380404BCDF3FE20C6F74FFDD8BD1DE845E99DC6FE09931F003834ECC8
08C5D962070B6C44F901A787CCEF048A2C584A2285506B4D4E82B1BF130E2220
B6C8B3240A4CBBCE16AD3676B23A50B75F82CD88D1B8F21D30A12716426112B3
23DFDE5A348DC9DCCCE5BB5DB5433A5AC125DE1229FFAAE0D8319B2929986EEA
56A93BA1FBDBE617F30852A3DC8C712DF674169C6D656F75E252187A085B2788
2467CC4DB08D48EE6A98C61BC55E6EFB1938FAA718802B7587B94C8F1477E9BB
DCF6E02B5E67FE3AD9D87C321CD9BC0CCD36B9C4BC601E6BD552EAB8E1C940CE
3A22F3C2501C3C939CB4F17CE97566F0A04602D2A22A05CECDF4A49CAFD6332D
5870E1F31AAA5F86867F71610CDB83E473B9D20BA00D8986D7148E0EED03865D
9622864B52B09D12E0C5FCDD023D29D5AB1CACFA92B6FC14FC84E95F407861D5
2BEE3301AF399FD7ED04DFDE6679A345A282E7FC08D47E3FC8969D3B00ACD7B7
F8769647D6D4F4106340EF739583374D023C2702C48FAC1B643B5897D2D7DBCB
73257712A0FDEEEB98A021D218CDDEBBA34687E23C4828D7F96D1ADDFAED7EA5
B279322E6D55FB486AD8F3A8E7B2C67915564FE56F0C9277A06B29C47FB7D007
11AFDDB3FC1B173B4E449CC6B198041CCA0624D81B4840FE5B63BE72157AC6E7
03E5E95D2E2CE2E40BCE8044A8F2AA45F855484A891B9F0F8F70188AC66A8DEE
F4D656CBE216E6D9AC33BA8DD0685D480833E1226784469A221D9FA3CA600AC7
5574B5226649A9C48CCB43339942FC9010F86BAA2D181AEB487A92A96BF2EDF1
60F3B93FDFF4137A25A8AEC5ADF8613019CDB103DC4367EF3D8AEB4FED0E6BF7
622AE0CD3CAA0321D26CA4280CFB60D08D9560AB8AA5698231171B881BE9A27F
BDCF3162134126212C523738D221AA05E31CEE73D9D40F73C450B6AE2C1E70D5
C37162BDF55943069923A290A6C720042566E55A21CD81C460818883AB016C16
8FCCD1255A66977DC1C110261D7642199D466DD3D2493A2D47694F842241C474
1752B00DA03E69CD16A8A14BEB8A431A315D19A39BA978E46EB1189089FEF647
F9DBB58AAE6B3FBD475E4DCAD241A051DD100ABE81D40ADF18A4C50F53BF749F
D6F7C8E02A5665B4AD18DDAE79096DD447F8BD32C68F9F97F05E0071D9E9AFEE
257B96D48ABD9920418E17C8F027E9E975E4A08DFB1988E7104CBBC1CAF356EA
7750AA7110BE116AF1BA69A94776E4356573B38472A8A1292C63701543B0F315
611A0E0595B30424A1137478BA6F990AC7C3AB4DB69E75C222B617F373C521D4
246E954E9857AF59D1E6C36412B643733CF5E1C90389EF0E5E0DA55D3AD12E97
E7630C315F72A03CAF22E0ACE3AAAFC1D496CF4E5ABC49C2DD5E264BE7EB2698
AFF36089B5DD2C53DB1C1FCFBE1E89D41A95DDD278CEB29DC85FD1DB8B83CAB1
EB37C531E9BB8466ED6B8B60258D3C355626CDA43A32834DC89DFB11E5FC6D68
0F78CFA871113DB81A1690250A6F842ADA15734CB6DF7C6ACED6D8D586BC4E1A
94EF3052FB0F8B9454390B882CBB6E135AF1F9C777AC362C2A758C3A98117120
73C6E2FAFB580716D4B2889A4331CC658AAE996245685B973D9C184541385680
AEC2956107DAB00230FB39BE98D3CA898D917E5F2088F26CBA4F8B5B115B6443
8753331233B10852702FC26D9DD4C990C13CE4D0DCEA23D62A826A4B4FD16070
5F3638C0A50A3373A33FCAA6F3644975AFD0560EE5F2D1CDF08820373468E4FE
6679A229D6955CFDF7ACAA92A87E6D8571AD18CF59F84F88A674B2946FF20A28
B9798EAA22442415EB46B9498DDC0F4BA6ADD347AB43E9293CAABEAE80127378
129D5DC69F6DFFBDAFA5D65580239E8EDF6833D0DE6DF75F0FD090A83CE0974B
AC947BABBD1B1C7194DDAEA37B0CAB477ABF9433FCE0243C8D308409427D1DCB
8EE4FC36C7E5CEE104904B520B3F6E677A5B92F694BDBC2C799991667E0EC14C
B95EAE7DE1854BF4542F05B4AF401CF67FC3E46EA5A0DC362F3CF177B1796DA6
753AA803E724D1721DDD1BCB0C12CE0859E172D2A370C3697286F80D9E138AFD
A0EE016805F847BD30D11D8B891E54C77AB51A7CABF76BB14B06153C7F811FE4
93FC4B7CF161051A458EDF767DF94F487DB939A2740B4242BFEE234F75084DDE
207E84533004B933D43C712F0C71DA4A00FFD6D721EBC93AFDC4200E3B8DE433
3ED3E1DB799BAA27548ADC853AFF5D9D6BD92D644E3CF394789C99D9DC054A26
7770AF5DC5BD6563929AE11BE341F036584DD573D3F43D9D975201EF77BEEF80
D1EEDD1D4AD5D4D4DAF6D5B9D4C1736CB111D6FC74C236779C0ADA430323A825
09EA8D0CB1772220AF28B93098BDB36913159208D1B2D7ED45808BF7B686419C
5C0E3DAB5BC9830FDF3B494D624EE8068BF6F5212BD69EF466B9A213047BD105
B848F056DC544A8CE66C546B1A4DCB4BA29CF0EB4DCD9C2452F22172AFF33B29
E97E12D8F0D312B03BD9E5377BF0C81D884F1E79DB66E8144F106DFD2579AD26
C693C5B68F3AC46BF0D6281032D4D4BAEB2243151AB1AC0BDA2ACDDD4D590C90
F29B335DF8F57DC593DCC081FB56924028E3161AC4865B49D1B0F63F5EE866D9
7A71171C09B09A44B0E32F03494D9EA63F3C89F5E772BE25A6557F119299E989
99BA041694ED805AA4F3BBDF00D88171C9D43A9085A287A36A1F0F9386F2A98A
96815CA51F06E1CDF20B757983C5FDF4003F5438232159F325C6335B734FD982
1423BA77D0EFD044381AFBD0704E3DE95D23A70E2428E9AA355A9A8A25C6C74B
48488C14DEC93A766E112D74C83576ED355F17A809E8D3F9C65C4E3E14EF484F
4658DFB57597E2A4461D8044E95844391C1275D63F282B37888C842A5151937A
45007547263D70195ACC018A373D498B88C5A028BC66ED96A343EEE74D61EEB3
D9472B6A549CEB8699F4B35154A0E2ED22867E4F9E4A76311EB2C9F9078FBA81
838EA49C2966BA64C165434DA3093206B70186BE80600B891D9979F730FDC794
5DD6D8B2090CC67A634B719F441092A10C447A86ADB78DAE45823ECED5FCEADA
ECA52E363D913D9EFC0ED98A5A1F823DDA3350EE27F09C14E4C7298CC0FB6200
DEBC640C68C82D70AFB7A7BA668F1D7948686206884736CD03D9F6E6CF9702BF
E3C932CEF3CE07FBBFCEC0476EA6E8D5D4C5C6450C8FB236B89BB82D51886240
5BA7462F50A88F69228DCBDF26B7250E90B3DF8E94ACA1CADD9EFB5C73EF9DD5
46052314D445CC92512BA231F79A09A2F0D91976B160B8C9BA055DA4AAC1300D
491193EC66A6DE12BE01EEEDBC3A2291DA1F27AB76596A236B75E19FC5F1FB6A
DA1AD835CA08B6CD03B97B4CA1BFCBDD2500BB09F1A1B0438E4A759370EFA318
F062BA9F3D352572CE232E6FBADDAA5363807D0DC5320B807FE5485C8CB09B6B
0BED9F5B1300FF370252DEBAC9DB25CE2EC494E8EEA45FC6604B3C104E81B287
EDD49F3D7430EC9176A16B4FCEC5DF68DCC11ADF90BD5337E2E4B59BEFAC8298
E5ED2C7FC5928635420FB1955251932713236DCE28012C86F63D12AF1DB634D0
0B8CB8992B8723548177BD6822A808FF221A9E38B0DCCBC1F3430A9BAEDA89CD
ACEBBDD8CCA5E17F1CC37E35A01E058BAAAB6BE7124314DA19962BADB74EE73D
8FB13FF6AFB6FFF97926CA045B62B98BAA753AB0FC78B881D3FAFF9EE2FE918C
8EDBEF87637F1530E3E13AC090FF81F4136E08D5F3734327E643CDF621278741
A17AEBC56E21217888A6C8B5ED4269731910E7E25693CFBDD4EB4A32698F2447
4C45D73E810B627D8719E4E34D8FF378F9B68BFB149AC67B3B1E55F20D097FC1
AF74D46F5A3923C63DFEBFCA210F6B257F5FF3F2AC34CE41C15C9977634E473C
2235295C05C3DF6B3009C7854BF11CC87471CBE085793AF9C5D05C5479B9E780
14A5A6F3F6DDE5A18243DA15732CCF26ADE40C566DBC3C62B71D46DE87A12C6A
647CAC923254E2E74AF882DBD5C9E108A9160393C5CD12566AF7C824EFEAC56E
6F05B92C73A76824C5ED1735BCBAC61B98D509250C854CF1500C212F574D18D6
4426B8510FE9785B814A70E75C9234D42483E736D0689D3561E8EE5650F33A36
D50127589401D267BA6442E8616E2CDB1F6691D3FC4A2A377E5E154972E890DD
60CB463E9EA9A6EA61087DF452FA5646F69BE879337EAA0F5DA4438FF0365627
4E3B16851C2F08E976FDA27AF451CCEFED00376FC3D6E0C160F0BC19544DE289
BECEEF9A067FD71D54DA3A4F73F06E2F522BA07551296214DDA47B1BBB1212E0
1100ACB5F65FD30C655A3402C83058F8ECFE48FA60B6A3DC86C4996414130194
6676EC7F37454023AB53E9D9EE60249ABF6953E76DCE3123DD268BBD492412BE
65D7C3E5A5E483C381182A8F19B506F0AF6DCD55532B89852D1D96021B22E9DF
D9D072BD7DD4450577E658B433A84F92752B260AFA2EC4A118747CBFE36AB7D7
6D5DD96A119AA1BDD0FDCBC3AFDAE5FF72713EB46759A06CD09B5CFABCDAB0E9
85599506AC07AA525978AB157496163AAB387F079EC9FA1F9E91B9C2FBCDC9EC
7027D77016760539AC03F1C1DB242D28D6EE946C42DD2262D82ED48C3A839853
BA977046F0EF373AFF884AC3112D2FB319421C3165DFA5710BFB9AB9595A10F4
9D05704B9E22137CF27F4B2DA9CEF6D8801D5F792969B2E58FB539B8038DF440
6DE20C0313A7BCD16F279290AD6859B0E657CC3041C7928CAE35B9D3A681F2A3
2D40F8EDAF1127E754276556C95E1282514B6EB6E43FF4F0FAFF28C715E3F39A
374415B62C1F5F8E31E006D6ABC736057910A3729AC60360CEE1B2C8D9F77336
39CAC45329A372205FD551B9E9EA5082411207473D9D90E76136AA70180172E6
AF6EF3EF6B38B1906B904BE9BD5251EF067738840C28877659B649C6C4CA328F
1BEF8A9CEC2CB062702F58CC0B8D2D097FBC278F9FD894E10ACE1DEC4530CBF8
E4E467B6DB9C596DF0C3D43E6AD70F30B733EEE692C2EBD68756D0C16E1F00B6
AD011B5DA073A769B53C2DA2E7C9B7ADC6F551BF4DF4C39C66443692C3DC62CD
B1E094013F364D04BE2FBFCD1C7B2836180E9022E0434421FFA4317A50096684
CF0B8740EF680F27F4A84AAF2AA92C64883BAF57BDC60C6467A8D4E09E6316FF
9BE73053045E5F3586DA3BD1298DC15D751913FB1E72EF80047F6B33591B97D3
DFAD34EB224D64EF60F5B4ACC6EB42E1BE0CB2812FF2F3C264AD2E44F5EBA441
670CA0A60E73176ACDC4E42E74F8F489C73481EB5D46A61FDA1C0FF9F8844DBD
99CECAFE2A72833E4522981FA13713AAFAF8F121E60FAA6F379B2C8874CFF23B
8FECE70654E5855E525A403700A96CF7F8111BF2B58386E29640D82F1DD86900
E0E203F3ED554209CBDA2A61A5641D4B39D98C5C43D4575648D06BB82B6C4D4A
F043EC61B17C208CE8B4F43A7BCBBE588A3D13A183D79A47404223037FCFA4F1
DD237344E589F161BB9BBF3FAD2E28749350DB9A74C09E894BBCA85B82E704E2
99788B24642A7D0F0FD96601CF1AE4819EBECAB89824A0DC1C03BA4B546ED36E
DABC8D49CFAA53D2A9A5DD6B3431E364C99ED0323513476CDCEE49BC413E50BF
51EB93563DC03B62F84C5F96ED713F288D109C79179AEC41424822772032035A
40E84014F5BF40948F05E8562C99266B9E54AECEF94765BC79375C69A0385023
A014B8705931C9A419C8F2B72C3F7054CD6487E75ED2E852BC19302D02C671FE
3892C7AF2A90D6F29771AF31FA95258B6F3434228B377F5FB494E28B5F0393C8
9DEA5E5726B81B7983D241BF7F78928EF8D8528C8F6DB7B307D720243DF00E84
A37A7B2C720348F83ACEFFA78929F4CFB5CCCCB2A074C78B92C8573750B91386
CECD4A1243D1B002B45B933534C0B4C51DDC50BE37BB6E42B8FFD25C9B6A4A80
0FDD3858D50F2166A9067E52D8B453FAE2DED99D96EF9523BD348F2C93DB66CD
B17BE44AE1E2031C3CB01E713C3B3CD4361048D12E21C486C25269C5BAF6F1D4
88A0C8698AE746147056CCF2A0DCD7035A43FCF3667E13505AFD480503000FE8
B5CC5495F9863A9BEF24CCFBDEAED491A646332A571F3B782893E1631735FC7F
EF8384AEA8C227375431DEE791C64EA44DE3016231B72467837CF7FBAADCC456
7EF8239569CA8DBB4063FB54132B4206B20EC5CA31CE3807506FF35794D027CE
342A66A4C27C0A4FCF87EE325C724F088224B818C7721BA0742B46E899B0FD87
620B527100738DD02FB92820F84DC9A92768F62652F79150A2D35BD4580DAC8D
FCB09C9B2F0CACDC861E74BD8E120C808767675D119B481E14E7EC80E5C67898
47147892CF81F655B36EBA99578160C6CA5CCDC7DC2D70E59AA0A7FF95BA0CAB
50036BAB8C4CD576BE22835763569C91D645F0DA3A2D5C32B10B555265D80037
B723CC2D2EA2E5E2BD2E4A16523198B245B45EC7F9BC39BEF93173E4C8B21A84
4BD4F5C234107716396D353143E2E0106ACFEDB89734B8B24102FD3C95C9AF74
B96AE77E74B4D960C4770E2B8C2995558F359E00F5D730BFCDD88875270EAEA0
3033D532BE7A1E8D3737A752789B30D72A25FD69308AA53B2F77744DC4B4FCB5
EDB46218FA9F40DB4B4407F43A6884AA657145A5EBC5F8834879A195F6CB4343
AA1AB7FBA34209246873CE6AF0022803803E0097D1D2D6AD2243C99B98B433A5
6461DF4CAAFB6C04B12BF4EB42880E40541E25AF1640076ACBF9C2DE66992C56
956AD312E065D25154EA1F5DDD18F68E0B8DC667950334931133F629FF4F9BF7
8E2E6691813816EF82A4260A9B4DA3E01BCB6A884B8285E59336BE509A4D4126
17F2338DF83E4720180FDCC89AB3DC4FFA29DC0775F0215C2A0DFC818FAD1B23
9532A4965D03E80CFAF5E7D09F4B5514535A9557322F47FDC82ACADB922ACDC8
3A9989DC67F959E93B0F3DF95AE5C7884BB65B18B04D6CCF0E5A1BBD126D8627
CBB5FB9447B0A089FEF0CFC047FC62FD6BA0FF7264677DE09FB3EDF856207F2F
331C9F30F27CFCA6F5274ACBFA15313AF2790573B11D066811566454A80B6348
7288799C0E4F43C20E82B7112AA6B0094838694C105A05D7FBAD17488B7FC80F
E3E83B41B0AF84C21BE0C55B40860A4EABF3929C6A6F532F1D8A31A5B609C395
6B31AD859B98FD5F32918471F2FF970DF619B5B1C2F960E91C1F23839C7025F3
0F045A8290A2BC40D192A5AB94477D20F4007538CD1E0A7A4556D13ECCD05181
9991CB4A93B03ACB9E38329D36B7AD243E3C2AA5A199B8DB36C2E1B35DCE7BAE
294CF33684000AE59081346E177C09467EFAF2B8BB27710082637311917D6D53
9049FCB64F4790E56CAE72CF46BA0DFB5006C3F182DE20355631D622DBF1D53A
058070F48A6D5424E5134F6156572424D09A362DC6E00FD084426E28CABD6774
D17CD0377B03C2AC1819234A993B05F4F38BEE82A42C1C5F1ACB1C99BBC0A0B8
6718A2BD223AA17305B89B978F1BBEADC8B81510E3C21C43E39ADBED28E236AD
EFEC0CB5E8EE98C81A960A289CF0D38F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/UniqueID 5096651 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /bullet put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70B15A0
657F5ED27D204449A841ED19E01432CFFE928E921321113780D036D34F2797DE
D4459CFD15BB117B5C9745EF3CD2B296D91FAD48C80B136D94476967E255F808
AD2B5D522ADEC64176833756510391815A1D4A8DA1D0AEE7CAD36A1D161889F2
3347D5B6BC503300FDDD48F594F391D5FB42C42113C538E707C16EE24A3F375E
7C506E8F49CE50FF9DEF3B4A4C1BEB3848EAA3477349833BA22D2A9012287D8B
A8C4CB4307A1188ACC0E6E9338E1559BE5FAFF381BD82A6C71C267409468B3C0
2C1A29F4281D565836EAE57F680490FEA4A952FF64C8CD11C377C294DCD1EC25
CEFB2B6DCE959D0208F85B6E32E9B44FD455F9B134A5306D95EA29F37BB8B86D
9E592159338E1293F449380E13C21AE42E692F6C00B521F7AB2F32545952358F
0D39246DE215D0A7EE67F377E81F9E65B25658B7FD97FAF98C7EA9161530404B
62B9AB7A91C863095D5433BB06F9A29488DA84D58A1394AD7878BB27E3CF4AF1
BC29DC64F319758518AB652F9E8BCA586D3D2021CA860F84DC0A2F61A93B6B44
F08A7F7C5F36FEE9F5D450D19F72C09580DDE2B3747D8A1054981BAEF31D6C42
040D7D5F37DE6DE019849E7C7754DD27E9511F9A9AFA4FB727695444F739448F
3D2021
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMCSC10
%!PS-AdobeFont-1.0: CMCSC10 003.002
%%Title: CMCSC10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMCSC10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMCSC10 known{/CMCSC10 findfont dup/UniqueID known{dup
/UniqueID get 5087402 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMCSC10 def
/FontBBox {14 -250 1077 750 }readonly def
/UniqueID 5087402 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMCSC10.) readonly def
/FullName (CMCSC10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 69 /E put
dup 82 /R put
dup 84 /T put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 118 /v put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BB89566A9BDEC70EB4F2
048A6EB631F05C014D372103E37FC3FA317EBC9973565A638403DA02E48B7D31
CFF6C241DC5CDB470561002FF46437C06EF93BC99352DF04393C661FFFBF4BA2
0723ABD9B3E9CA9E63BA57EFDBAE684655CBBDBA15ADAE43E1A2C98A3CF060A3
D16AF8FE3A49B50A24C20EEED716E49AF6013D4D38CD9CC41A91C17E4D04D79D
567E1EF49110AA9C34464E95D81A730ECEB2C9AF38FBA6B45E253288438B4CB3
DC75B3A906D4357293BA41E59C35223A6C9CBD6FF5FC90C2D07CBB376C7320FF
435A6251822BFCBB612CE630EDF826C37E95F541C21B93FCE127591D5E38165E
2B58A34AAE37712BC58B63FFD70AB80F4F24612CFD2F1466BAAF3CA2BCB45148
D0DEA0E9B8FBA4C4FF5B8B3CB02E461355051842BD1C94F41066B9B909DB83B1
DCDCBEF7CD00A43E4C0B8191A29600CA197F0BA227FB8309BB539D2A620BAC70
8A1AB2DFA51ADC9873B8E5582DCD3ED154E5D727D1665F99BD89883D69E6CC2F
DB3A57AEB612171A88E22F038461DE03FC357F771675E34E90D4D19B4B36891C
9D2333960400E97494F4FC4DBCE6A73C34A0409E433BBDC0AAAEBA7D3555066E
1CFBB4515C8B573C9B9DD12ED5B6ECEBE35AD0DDEA9DB004FC6CB540B5117B49
59CABE5FD74C6F5B6482B42C20B5FF0467D1DBD7CED2CC651CA57852B6FBB402
A6764DB342889132C911CAA713A7F2FDD8A5E849345D6C81025E02F5B8B682BA
90CC9B467FBC37362436EA6BF8EB62D784B01D5430147945BC09D1F49EE89F2E
3E2B8E6D439248A56F82F2E03EA5C7A922F2813BE6538A3A423BEBC55B345AFB
3B3C125306749E137C647D78028AE1FBF3E1A82C260132832A9668F454D39C41
736717DED0A99F6B11F005F0E1D07FE84713AAB4C042FDC166AA146D7B5E9198
E4F485BE5B135EA281FF1C1E616B5AAF02771F58C5840CB5A427FF9794F93E94
17FD799C78AED1DC4810BCEF4C6C51D3C1504EA2C6F2B29805B7ECF97B5F637D
FE92E168CB9029E90404CB54FB312FC7AA8A9F2F524C03E61F03B1E31D4F061E
1677B39D5D30C9FD4673E1723F4AE3CCF38593AD6D7F61E9DF3C010E51F25085
35D51105E1464BA146A78D7297D4D310AD91342A0BB942034A3EC0696B467367
3E39D202D637E6B14D0EBCA6AD3CF22B07D4CA69C0FCBB6C93782B2F0DFC5AC1
5D8A16CB5EDB671A0C1BA9D10F63CEAFCD0E06E42C730C8EF769CCFD57937245
658F486036D37E8BDDE5670A212FB488A8753322A5B170C9662750AA958C0BBD
8E97D8239D2A08B30416504DEEC4E506013E037C91785C674F8A6A44E23FEE6F
CCC00CC5E4D355B0871FDB8ECD64F70EE32449BB5D6F84F8C8AA2D5B1A489BA9
D7FF2DBAA8D0B84054E93D64D3E77850A3724824914A0F821EEC3D605DD851A7
606936B8B9E24D6E932E16C448140FE94DD96C75AECB73850035ED9C04A1D93C
64B21E7D4657E030483EC5C3554AEF8BE4D0FE5B9743B875340B09E01273DAE8
F256C50A1A8F2E0417440A8BB0173F59E11523E1CEF2593A4AC5AF2167627B00
C5EA97D125EB8A4BD4C372877ABF10F5B7B149D73787E0834BFB3084E9508DF7
072DD71637019599252059738D4D6BC57A9358E4B14F6AF9C4B31DB8E25C29B3
7A15F9953BD73ACDE5F0445A5DC406BB4635FAE51C1D8202AE31730E6F355317
1DC197DB0B6177307C60E5D38F4487363EE051B2E609A52BC4D45B14B6558B6B
5E1618748794B8340752CDBE7756C068975B559615D4CD5A97CE30BAA7B2B1A3
2FEF2E055232B24FD8A21BECDE1B6A479A28EC80AE2CD16DB50B30B4A6CFCF06
491C7CD5AC29FB964D4846415233947522676DEABDA0D9535F8507D33693930C
B4E4240A02B0CE7EA288516B8A6EF908D7F8BAF9012D052C6AC96D9F8F6ADB07
8984F3559C5E7E3022A957982155FC9CD599C74E18328D3AB46F9DD15D1C4C3F
9B93ADB4489BA02CFCF57DE6270F3AD2F8597BE71786510EF08142F430EE5568
4F9DDB792B7C46B6135E341DBBF062FBC50FABA80CD4A384157BAE57CBEA9781
AA4416323265168AC097DE7E30A0D4750143A4FCE70A863A31876A8FA5327C3E
36E89589E363AA2B1A6E8B09F5AEB8FFFD0396067173465B6503383DE517A6EA
88C0FC08578398C2A721E5AEB29F4AC9BC990A50CD87BD35A11F9E81F68E7B85
5E5B95A4F9A5D30379EF90D78E1E466DEF867BAEFC4F5ED2C762BFF099C1C2B3
5E0DA1C2FB33BE1379413CDDB1EE6BB3A495331F72F2FAEB8152E8AD5FD334A8
AAB0082A71D5574B618EA8D487B8FAF1B445F3395B1E21224F5492A0E06F5152
7726835C900E2E52BE3B7B654183AEDEC68053DD0AF19EF6DBC10B6FC08EC7D0
CC0E2C8FAF8C9A4C21FB7C34E074BBA4EE64226BEC8C928A784C1BEE35B72EC8
E9295240B29DDC2539CD118BAC38DB3917D14CD33AB45FE47E827F2A2B193AFF
53C5396C52CEA4F43F06AC2D08C74CC85D608CBA267175EC31311EE25AB48DD9
FE811B411AE426C9FC0B6044D1EBF130231623F1566CEA4D1C06D8032FD9808A
94479C842BC41B675CF6B90113BD681F8D43F51D5016D80EDC11D7640FB950D4
E709A46184406ED90D0892A4CD9062938A8205697A200DBE1F38EB166EFEA0EC
4FCB45CDAF82EA103DD6FDD03D146F3E42EDA6496064DB3F4FC1C5280C9E604B
D5EBCA08BF2AAC90156C11EF68137DC76502EBF216F3AF3EE30DD2676D218428
F41C655093F8B530FCA378B5769F262A6FDB4B66B83F18F050E77227E28D71F4
5F4425CB8D51B3DAE872CD86D7804F870BC564A6DA1CA13EDB00D131CE4F6460
7021661B99612629DCC20C85CF155EDC5111E015A77B0B82A8FC1EBB374B7EF2
361419BA93B857D5C9944BB5B4AEDD86ABCC261542077FE09701C96370168579
5F89D5AAA08D700E2643E88C2FB8D1D56D37AAA9744872E7C050B4CE046B47A7
83F224FA9FD311C955EFBF173042C8FC66524135F579B1397828870D5C9DC71F
8615FADE2A1CFAEA90F732B6C266E2F3048FC43EDA7A6B6D98E9DB793CF457B3
F5877E7A055C92B0246FEA8C72B3B3456F93BF36E2651D32CD614C3AECC0B4BC
F824C8363E593A6458D37408FC5B09883B280005DD24123E2D4B1B85F4113327
EEDD9186A4AF2CD6439B46C5C168C125CA80F9EE9E68906620EE126CFBF26E15
B269838A54224EDCFE2A373EB750D4829BFA410DE5F1541E428BB1E024AF496D
F5F1C151F5A645C8622F2EF9088D57A2811868A8A8BFCDBFCE3ACB8463AC35B4
8B6F44E1C1232805842F56FA468F81FF37D5D55B81CA56058558544C142EB3BE
07CFB1F75DECB1E48C14D6AFDD455989AA6FFE8B8DC54F462B3C20E31D270BCE
8E68E2B43A6625AC7E9792704FAAD6CE8BBE0B341DA7189EBB3E9D5375B27FD4
12506D5BCA50AEDC6955E6C3C7BAA84BACAF7ABDF3A270C7734EC3C6EC22793B
E67B0E288F99699D38DA8B79F2D21DD97945FBDDD132A8F0BF947950D3C0B4AA
EB7B2C435AFE54489E1930610311D718AC610C21A644F34CB2D1959B3066F39B
EADEAB5CFC6AF4D191D86B02402B00D1C5262707861C5308730579795EB53207
A291A27A8B5C4DAE0A87A0C6A260026CA3CB620E1002E066A515D7990F3DEA29
0FAC962E0B82B7A6C86B1EDC54007822BAECED673FAAEF88C8109777EB79A53F
AF3C58546974F2F56E70E9B5CB59ACB5C27CB01895557B2D82134D7F02029B24
3331621F38E68717F5CB68A8892D0B9C0A8ED4F8BB56E80505170D44C6856128
2DED0254ADA4875CF56B4D97372AAE730D4C77A2940DC8C178274DF88A9EE037
215C6FE7B9D481EE4DE809B124C0270782411ACCCF89906A8B143D0BA8B2CEDE
E9B90465C3E57A4FD9AD2702323450256ABD09A1F8C26F08480317C08B75B720
70A161C99715A35A94DD5C9647ED0F8A5337B774C8E54F9653AC859485A1FED5
37B725A7E4BA58711CBCDA6054E34CBD8E9F9460179DA7DBD243D81A1531FDDE
BF2BD425BD9DBE75EAA333B1F5793669A215549A774597E6ADA16D323FE5601A
EDA41092730009A99BF5B5AAE281844A6BF3292D4D4EDE36B4FD8BCAEB6EB72F
AC5D3CD53D0D621CA9EA8D254FDCB2B5161EE9E80B266563F669805A3A15271A
0753983004A1ECC7FBADF62AFEA4DAB49A178C231759857DB910668BDB07CB3F
7E8EC24901863088B3231EE3FA563924032C91CA9D68DB398F9BD9AC0C651EC8
9051C9F709CD784F3FF5951DECD7E869ACC34B83AECDB011E6594347855EE7F5
28811F744A4BD70D4E9077EA7EC19FFCF612689F12B34332857AE41F13E6D16A
962DB9B6AAAC167B9FBDF0068EA13412F318384134B29F3F0C399F1973A3564E
F9C3C39B5BDD4C98D81A6CB476E565860B50704BD65ABD630A5F1372F2D826F3
3AD47C08B8AD3176A170C369EF3CEEB190134006D6135C5B8CCDBE1C11FFF1EC
3F6D8C46E15C4F5EB9ED9F31A129594D542D40DC3815CD075A0DBB648D868AF5
15A05C4BDB28BF23653A3AD96CF6AFC065DCCCB23D5D9A945F8CBB539DD3BFA8
DB8F1FBF9B6F25B41EB4309995CA3D5D6ABD70CBB4A2F0C6364E5439AD1045FF
72F6B45A30BD3A548CFAADDCC6C15D46F6D783D3E520215751DC98335A4ED512
D7D19235CDF911CC69F3CF4365B678EBF3E87C456A4E77339C74930083445588
462529C22A96A28C5CE87AFA0C981F26CAED5A1C8DBCDDA612624DBE0373F026
465185A4D8C73CCD8D71EE97116F8F7D341B87FD78F9CCB9FBDA2A7799711607
6BBA855AE9D5C505870DC85FDFAAA130A351D56AADBFBD6A7D52055E3200F8B7
8AE9A00092B55DEA8BDE224B4BA7FD4A191CB1FFC4CB995FEE1AC2883AB69E1A
AFFC09AB5B9AE311A030A5BA05E2213F9BBF016C8FA80689C069314D91274B20
53FCC65C7D7B3A7504887525BFFA060304931672A078BCD7F269595686310E34
E1ECA868899BC402D17EC36CE40D5041D7CEDA77F7764C9D98793F5334F574DF
E93CB10A5E8ADAE95CE63D2339557091B4B4911A4987CF21B7F1DBADBC2DD605
8EB72473C1F2EABCC44E0D0339EECB55DA74085606C3F89D57ACFBF5755A5395
CA8D4BD47E4EE8D8B882D3AB31A1F0C62E74654C7E041E4FF2693A38A9796064
46526B0A37E6B5BF8E48E80EDEF81E34DA8F6CC9025936A4D0E6D709D61B7B5C
AB550397117F3F9D2F5A542A64DEA8E1178F7337124D6B56BA92F659AAD694D7
391028731E01284BFEA635314A8DA8DF7A34EA3B6B2F8803BE6DCB423A9E8015
55EBD90EBAE8A00298B3B6B1C02BA516AF528122C1F2B07EF69F5466C2C36643
0D665D6561705509B7582D8301AF3C32E2F3B9433E3E04D62117C7E8A368BDE1
0D4DAA1C415B2A6573116D2A169AFEF700A83F55D88813585E89C94C07802BA8
3AE8F9BC3CDBFD9C2E35D062B1FD6E79E1EF104FC70B0AB09D12CA027F33F85A
22F0ECBB4AD55FE8C616B82C46CE69A600E4F767BD7A9C5F9B37A3196B038384
5DEF76A8884425FE598A63AEB19FA698C2AF7CAA4983CEC789268E22BA051EE0
20A40633D22D8F707626ED30E8273EAAD1C065F0B2E1718B5AC853ABE09330C3
B0082A71D557169BC1559B6D285A3499D41C4CCF1F74884EC3917EB9C574371E
AFE8578DDCA459B8D22C0188A8D150437B05FB92022C95EB6FBCC954216B5FED
CBC7C90B9A1F061376A9840FB64390A6BA99CFC8279A86A730C6DBFD14C53C4B
7277D676BD42203677E9ABEEC8C97E13DAA626474513B06F8734DD784F2FBBB9
B3B448B8E8221E380AB4A86D3A683B86A54129519D50DD4FE63B30954D805CED
A9A5D9A39C58B65B08E1C19555E927C6DBF7FD07252B2B57F62B905D6B488201
213D106A41033B26FFBAC2E616DA6ADA6D560BADF10E68872806CFD6F6E19D7B
57CF1F7A030A7BAD374F16A977E0ECB8742D034ADAF9C247DA19C8AEA74EF6CE
DAFD6B1DC562FD3B77E4D008BDE4D8C7FCA9895DA1AC9EAA01C32A0DA712B082
9438E77230D38FC4153E1711417B918BA6CC03203A5FF082AF880F48518D8271
C1121E4F1386B30A7F1BC6F10EA98443F8A65C867A109336B808BC9A8E2A75AC
F950835AA84B56F59DA4C8A18859C3B68F6B6DE09A6675F639EA9107BDB67B0F
54EBC564BC2D781B61C14363A54956BA78A2BB89C9F966C94EEFC29EE9F4E23E
C0BF750144DC289F0DEE1F8A25BB52E54F656FAFEE4BD2DA57E1306BBE648051
1D0CFD6A23A3DF082E3CF13197BF1B7FB22B2CD427BB78F455C9634DF989DC90
7BB2AE247B1C99AB2062855B2948341B0F857ACD750B59E370A6698C6A1F5287
72A4A9628A592E313956C242DF8277EDD2F1FDFB07CDC104275FFBF796D7518A
DF49FF3CDEC3BDFF1D290C382F244DF18005ECDABF0C5C2C64EEC4383E2E07DC
5C82587C071E59B46B7BEF31D268F39D9B12D534344FBA515E9DE8F166FAD1E2
7D1558967AAAD3829D3F7EC6938D20E5379F414532976ABA844D97A5E9078901
EAE4D0ED1F4C7EE7A2D80D891A5013D6409A38ACFA497F5A169EB7F9F4890DC4
62FA6A89EA48267331F086992B9CA9305E16611E6AEE67DCDD588A25D37F45B1
0DE75C802EE021E574B64B3969DE2E5061ED9364B646C38D4BBA86802CA6338A
94E135D2256920EBFB1AA22D9E90C7D16853F0DF9F2D942748EE540E4FCE63C6
5380D7AB4ADD6CB00FE8F7867E4862D8DB432F28331428CC350CDF7F447A65ED
D7683ECA35A22ADD06E9FE6BAF060913AEEE7B2B8EE4798E437698CC9EB2428E
74CE73F84D0D2292DE709D71FFF8901C3505370E6F1D4E28E6B7372492C65A88
159371B1D60D77CEC93B272B6C5394EE1D2EF9969DB2838B8E128553879A1BA5
2884B0A596E8FC3D1E648B7E26A4AC57DF09B9CE09B2F91D8CA618CA52AB3DBD
D005A56A420366069B73146A6F58E88BA49671A1AB7C2070C3D42AA770285143
40AE7D7868C0E1993506B07C086AD7D4F28CE2D15853FC5FBCBF9425D8012B9E
DB6E1E5002517659C8DA69DCEACA94F368537668843D281FC11782F1C5F71977
CA215349EE6F20565DE3D8D8212A40E1227A4B22965FA64A0B02C62BFDE97E6F
C3C54FED4057EF9D258C42D7440C78C5E0CC58A40DD74ECED4152F70A93CE71A
1B3A57C46F74A6D27BF98C97CCD31A8EA487260F224A3E40F52C65490AB4098A
7B9EEB54A5A415C8C88568F7D9EFE74BBB785FA18AA27D9201F28BBC477A20A5
D1307AA78EB8C7CAD409AB64B29E4115E45F5FADDCC80CA74B296C4265A40614
37F2ACD8386AC0202D6FDB6711E8CB06442F209D781E940ADDD6D881D4F8E874
357C533115923B90138FFE31D3577C6AAE60D768970FAAB682CD0DCA3E9A9A68
6393E4B772691C1013ADFFC90C508D51B02D2518ADCC7E79F7DE5DF9D18B8435
6129064DD1A3995E5A6F45D78287CC10A0EAFBF47223494C5EA934B1BC2F7C53
686C5880303F9E3ADC8B100D441D944686E1FD811C646C6DD0224F6CF55FA87F
D132EF50450879A25242A18683BD6D0266F8F333F3768D1952B0F32AA75106D8
EC0AB703F287E847CB91FFB88CD9DA174B49171822BDE34621CF41EA772230A6
3088F8D19CF2364A329162D39E166AC720325C693C3162083155753E27FD36B4
9A0561A1302E8F7917EC99DF0D04321B834B21805EF51C5C3F8184C24962B053
EBB67B9D376EB259F4C10CAD26E5F020125E2F95B5C910185BC34AAC6722E133
78AC84A44F9B5F4E39D600BC838391D7BA0AA3D35B278235FFF9A707E8DA8344
D576CA1AF401D01E56B57672D5F64F33ED898277CE7C6A00090A973CAC4CFC21
4980C0563AA6CDEFF3A37FE02264B2D492F6201F6F8A011C3549C2758A5670AF
83243BA2E58DAC511D9CA26C1A2A720B37C4B2DCB78915B3E0761FF4BC6EAF62
CD134FF9A52448712B713259C8D50FB54F22E9A730AB8D4BEC2EB94C8CBF53A7
FD7836AC85CA670A8CE1678453B5D387D077715ABA5238B45594AD68EE45E31F
F480B5AF1E8018900D507A6C461B5A6DF68D4FE1369FEB98F6A516A7646F6C54
D8888572C3FE31165FDE409F7B59B81B7FB77AF909BC14EF39CAEE118D34D24F
C45CF9BE013BF01142AE01AC4208C3E1C1400ABD211744D09F8169754EFD6DAA
329933A259045AD41ACDB968B6D054C18F3E0397E9EE664F940EA16B9151BBB1
7FB2C4C728AE5FD1E6A62168B97427965E5A4B11410DB76348C6105CBB1DB14B
3B0491A49C2776DD5C65C0D3B2B7D97495A2E95CBC0B0E44C3AC63B6A1AD722C
8286B17A57DD5BB43681D6922AAFB3B2D1A42D11E16F03CDE5CB514D8CBBC63E
A5F9F28A80CF3AB39165EA005E46B2538A64242F215B93B811C3A9312EC624FE
4D5CC6EE8458FE6DF230E7885F44A112B97B8DD63B71E6D86E357A858D5FEDE6
74FAF560914BD1BC26DB2E4029C3E08A779421867A1B36593752D131608DB87A
0C799E48C8BDDC1C009F2D31C43F8D34DE79F4D6F8EC4453B038D5F5BDD6EA05
29B2D9514FEC6A53CA29BE762DFB46C3388E84A9338DC0941832A717D1DBEB3E
57CC102DE3B95155B67360032BEC9DF07AF399B90EA4315CB282B38A5D9F5371
7741C57AE0C496EC45A45BC71C21DED4283063D01BD07C00D055A73B7FDF3223
97A96D396EEDC4273EAE64F3219C247BA220837697303C1C0AE176A89D290660
7265B1F4A79249B2D85AD57359DE885702EBBB793A0B71577B60D3C10EDC1854
F803E9368D63A412E55B1937F36662A38D6FE204F03CC668E97F16F60849ED99
FBA5F9B011B4165D577141AA35E7CB0D62803E947C2AA6B215C1B2DF1FFF2D27
F43F43D11F04809B06D3868CD8ABA961CF790749D36C8AEBADAA852F2E49223A
51BE1FA2341E66FD5C4714449E43297F230AD56542CDF18699FA041961AE9F41
8B5826C1423D8B1E110F97016016251D58FBB7E0982FEB8FE7F664C583B5BC4A
A6DE3CA091D768891407D15EE26761CDE407BF9556338AB51DB703F0BA4D9539
9C171EEE33948A3537DEFEF6F42742D7FB8BB2EEB7024DE0EEE6BB6B7028B49F
A8F1C783BC626FAE795763A5553178D1F2B6880CF22A06EA09709C40CCC04742
DEAA7DCC1B3C9AE34B437630D27D699AD36B110609B926D9BDC177CB76433217
972DC5C0FA2E2F58D5ECE52A5820F7216F76C53CAAB2DFF96562DC4AB031CE23
8EF5CB3BC409AE4888239DD1F262321839DF36FF8743DC8C8282F14CBFF68925
657ECBC60BC1385B4F2EA1FADE09E7B8507B874D48127F878F3D4ADD38F26D7E
9A634BDEF69DF1BB81862FB15914BF103AA6FC08B205FC1A4F1118F3708C57D3
15C01BD7ADCDF116B7C4AB2884A3F99BF56AA7C2D5D95F3E4A09F13779D35B6B
C5DA8D8796CD84DBE7B7EBC93275DE58ED4410C266CCD175EE01F42E92CE9420
6863C41DA501FC41B96E7833588BFF56431AF26D49DA30C01F4F138D61A35785
89A939A0B9558788ADB3F3C053488893E6125A835D7B4B09C88697683B5D6C52
342BD6E6287459DD589E852EFA6C8F5E480BCA8E2CDCAFAA08354BD7A2BEEF2F
90B665C30B35627B7155B5898FBDE3AD9C8D32C3BF5C2AA6A8B38EC0D23A82C1
2B10F6A0C01BFE686F293805104020A4ABC39DB4F7A06BFEF2F1DA7E7DEAAC1A
E5F0C517FCFCFD2E5CFB0BF487197AE8C1CF4FCC34F9EB36A3A2233D70BE9CBF
36BF70D7DBE4E14286D4F10392DA46C2FAEBF23B54C1E5F09FE93A55565E2313
230CD435B2E67CA04055A47D0EFC2247F96D4ADDB3E6DAF7EE649D41E3F3A3C4
0317A9DA674F2CB0CED693E3CB1ED9205F5325D0B6E9E2155F47510DB85059FC
30AC79D560A5B95B9F1D020256CD15EC58B799643771622B0F6BF8F2138D68BC
2B61FDEDE0357ECF571355476DBB3CBBFF818F33D6822E347B6EC6DC97E1BFB2
106CA9F3E852901B01A78B7CFA05F74A578B14D3C573A0B0E1ED221FA35737BC
1316CD9B808F159E22F7ECE431028106DF2A2EB4F2745C8376CCEBB059CC03BE
CC571C3DCEB54D37465B77DCD03D443C48863349EB8E1186B102EC5650CCF794
FE65638A4262C7D4E3FB13343F286E50E544056F873A66198106AA6DE5FE5687
6682C67504082C98AD545CBC32E371311602EFCC5C7969B4CEC1308619CD2477
D28790B2F27F887DBF0C15471D0C8CDCCA77EF867A7065F222D298A0E80BC6BC
7A0D88881A19E3C8C9A569D2637D35F7A0C84A611A14FC32E40FA43D3C90A3CB
4579204E2995DDEBFA7CF783F4EAD5B019E3E7B47DC6E47A2E240EFF3BD3EE3C
BA341B0D8081727A069624D6CB54446D43DB2ACAE3E09FCF8C1D235AC3D1944F
01B11AC064A6321B34A0BE5381E09BFC39E27085B52C85670E73F2917313631F
E53CF09BDC40B3CE28A9BF4A2517A49C69A35C6C293564649D3B3AF554AB3D40
131998E81FE0ECA536E76D8B15E5EB9D49033F14813581820A9E6E39AF773842
0128F452A0F9C98730922AD9E78F5A6F9A8B081CDFBDFF86FB63818524C68619
DE01725A8568301DD53BFACD12A86B91F9A0F42497362969045D38AA0A9BF649
BE44FF32017D7DEB8854FDFCAFB8C0A0683930BF738C649DC74FC93605A21D99
25A4D5256881E9A5B814A1D9827C3E0A270A000E3E040A8004A642F93A2FDEC6
A51E89D11887B67B8E616DD42E290D4BE9A4AC3618A54C530646CE5E3B5FDBA4
D9180A87E57C044BD48FE19BBBB99C3D021C71CA0A2CC7389B91B45D39377920
5031E8E9A789DA8563B81AAAF533D9594DC57DDA5A5F01D91D169A40AB0CD951
CFE3E88E8B0E2E6B4610016A5F4B926D2A3A93C1A4E1D8F6201660813B8D00A8
C5636DBCFD2702E76A4D56AFCA5CC312E995DB3F4607811EBCA75FCFC37569F8
26FBDA306E757D1EBB6E8D5AF8FD094F26ECAE59866B856D69548F5197C995AA
0231EE29DD0986A1542042C4FFB7864F3A87FC202E12D8B0F455A7CD973E95EA
2E9B637B6A69BE1EBC46E804DE24E3656C5950C60676A628671C4BAB564FA085
F398EA8C82D1645F7AB010395A9BE35B2E61E2142A15EF3E7E1C566AEB9C9570
DE7AAD4E54271523B124992EDE7C952BECB7944B99CFCB6D3854E8366D91B2E7
87C002E3DBA791011782068612D74AA9E8D67BAAF6EE9782C09C035D76F5C8E5
20137A7D25243033F8A780DE6862EF0C39A503A6B33AA86A3EA4495EDC109FCC
DBAE6408F2767C05F93292CFAAB2E7419028545848697365C5615CD093D911F8
03EA356A5B89D25BB1F4F5BD00FE7D344EE65EB368CBFBE94CCA514893B56D90
412E966557361E48E6D14190392AFF54C3EB6F9F7ADC5DB7D6A5E5BB8F4714C3
896F2C7DFE5C005DBCE82618B13299D0DDE1ACCCCB4C1E7696D1653116CD9132
2F69A5635D58DA0DA6907A28A54537A31BB08B886421B3CB8FCD4B1BEA8487D8
9AE0904FABE9A1FF70C10B9753B140B7637562C4B5B1D3E77464D0C920AF0C18
52F67C25DF6BAE45796F93E880B89BAAECC03687A4CCEB2AC36CC0926A14F87A
4D64A7FA2156BCCE68B6A68825B496B9A9D530E4D9354EEC3AC6D2214748C283
71FF68989F09B0EBB1670C32B2440F6CBE2E60F6E7523E6288AD188D153AC1EB
E6851BF072DFA9265C2395E394D344F8CCD896803391820EEA013CAF734DBFE0
886E17104ED0EE034FBD2BB7A8719FC6673A01FAB65C561EFC0533C8EDE4D83C
5254F84A1BC42087B9E79F0E2167DA939B81A264C068032FE7DA3CCF7BD94FB6
E4757ECE7D6B42ED7D7CB5129E6C45360F09E38780EE3FE25CE84B909D63B7F1
5988D7A74D98497FA9B2340379B7816CC559325D9A068D8DB21B4DB8F576F198
3BB28E87277646C641156284EF6B94A0E5B465A13FE9500B9904EFF423696CB8
D28CC15A0A2B72A10EB6CB68A701515A11517F222D18762F7C3094CCD0497AF2
A3BBB68D06EDBEBD0523A4B319C1F810B80AB88FEAA01F2BA5E1139C00306E0F
7D036D0AC8D43241D83611D954B255CD38D1F413F805B4BB5BD1C8390F4E425A
8D82A13772C301191F9E36D2A52A13D57FE0394758044F7349AA7BCE28C24DC3
D505FE1EC10286A3390AAFD73492095327B25476A53D234DEB4E9AC028D8E933
7774FB3AD38B595A969ED8319E924F83C530AE03CEBDD2E813F10BA11E877F35
6D62B8C60C9734A3B1FC4D8F1A2E7A6D316776102E44331F055F236FD69501FE
BAC3C447680D740336BECCDE345FB9404CC42DB5C735C7AE32505900FA134AAD
9CF92DEC16BC3AD593EC55EF6A69A60E7EA8A9B845604931055AD0BCD9536058
1F24FF576B233FC1DAD23B1B3F75AE4E4E9F9516527A78FAA2EB48D283BD314F
78F31FC26B76F48A4B2BDADF1F729E154CA4D30960FCCDD2288556039DB1A4F0
FAD10D1808C0CA1E0E1883F44A3A73777B12CD85281742F3B08CE509E56FCEC5
A097012D822194B1182C24342C87BC4DB55C54FE51CA8C15B74FC71577C9745F
5EBD9C05056F779B5766B9648ABFB5CDCFB12C918168C5214AB03BEF74754A42
35440C3CC12C30844B29311AACBBC364C63772AF4780B7BB44817DF80379A52F
19D3064399C38888F4C8B3AFF7EB5275AB2DD18A19B9CA7B0AF1767EE9FA22D7
2409D4D98F0FA2916F8050EA3CF26F605153DF29914F7113108B29CA9AA75BD6
F6201033DA8C9A56D18368418CF696F99750D7224D21BE688F21AE393E7871A9
CEB9A1761A4B3803F5422B3A95E5450A89001D2A2C20C90616BBBA0104911CF7
73F18DD605305B5B35BEB09C148E998022EBDB2E1D3449149EE54B0A03429B1C
631F17AB5C7377C43705FECA0A01CD84406115BF782BB5AACC1C009A24DE83C9
9C9AB781E3D9A514E494239BF419059B17098A10F7B7D6C4CF2FCB9547CFEA64
2D480E72C7F3C3427CB96FFF5072CFFF997A6109B959F2F89A9107E157349A6F
2AD5E9F20365927DD67838E2E791443CD81AEC4D31E73590C689BF39D73AC1C1
F95390CD90AFCF8F92FD3CF021B214B6C6BE3E61F08D2825F07DEB1868C54C74
A4D43B550E1A09712127A607698EFBB890A6C4660CB465D65FB00FA787F2F663
75F32CDC1DDFEE6C8E1A94F915FFD7E2DCB2759245FABB4A0293EB380AD58E94
E3719AC1B3B44A0A573BAF250D87C7945B385A8DDF21BFFEB4A048CD9E3ACCF2
716B9ABBAF9E19EE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/UniqueID 5000768 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 14 /ffi put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 49 /one put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 73 /I put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158DCD1C1BC03B83FF94C60B1DC71CE8A86B46DBE661C9F8F4677F8A2C7CF1
E41A91EBDA2304735147BE66CDFF2673F09D408297302124C127F0B35690CAE9
CE1679120CC4D582FB69550AD34A047DDFCD9D411724554CCED753DB52D6AA7B
22B0C55EB698ADDBB0F8ED15C971AEF113C74B9E25DA29199237B98DA4023665
C2A63A837E4CAB38F8DF37DBAB5DC80C0C3FA72C8A70DC76B5B36B2EEADDCE74
23CF794B66E4DD3B35BF99893789063BF7B01D5F186B2FDE57B40C5D496DCB96
A46391F006B0EE6C0EF8F0F228383102BBE4C34915CB28C609F8268191221483
2EF55F9E4571C466AF16447214FE9DFB07B6529FD7D2A3A8019782900797F6F9
5724CDA6F5BAA49692AE8698D46B7488D90A4BAF055257815D95644A15683DAF
8038C03C57418377255201AE91F48B7FC4074F8C397A34C42CB977A3CCD90B96
ED207BDDE153C0597EE5FD1996F8AAE791FF65FB53F78C6F639F53C1C2E9F820
D2B1C9B1598BAEF7CE0226917D674ED74436283A37FED454E6314828E3007B3F
D98125E929364FC2FD02F3F6970F6306B22213A308C0C5BC5674AF59E02F602F
99F4E8A352091004AECA34251C99D53D7688863BBEFC23C72C059694F342BADE
4B4D44ACCD2387F92A4B74262D7729B2DD45824839717614219F85C33EE973E7
CBECACEF5E50D132AAF7E7C32A97D167B70C5D841AF76E112AFB947365B17DDB
1A85BAE833D99D2B61165C824C1AB174BB19E8202B76888809C9615F0DA4B21E
7AC862145E3D814E7817C6B9357AF99C34FA15687F78572C5BEBFDDD80971DE3
920B166F5B676700958F17D09D8B7D86720A181E9482BD6718256F804EC4258D
2463D6D41028432E91C7ADB46B7AC4260AD77DB005D835B04DC328500DBE2E66
A62E11FDA4C818B0A3812B714D9025814369FE71C3906A7DA6F76FF4B424C52B
014C68C1924EA4BD6E305A4B43DAA8E9420BDA882054B68A169C3E54FF99466E
E25697146F66B9C5BFA5415ED1D6DC627CB8D85DDFC49EDADC2F0A01F9BFDC19
0E29BA33396FC8598E524DBE15F1D299A11567DB72442CC75D9D2B65F3EE7C10
20F1647CCFF023A404BE28D37CA8CF48FBF19FD25534087E17D7717C9EB78CD3
364BC4D5B263A7B25245E196EB37B5B9678729BE3572DAE3DC844BD3047EDC44
ED486A1E7DF2DF921F2B1BE5FDB120D8B781C2B10C3B28B0F44DBB92FD793EA3
7DC67D93D0487E7B5DFA4CE67987B33418E42C97FF011DCF5A74F5D7E63A5684
BD9484F2D6B94F12E4EA3A9BDB285BED832135FD9D65C06F84A291CBEAB880B1
6D7DE7352BF4ED76D20B41AE6B28880F9C43CDBEF790281699E31C3F861ABDE2
4AABF7BF07C8C599F051F8181FA2DA8EB3A220C636173D5D9EF4C45B087BC34E
8F14FCED37A9F766876487792F13685C591E0E2933F73C43D4FF3A43D5751F9C
4B189830EE8D147665AA6FA13FF29C9DBD9C2F6D1D8746AB14A817D0EF415727
9C6E9CA8890C2597DFE791C64EA44DE301E9DCE4FAB8AE21CEC305E89D8BCB38
90E4610DA3CB0A51F6AAD0A5B01F45B7541CCFB897E834D81079F5D6B370B4A1
0438E2EA000D5A5F10C7D62BA9ADE2CB135176F74DA8C2AE04EB142AEA93207D
83259D60B1008F585F5BECE5703BA1CC46C67C7911AC7AE222605BE01550B8FD
BAA49DB6C222623AF193575FBD4E5745399DC1A9FA200F391EED389AC49F917F
D95732862141083A67AE2001F137F7BBC1C5B682179030F3CE0C68DF3DCF39C6
5020DD923A8DE1D9C33134E6278F219307C670A0EC3C0082531B743058E2AC30
CA2383678E402EC73D4064320E74F4D6B5A1DC8076E9931497D863FE71439B0F
E9F6A15E8C93746D93EE017C26A0A1B92BB98F32ADAEB37F29C2D64EE4C15228
D8292F4C8A5375574FE553E6EBBCD1EB55B342DB395BEA33EB86ED4836767BA4
78602DF298C20499A90444B0B89BF23C707CA740AAC0CF4B8DD9CE727EBD1D1E
F32F33586A69339B06C20BDC4E0C9D0245F0F7EF2321E99EB1A459DD0A67E185
B1BC45A841EB3B92E002EB987CDE0CDC2FDD22CDEBDA633A66722A62808F0278
CCAC9CD610E82C93FCF5A8FFA56B5A2FA273F56C9531A458EFDACBAA4839F09F
127A752CD0F5A0C0C0A30A3CE86CC751EF4717D7F44664C00B6ED730FD9EECF6
B691350DC0E4B38EBB76FC560B681B2A64B0C43F05ACAF0D5CC2DBC2E2416F97
8FCE8B342D0C31B4F54AA5E59A5696C009B444EA7EFCB02B512A67C7E1B49856
7C92E2436CCE7CA1533008E67920EA3383595EA3E14929085DBA158E52D37FBF
6F377E25D2EB2A4B524694DC188B087C367BA88C5659FFB3B8B66822C8E94A34
A9CBC91C4EA331A881C43BECAD837AD231F5BA84547BDB1B3116A74CC934338E
F87C2614D353D8EE15C26F1F566BFFBE861D48AAC7C0A4EBF72DD3B317EFAC4D
403595265F0306D9CB3B26CB5F05EC58ED100F3C420526F9A0BB461BCC090316
1803FFA72B65EEA53F495AD0E133EC0D52B64A01E25C9C7B71D0F8C6D40D1793
47DBA9F2647BAB1536E3D033F20189E8CD07E8638F39422812B6202101009DDE
43B62C0197E7C58C4FDCDB0A80511212D05C55FCAE1E3FA4F1E70BFC2EA4D0CF
D15D41112F42CB9955D40E7587E498CA65841533DE02C20067A0CD0271FEBD50
8595D8AB98C965DFC935E0EA158B8AA5E5CAAC294FADE1BBF4EDFAC6122909E0
A9C7341BA323FF7293B0578E4EB7509007579A02AF74678F6F35C264DD088B48
75981B3590EB929E60EE839B0BB1A1C28C3BC5176ED5CC3EF6412E32362BA966
DDE41AE5FB79C3272383D7526CEE1C178B1C6988F963BB0D73556DAACE18F7B1
82FBD0D0A7551372F78817D52F165BAC938698B2DAA8B794E35F8058FF0BB198
A50ABE5B7702273A98CB8F246F801EF93C280ED3D8D543B5E2990ECE96EF6D71
AB2FA838011CC60DFF9BBF4E0FBE02CEBF5BBA321A8CD05D9E3CBE1434E0579F
840D1138FE79B89D94209547A3347F2C1F30937F03EF09013769EC79E2F70989
4D3803E34CEC934F99C14E1EFBD7FC98BC062E589C36EFCD44803912C45C2827
83F673944B2BF9D5EE6DEFE6056EA42E855D599D430D3F85FE8990B31F338E30
05699CDF6369ABDDBA5C0878EB7E850602B6815EBC7DA76D6982F3055BF16475
59BC386CDE7F5EB9A7940908D65F1249639FCABFF4EC3BCC994CE1FD48E705F8
0B009ACABDF28924410F04C89AAD7E74745FF9DBF2BA76527073A8186012A2AE
E10E47046A2BF053E267FBAAFE21FB9A5EA41670EAE4F801A875FFF6040B7822
3DB13268502F899751BDA492256058C03B00D5C05F08E6EB64E2F3340F5B3DD4
83700603AA2F21BE162D6358440EFC9EAB641FC4E537FF9D6CEEE5278FF99CF8
4193B36278E44E15824AA786C824114BD6BCCF2321C221DBB896113FBA681CE5
389542AAEC2E389E21F3D8C45F67B2719EE30321E46BB6828949C3802D2CE135
9CE20556C47A8E45A63E203F6E03A90ED01EDD1A46782159CD55630DF6060ED5
6A9947DC9406DE7410672590BD7BAD051E318B6A8F8EC6FDCA86CBC4FFE4FAB2
9E84450AF9F46333A0124C2C8F4A1A53DCC240976600A90CEEC68D8D1040036F
2E0E50047DCD5B493242CAD88E2A1CEC8D88FB458050B4FC7674CE7D352F97AB
16D668C9B6AE93A8D461823FF997F770205CEAEA87ECA10D1B1BEA3AC8852A24
4A3DDFA721781B8B57B827D4DE8520CA0FFD24929CAAF970105733FF02359164
08851F72FCFF1ABFA390A76352397C3DC55A0F6C10D79B8EADA1337645B334D0
B5E90FF77D5F87A17996483EEDD201B34CD7DEEE5C953D3D74539B074F4A0135
F61FD70CEBDA2ED167F51957B633C3729624E9B2EB7DD7E978400F332867559C
878C4597A5FF7DE3773E9375E554D5A9D458FC44B00F3218FDA0682FBD5B44A4
F40D2B9BF549CBEF31AE4A4C44E4C6802AD2F146322F4736B40CF43F47409B72
4E3F7519F3CDDAE412DAAF4DCCB9F7CCF76960F27FD8C0BE8850E8EFC8796589
998EF00F36ECD2473061097A4A8467E50BAF0C17CD1FB6D60786C23D498B3ECB
72E1D7F6FEB4F90BCDF9A611BF632319D32B8CB9F3A4758C4DEC3B0E7FBF8E4B
B517928719F5C913380510C3F057F2C71A10A904E45EE3EBA23AF646961632D3
8F66025D37A13AA4255118D889C87FC2FB44B0098F74C32D677D7457AE3A9272
BCD3E669FB3A6B34B0127A1DB0EB19865D29CCF9ECA5A98FD6CDB85082C9D895
CAB362007A28C7FD519712003854625EDDEEA34B750E7D9ADA140AB5E933A25E
FC081D200AE5D6A4AD342AFEDEC65F5015459EA3DEFFE547D5A99C950B595771
EDF526EE47BC9B72785BE589741792FF5DEEE3E5DBE24848761A3492E715D720
354060A299D8C4CD54BFBB4A12CC1C21BA8DD11EF7E4FAAFF2DB180A7A2C923F
65AB43E0FC8A0C1CC4C35114DEE607B364927B19C6419D000E8037A21F89631B
65BC4BEFBCA770C8F537607294408B7E54D01B40DC158FDE980B4F1CA48FF52D
AD50F9DAF5E900C289C13AED7199144CDB8DE76B4924F02C6A70F63120BF5C34
76DC04067312C0B5DED3D7BDF944D9E28B0E0DB5500742D7370BC64A98FB1A42
BE69F3BF07644BE345E19848BB2FA283A68F20C9ACFDD504AAA4191630685EDD
BBCA07E131B5B5F0103E5D8FF7477E19F92AD70E27E1E69A0336794B7F7F4A83
4442EDD264D2C32372565BD9207335B3ABACDA832E13E637B0E644D780C968AF
B6D2A7DF6530B45446537BC2288D278426A2F310315CB912433B78493CBA83B1
05E12A9EAA132BF16ADB1ED3D505A4542207B8EF2818A9E1FE3ED3239DB04EFF
5EA8773A89DBCF19D5C7ED23A3308B2BD73A0406B3FCA2888F395EE7E54DB25E
8B4BC2A1E60547E1E0A83D2882CCDF2B1C5990675EECEB5D4EA94617656322DE
758094B8478E245E026E9ABA55D86A50E73C17C66FB1999B1CCF2163062360FC
692455A0477E33E319C7B3E17805AD3BF1E950F1F7AEB302ABA93DC61D86D7A4
05D7669EA3E0067B5646670B9D00953A7E3555C7471701F48EA30483C5B16E43
4FBEA90ADE3D45B3085F53BE27FF08DA66E09889385D3F319717CF4C2B8FC0B4
AD6188E6F71B193A23D3270BA0B35349FF05C30F5515BC85B0BDCAF60DA0955C
AADB7BA6D29FC735A6E30555AE234BC20EAA74227942F7C32B991D1B6E27D47E
BF01292CF5EE1CA99C4720A207038CB95FBD5DAA6EDE9A14AE0290596C9A68A0
329CE14371F61520BF5E5FA003A7622E61E047A5E91C0E0B7C704169611B4750
76F43B6669A70E5AD437169E3953CD008D215B5B1E13A3E4E83826BA124AB285
68DD12D1C1064A7E1CAF290CE5F4AC7C3692616E4F9B379BCA5CC6B0C320874D
FAB5B4BEDEAF675697AE06BA289CEDC76A9BD80292C9030BA21BCF07C444DD62
061918E8DECAAB112352A0C4515566B82A229A42FC3E0AE323A0BB3291F40664
85671523E0E53735FF009F76D9CE879CF902C7F571A48D264A1AD220DFE260D7
44F0F40F4E31A17741EE51C341F786DD7DC996F860BFF26405460FF379B353D9
B9CE932C1DA96256A9C8141D3258CF3F29D7E6FA5C60E590BF0EF776C3AD859C
762690E917C8964306724F3F28B13294DC2624616F44CC928B9B67CD15C720AF
C569B51D9CBD99AADA8CAD8A68AED130EA03923BC38BAD58B8F3F05C4FDFC606
C5CF8550370FAF8D645F1B8171121A5B25CA56A4DA80000C006B559E60780E50
53AF0610A0A3B550B9AC7C61C50539D63FB58A9AB817B45A040842AE032789DD
8D781A7B49967605B1995CFF699085274B8CBC0DFF7ABE0F9BCD1F814D4D8375
0F7D47131A4BA784D2E816E7E57D98C8B85A5BCEC97FFADF74A7641F5F68487C
78E5340E75BAE2C4A881BD160561244AF25B9A17071C38A35991F6C31C290EF9
B8E5AEA20113BED2F1C7C024E24A39EF7E85FD76B17DD272213E1E00CD0688BE
2B4EDD77A24BEBCA31B5402E3DFC06845425C80D15E6F7261CC31456F59B990F
5EE9B72BDB25094E876ED7839816C7F963DFEE0FCF33234DE05694B2B9214F12
9E4B9D3CD7A9A44EDD0B871F5FD5DC7840A1C400774566C2D01566C2238D3969
3543FF5B31285E91A5E432D0D61C616D8EFB2A2D4650A71D05E7B508332BD761
C0A535ECBE37C52ABF1692A8DF991012EC80C22F3E1F20A4102808F057A92E85
9F0BE67A7C2831F5C6BAB21062141C7636A82D77118855DB531CA31065EBDB17
BFBB02330B007BA5569979808410D51B8FD69C47C0C8441D98824B622B3E4989
E818C3C68528516592040E76E247865280259D487021C7D6ADEBA15A957EEABA
0C44EA7B96F6BA633FDB6F0387277D6983D45124F05F6CAC4EE2DE820A1CCE0F
23F242BAA69FFE1F152478F7160A93BE97CF3BF1C06EB9846B62126AE4A58AD4
DF7F19E9571126245E0D200E3FBA0D49B1579C435B04771665B7E7DB0AA29186
BCC078012B1C58C613AB2EDEB71E50FFB293C00359240A014F53AEF8D7363BA3
720B7D6F04BAC018F37D9B3FF240EBF105D5D0DE187BD63C9332E2552BF6624F
4C30C57E0386259DC60C3C4D6922552BFFEEA57C84BA3879A6E171D87DE721A9
B87A1C97D4517DDAF8B145510073E1FE9727D91FC8C7129C1E011602B9445C86
8CFA0BBACD751162B0D0B2DD07FB58DC00D08EF7524EACCE768714D743B3CB0D
95A058824E47C04726249AB06950038A1EB65FDDED9AB776A67CA777DAE97620
79183BE37B9673096F049565462E68240663623912BF43E31F9DE0E2C1F39EE1
C8BBFFAFB1371E99377440ECE8B6EFCFA5E2EF2F9F09DC590D5C7DEC2705C09A
8B57AA355E68A2D00E491034BC7688843DA8F140CB39B23982A4C67F24C6D355
E13999A33CB7912A5FFE7120A40A91EF25896709D975CBEC2F14EE709A23B398
94EEEEA46362F6208C8BAC967834CC14425793496C316A523F4E88247D21CE83
4E961520D1CEE527E6818A8CF84740B021428B1FAB750B8012554E767EBA9D17
94D095DCF0C79A20CA4D842648ACF9D6F3027B3E65E160F7AECF21132C6C0241
FDF388218282C3E0B36563C9BA38886C487BCFB55AD71A9B931C55A89D19C181
0FEAEE7C596238529E61F6B2B243DAD0A0050F1671AAA1F355E77F34971A7B9A
B5D9078935264215E71FE42BAB419DA47CC8EC5884B1E48FF98F202C473D0F71
162291F51FCD32AFC56A702E0384953832B3A6D05B742EC6B29677B9CF640FAC
740D8110295FAB1930EA295668E36EAD88EB683BB2574B714B609B665DD8043D
42EFE77B376ADFADC648F633D85CC7133B08CFCB3855BF6EA84893130216EAF5
DAFEFB06334F7D752187D7C91C36977547FFF420AF8410CE8F03A532568A89A4
AB3CD4A85CDD8B044EF6905764372CC0E84BCA8627ABFAA5155E025DD0901891
926C8E48373BC6EF17535331DB80567AA96AD1E5031E8F3074A274B819ED3730
E9AB8FA3CE104ED4BB4ED6AF8F25D31AB74977C85D334BDB8EEE06C25A183B81
08224D569F939D64FFBEB6413105418DB9BD1EF7ADCD90D4240EC66D2D83218F
1098E4A6C440C56ED3B8D0D208E91AA9FC8BF8787E0FB635643A6FD0331A8ACF
D51DD8F9E9A067F6E2F105E44D8EFF7B4672A45FF9B3E857276F94D8A23DE403
E17524252AC0A0E86717F589E7C73CEB512607ABC861676069520FB97A7B039A
5C6FD7B245F060B360207428F17BCEAA15BD584E8718D7D9339D6EC993345B80
BB105C66756F29BA72DAA367D4CD294A7B81382F2FA48413772AEDA4948853E9
04D6BA692A9CA1CA28176C88137F95027BCAB7E9789A8EC8521F1858FBE261F8
D4529D93F20AB72C9B683B69187091C095BAB109D0AD7C92E20ECB97DEC0CFB1
64D0466DDED75C8EA47A973E716C6CC3FC1BA6325EACC250A5AF6C0BB62D1DE0
BCFF414EDD6D6FF99721227379A422D0DF7CC54D0289443927B42B65C8A767C1
A10E73B6F92673D600EFC0AF135CA86171A45E9B086CCAD5486717E30274B169
7BEC29E0A391C3C37A8C530582A655EB36BE7DC55960E612A912483F67C6F5E3
5A617BD73DFC3FFF2CDFA6E4CF066F420E9FE36C9579703C6012E3D599761A75
3B73987962A2F49C0BF2051BCE9A5BA17AEE278AC75359A545DEAE2FBDD25382
1E8CAF47435476EAADE003CA6B1A9EB6DD1A51C4569A948E1BA970A27F00903F
B871E0798030DD7C93A35C34CD5A77BF576EA0A44600E60A60FD32C68BFDD8DC
4744ADFCCF42FF749DF165BB8AE60F624E3FE630EEEE0B76FA4546E53617C456
26F2C27A89A4B3AB7705A339F34DBE0CE49CB2B7321ADF4AC21B50775DDD95D4
4D8718171A76707A07C3512513D3D7A92413406C9ACA5127C9FCBBAF9635B50C
A70EC46DFBDEEDBE5A2DB2F6E74215C5926A7BD12302673EEDF1704AAB6A578C
661A53DFCD2BE168139C8626056268B00F535CD54D64CD486970CBDF80E2EBDB
6AA94EEE7FCF88593FD61E5A0DC9C09CC93DC948EFCB0BCD0B90E5D538320A4A
B671F9015FC8971925E40F1F39C038394B7B13D46C630F7040DAC727018F654C
C1308DB406CAA49777D782AAE3C67ABBED5C14ECC3375D10593E8B59399D8729
7A266C8BF7FBD4368BB12A2B0A18590B49B5694631A55198A79B03BC09020E9E
439068F7A121E2DE8F4EA74D28F2F8704C643D222F93F6784690243F4765F6F6
B60BC5E27DAB3A85A3EC8E0807426427653C790451AAE5D6C9AAA0320A716B02
9AC6A63C223B0472A5916A687D1E6A511AAB01466865F8027E21CC2590BD9228
D85EFD675B128BE910C69FD4993D49A783E30E3B6876A2D6A5524DBFADB5C314
3FDECCADA2084109F5FB190881C357B7CBBE306EC4DD453597795EDA1227EC06
F8024EE46900FA5D43DDAA491E05231DEA2AFF66419C2DA1664FB8E3B4AB9D59
BCF90270A209866C0B4A9D87EAC394F220AD3B5E21A94D0B8037766ACF07F5BC
97CA55B84E098BD8CD0E58F0C1948D8355B8F2DEB2EF67FB6AFC681716CFDB61
205069F3C0C109939D4B9D45EA148499D2A468D9CE66144E893C6734BB00FBAC
FC92E8D122DA72262DC50477450D4F638C1E6990FABD54308105AE3C28E8E2E8
CFD786AD7CF5AD00353B01A0010AEBB54E381AEDE774DBB783E10F4E7B70A91D
9AF319FF13809A117C2620FF3BBC7EDD05B99EA86E8296067CBB2345F1E34B7B
7448C9314292DFFC17CB48041D9CF506459F074EAD0E06B89266FE6D96B4F6C1
E11695984B44E7937D25DFF7A6809865DD62E1FCD5EE6DEFE6056EA40822AEFA
89825091013C894770B5E1FDA23962CC0D214A17ECBE05E0F08EC70A383399DC
C22515EA919D83727E9C38ADE686E2BE1F4001D40A1E084A7B955FE57F68667C
6259664C8D674B8114C8439DF190EE72552F4AE0A241AF81B383121B8A6DEC2E
1FF8E8B7497A381617A9DEFEC7EAD30F4A0F09E557523D89D2AB50D93119ED57
3CBAA99ED3BD793F9426AAC319B0AF4DD50489B3125F368323D4A3FBD54346E5
90AC4247C0EC1AE7BDCA77569E82E76C8ADAE581EF93D342439C8C12E98272B3
B07E8291A041CE7CC3ECA183C179F36C1DCFC2407B82D9562FC2368D0F594D95
A843A2BE4BDBF99B207F11377FCFC23CBEEEA7B08E74BCD36ADA55F4F2CB4310
9A5A08CB59C34D026EA0A155D33C95883097D0C6646D3F25001423287810545F
0D3321C80BC2FCD94AE88E608E65163B01814ADA67B2059336C876A3DA8C54B5
38C14A5CE1BFEB7FCB146D46D7A298C3218142AAFCD130E8DAF94AEB68364E8B
AAEA4D66A0824E9D8E69EE73B9513DB3FEBD5F9B6DD133AB7E25459F31A565C7
71B429C59FD3DE1DAF1079D5DC632B791723854DBFE3056693887FB75547DF25
85100F979D15F3AF11BE496DD1FF4127CAAD11A769127C696B609328F5BF51E6
84B35BDD15072CE63F51E7329F91674A6D3B2F02E8583B17B90F1468E9F49C22
5C93003E6E2E3BD99F88C96A88335AE7B612B1EDC02DA1E18B453FB31A2C1DBB
944BD404E1BE05BDFADEF29DBD1D154002CEF8BE7509C814F084680250149547
A66BD794F4ADD86D18BF0C16762E063FA2E3141EC96BDBB7F712747C50D86884
27A060C52A0F106E35730921428B4CDB0BF74897E48F80B4B13FCC652F1E2177
72FF211D3B66DCB30C30873D87C1EDEF35DAC2F40957A96976BC12EF1A49C2FF
1B95FAD3EA2E2B89535498506AFC92EB7936A0A0C2AD491A7F5CC18DDC9E1C2C
18FD4EB98E2B064C9F0499527CCCE7CF543A5F905DA246D11B291C3F2009EF48
C05950E68ED7CA44A83DFABC2FD18775C60BE1FCDC83315D108388962E46294D
B81D1F792B17DBD40466E98E07FA51954FCC21508CF74354A24ADDF96AF599A1
74982C316F89EE58DC0FFA0710CED3FC3683B037E7C3245070AA96BF8F1F0F97
36CE29B53005911785476DBB8C5F1645F34617991DBA10E0E74845E4AC62C710
3B9DB2E308F0341451F960656D1193AF93E25B28AFB44032BFE3BF97E7F4A122
035DFDC2402EA97E5827639634EBF95E8D53F9627C609C6A2040848C51FC49BA
2574FB3C8E6D8BE6304F7EF0A3BE4AD6BF4336F0BB7F293892511F2F77E8404A
F32375393B3F6B303ABEC17BA38CF5C5E932DE570E9A831A0198FC00B6995DF9
847D75599168D303776F93F69C855F72D250C02FB288FCBB8ED7217361EE12F1
333D12BE10273C2F8704C941064F8242BA2310ABC7CEF2885D4454689F48D442
0E6765B2999DC0A680B8E6A6DB4D188B2FC4741A0809375C126F537FF20C1F98
687060FBCA431A6F805280B88D47290E35888BF4EB2977E0CDA951B0777780CC
AB9FDBFC316E2C518C973A40291069311487892F941FA3F2AF76630BB46D9478
0E29E5FDD5939F1B36FEFC83B1C11A39A5F66D233B515A9A0828FF633FD0EF32
FAE0CDC679D36A289CFC0B7BC4177B5AAA825E567CEC78167190DD7CEAA9BC80
48D4BFC9BF841C26718228250B4575BD9CFC41DC97B168E68E496ADB1E193095
05AC7B16C7D9F891AC0FDB06C043E7D42D635D7499922282FAC9D3B6E6FB90DC
35CCE2BA16227301AF27BE05F44E55A4C61D9D130D67C52E4A79454683DE7CDB
36D32345A656ABAF17CC32A2505931EE33DE8669AC6808DDADD81546A1138EB3
27E48B99644CB3AB96DCBA80FAE439EDDB2C499478E4D821DE2CD30A57BBA677
9228BFB5C58EE919F13E36168087D2FF16FAFCD5CBE38E2529CE5E4111CBB18F
63C0818AAA1242D33238C386CDCFB14DFD70D8686D21C30DCA29396DDA39B653
A6A8592D1C47F8C62189E64F5B4EC90F26933117280E45DF7CB1D7DD9318D8A4
C42A578DDC244728C4C8C2E7371A7CD6AE3A004F3E47E74F6ECA846C3FEC02FE
BFD48C42FFEA92F85275EEB6B8009190FC18DDE29B564EC87F86451A719320CB
86CB2A7BB8D81F57E18E24B46B1BA159088C762CBDFBC413E2375BB40795EAF8
463052C9F8AFA7A858464D1B60DC9064F6E29E94BB00F07FEAF2A8EA1E34B893
8673AADC8D7634695921E5E03E86979AAB5A999AE01B09D8F2FCA9679619F38F
639011507871F274D8759CF48032B782ED02FE9FB1CC3942E38F98AAF6C37CB0
60B500DCCDB516FA51C2E1947DC8D0A9609B54778A16353E6D53E22E775FAB16
707D0AAB47FDCCA67E697CD6B9948438EA346312B438CB333411E0A4C765C9EE
DA02C0CDFFC5078DE3A17DB31ADA422EBBB960CD5B21450056E2F32D4A709519
E11A09604F72ACDE9DDB1909AB8BEBB37A2EF7663B6F831CC7C5AFAFA64AE10D
257B261ADF079FFA2F853179CB199E9F655C362DB7CBF18868AB179FA4EF7B60
3843B664D48E47E6F3D9D9BA6B5BF2C9535C68450C000301E0D2D590374FE986
641C402D80ED6C4F764FD494282CFCB7E65F368504A07F323850E0DE4FDDD95B
A81EFD9090B0AE582DB07CBA8F8DF8FDDB9D97B4C7A541B512F3725945F258EE
BF9BA089F7320D1B9BA2A5EA0934928CD27E1D4C09C3B9946249AC6A12B09EE4
152888A522892E72A061F8E164CF8CA73CF0963B4F4491D2DEC5195ECD48A9C2
F1DC2D0CD71150D783219A4CA349650E801594F4F52EEEA30D08F2ACA6A61889
4E04B0A5EED027686D1CFAE07188C18435A2E7FF09707D1F5692E80FF3D12E37
3FAE31E3013D26A47533DF303147516304638D581A480B98E275DD28EBB7B1E5
DE784FABA9D90C0B31660ADDE7EF2F6619C9720195301F0CE2527C789B3E9DD0
2D8BF7063DA4CC8C202DE9D9AB2E3A97A8D115F8D4317705A52728FF4AD4C576
4594BDFD514C8A36404801613B95BF95701F8332E747068ABEDB143C12FCA2CE
7CFA0E4025B21D501BE9FB973EBDB79718A933D855A3A0783CF433913464CCE0
202E996BC289CF522B0CC5963D98FE32DC8F1AD4551B038237C9386A05D1B65C
18D4F1FA936AF7BDD4D24E83F6452B30A3A0AC8D40673536CD7C05687AB1D1C9
05D341631476CB264D8923DBB4C28468BBAD275063ACBA3F1CC7C41291F31A2E
18B611B6E3A403D4ED8ACE77A6FE90A1B68E35D8555FA076326B74B8C09F9EAD
2D20C471A416970443E67FB75A7C6C5F5C6D69212CA315416FF1216F6513C610
DBF48741CE134AB1742523FF3351F932B44BF7C36DA9D764E77F042CF5A4A4DC
AAA002818C1B54895A0B858A62583059405F768E4DF8EA697AA3E73AFC402499
AD29BB3329E2E30B34C61F53AAF8127B7E57729CEA550FA678D9BA116B92BA97
E9B874011ABA10ADD3C7C50FD02E71F0F57E906AE351E05AA40EF1F7DBD88EB0
9431954D2750A80C184FD97E48C13361CC7DF965D0C4992F25D51CEA9F5E0491
C32137F249C9C849C0C8E00A33A1AA635B4A48F1899471520CA82BAF2DA23C1B
59CD40C89D58DE46C14BE07E7381EDFC9409500A7F03D90EFC15F5F1DA609ADC
6D40E5C738EC85E5476FA451BBD96CEAED81BBAC83A5EA2D1D9E20B45E933888
5D1C592E3CBECE43E48A80A2FEB863FACFFBF72D209C1519C17AB6C8B042EB46
DB8FE97BE4C234A42916473A6647E08B5C48E92F77C08644FFBDA0FB747DE64E
0DBDB3A4DA26CC2BB8CB198DE62D4398A4832DB94EA50485280856933EC261C7
1C217CCE0336D1437C1E26BCF50748FD96DE7BF740D112CBB5BDA9A6687FD844
EABDE9CD62DD9122DF7DDAE31172331253DA64A26454C753A474D365E0FBB2E3
FBFC906456998D855277FE7293DE1BE650A04DF96A64EE751628F936EA8AE9DB
525FFF1D28B567FD4F9A773F0EC73AAD0EB7A4C9F2EBC48320268C639FBBB0C2
D4A1DEBA7C96F4C6EDF362B74DCDB0E629D4CC229679896FB540711BE8F67F75
FD514A9D69DD58A5EABB3D6A6DDFA13882E9CD1F4E25FE40B7FDCD8326092B06
320D14B86E61ECE72D7992DC7BC44F4811007D8A8FE097593EEC4A4E70005048
3727921273CB848ABFF6907EEB55530CD2CAA23509CA53D80160A83BD24D0D02
2311D1B1FB10205CFC019EDA82D3C6DB4741A9004DCA8084CB5D513D1D7AAF37
9EE15761247B12A28530BC2C3E30C485C91E9BB6FEE2809F2ACAFCC3FF217345
22B61CBC41705F8E4DD47FEEA4C6249FE44646B6D3B41844E158EA8D96C8A69A
3EA4019DA26935C6545713D87DE83FE96B34688836E5B956206DFF20B555B41D
431A4FFEEE8554E1B61C81BE88492183DDA0D2CA268EE793AFB7E124E2CCEE30
B2092B1F7BC1D56672F47A1793DBF60DB19F30B6E80B6225ECD2B95DB96781E5
0E7040658E24D2DAF6607D5810630FB7119E44DF8FAA935502F8767DD961C95F
01FCADE1AEA8B95549562CE367D96B03C002E1724D60BB93E8C38BB5E1AF3E19
30CBAE35D8B4D549B3BE700620E21EC165D8C3FC59C58B421429A8956DB3648A
F7E38F36BAEA071F3244E4988B8B393E631C19F170541CF87CE659B1CDD13F16
05DCF458827A9A9287E26C023FEB59598B73DC24262D80A1DDA139C70D8FAFAC
C360CB6A9128E6C79B2F15887C4387D4C4145C58539FB181327C336DCAC73483
E7D65AC6EE80F4464A86318CF1F33ADD86C94D4D37DCDAB951B6679D4A61435D
0C2FA42D3877FBC1822AC36B0411A7D511E553B35A71308B653031A13A13E551
066597D068F404ACCF3A65997F34926947ECDB30F6AFCF61F8CEC186F625B349
5FDBBFE7B99E674B9873D81462E2B9B943F9E0025B1D9FCC0EF02EA1D69CA37B
0FD3698092AB0ED28B023B61514C05E09CAF55F08D65A220672195958A8491E3
B44EA67234BEFFDD1519DB46016558B04D2BCD071FDD6EDC3D663EAA5778436D
1F37526A419E7D35C19747F80C5EFAED235B65BFB11D01F2FBBFA30284F9E4A4
09BB8F08948B756DF000C0ABA9C5A62BF519C3A910BFF652E06465474E7E7149
7DE7C832B102228D6BE457746719EC65C5001611367EE3568F06585C8AF817C1
4443CF350F45885B023A799DFEE66954FF7CFCCC8CEF70CDCE8419734B9378BA
3E6C773BBF261CAA8665D99166A857D86C4E617EE6FEC3ACECCA673C2F15064E
EFFC54EF4E669A3956932486F681FEF74D48E52C41C3F3581EA663C879B6C284
DA8FB762927E383322B517A3BCC53A2A5C696273002903C3A7CBC8B33E1CD86E
F1DBE2673EDB6CC99313B505E0167D24052ADA9807AFADE032CF20502F39068D
001D2AD98CD1D721324CFCEE92FFBB81287A3032A917B7BD39EA9F19870B30A7
23D3525D447C8CA2BC2DE476F3492852B7D676F3292D1CC9FD3AC54A10490D40
95865C34B906ECA69B9314EE06A732B3D511FC5BD2D63BE1F72650F9A037732A
AB06FF266CA5119DD7B540CD48EB7941CEC3FAFEDC6F67A016FA96E7E9901DEF
196AC42176D8F582BDE7D384085D98FE0B9BC3F6EF83A8497296CAB5AA555058
291433C3E1C22E6C008E427FB8AF38412DAF48F4AEF5535892C2501A81D94F69
0C3BE57141E000DB9CBDA42F00681AAC2766B8DAB1D9B69FC7EFE82D0B8B82C5
3ED4C1666967062EDF063615E7ED61920FC8E2EA2E88365A744848BC02183B19
C9975D6BA081EA3ADDD90356B8CA6A712D41A73C0B094FE5F99E1E66C9B2CE3D
718CB07AA77899611C3FDFC71B8D5E99EABFC806E6943A5075B1D45EE3FECEEB
06DADA3200415A23FEC37F3ED44BB89E9149A922983C2F70A1B9C6B1DFDC5D76
2439A77DDA72EBBD485F21DB9B96F5C1D45C3C6BD07597BFF40B0BC1DD4B0A91
AF1DBC0B7108EB8E63068F1B2024CD2AC983E68A5E864D1777729EC02594BBCD
DCA445D118DA815A175488D9E7013FADF3A959D030F03B5130120B105DC1EDCD
FDA335FCBBF1E05FF3E81BB15A5EB91DE07BAD71BC9ECA2440368C6F5EE88E25
F09FB6CE08D0F4E6449CA4BEABF48692ADD6C7C1669B1847289CD063DDD59304
9C1DFE685CA03810A7BAA992ABF5A126F326227FA22C1BC7D5BB0197D848181D
A713803E4BF5481FFEEE0E30A7446A9F1F46445A5F108D8B5C97B4280745E43D
88CE7E59B51B331BD934E3443CEC468F8A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBXSL10
%!PS-AdobeFont-1.0: CMBXSL10 003.002
%%Title: CMBXSL10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBXSL10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBXSL10 known{/CMBXSL10 findfont dup/UniqueID known{dup
/UniqueID get 5000770 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBXSL10 def
/FontBBox {-75 -250 1278 750 }readonly def
/UniqueID 5000770 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBXSL10.) readonly def
/FullName (CMBXSL10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle -9.46 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 67 /C put
dup 74 /J put
dup 75 /K put
dup 82 /R put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 104 /h put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1BA619611FE47D989A127
23FB8D3CE03AA31DE5B2AEA44CB0DBA4454FAA35FBF2CC78E7022A63E409C86F
82BBFDF42A3410D9F2C118CA6B8ED47BD5309A98237DBCCCCDBEF685978C7A4E
29096343C6B4B0A3EF314ED605DBA20120F7F91A600F218B048B1B45F9BF1787
47B825D2ECA3EF8014A30C1F1AE2177B9D1C2C00589036A95A3A14D167B3BD80
9B911E43B4BF9A5385C143465B5C29F98E8F72194A1805D0AE78C063493F1A61
B275BB4014B301A6F2165DA0E9873B001D58CCBE9553DC9D39CBB83D14C5F30F
7727F68B99C5EE4900833AEE4A5993A0FC2CF162B5D297C40FAB4F1A1757CA20
FEC9211AFA367CD1EA33E5F3A002FC752A820E72D0ECC92169D2CE3319BFF252
6D6B6DC1B38076C0D1BF0653177BF356845D99A092B380A6BE59FAD5097437B4
B2D77CA380BD52DA199B683F31344CF687BA469775C4D0505EAFABB09121C06A
0721D241F4C3B7B89E33AA7287D020AD5CF9DC48DBF61C3DB309779E2C012898
067760688150EEFEED80DF165963A8A7F414ED95C9CA299D8DB1BF3AD81D3272
96A04E03E47CAA94314F526F2639DBB65AB5B2E6E262101D62BE84A858A0E74D
4C9BE1073C6D026B05435D09090650452885D6A994574E9BFA7096A5C724BCF4
DA65A7C993A8E606F990E5603A301B0B34C01EF5F75B24E4B1BE3565296E3C11
01440E0F357D949E5F7746516FAF7D4A8154B8378E74E9B4A9D4AF724EE59167
1FB5EAF72B4734150B6098C155EB2D004CB8E6B9D6B044E912BB002520952E5B
76652357ABA15C52B1EF1D0EA822F5AF2FC01332544D31C304B99A7EC07EB5B5
A6734B6F394DC9FAB93957806E89C83607B6C5D99C7EC7D259545AC5B5B45998
B1195203A9B57818BD94D27E435D22890EB9E98E94E9B4E85091B6D9A048AE56
C79199A418D4A4B54A3B49E3715D13867BB80226DC475F2B9D453CE2803F317F
212BF8EADA6D9533C5ED69532EED1BA6E0265689DE59548EDD71E868A90D32B1
6203C7A485E7395FCA25862CDC41FC95D2937902FB7B0E57F28514AA41812349
4D46E5454E3D0F76F1F8799751C9D2A40619862491179B6EC48928A6CC7BF686
4A6A352C5075199AD244C84B0CD88E0B3E3C06CF7F3E3FBB1652B20E86FD777C
0F5181A84E06C20699514A10399ED4C74EDC08DFFA4BA4AD034FE30242D7A13F
6B28038CBDEA1B237611941D4D74662358DC81C5F09E90B19B9BB90646A5CD84
7CEE1A0498B4EF9E2981EC93BA22349D02D5515D6D522261FB1FD1F4AC54DDC5
B3CE6AEEAD7FA3939606065D026065DEBE96A67D52BCEADA5FFC0105290F1E65
E9F58249CE6A4D8B43F2750ED8FB171E5367A0ADA62D519E45FFEFF2F7C972AC
CE8EA90398A3CC0FDE8E1E6D61550969CEA4E098BACFC432C6586E260A8A7340
A42AD4D48C268B00C537E0CDD1AAD0DAF25C0C1ECFD95D8AC93DF2DECE8B163A
970E969BD0D459A7FC0CE22EDCFCDEEEB2A6AB796BF4C6B3A3A1FA7F1CEAC940
3770E3101DDCA2774CE6402F25736AA8594F3EF46A1C8641FC853094B8B6361A
B5DEC0C11A7CD0A9098BCD6757AE5C0BCABDF0A563516F54C844E9A8CAEB7E3A
1A857CCD94CAAD638A24AADBB6914B7A6777F03F38416DE2251A301939D0197B
710B71A954FEE67A337BD9FFD1E24C93BD05D135C91F655B13C0281EF1CABB88
350856AF15671CA42F9CC2CEDBF44E16201158DD9591379F957B8B5E0619BF0A
2F1217E3CD6DBAC23EDDD083D3561778ADB6B3B41A5483F9B14AB9F1E842F3CA
FB07530D50EEA00D145E8DF3594306E6F3F15DAAE11160228A72C0212B0AB34A
5A023221E587663C5F57EE8C07E7C3856F18CB5068A99DEAAFF38F3219E66353
CCF06B5B8C7BAB0DE9F6D34920ECD903B6F29F55E243FB03A9010A1EE0AAE80B
544CEB34E2CD33958763BD1AA4CA3FBC1A8E142AC1778C1FB5E1A0ADE4C85FC0
577F95315BBF93AFDEEC87B6ACF04993BA0C6F4C2F41D3C275CA5301B9BBCD53
6DF5F04D3D274E585AFA5DF0AB12275200C3243C68338DBC6D602D917691D5BA
66EA6E0935F983C17878C5BE7863E43ED5A6381E4497C232206A874988050530
13582874DE50002AABA8F4668FEE41606A1F55951F1C73EB24CBAA10023A0594
2B047FA36655C3419BB37D85E77DD7C20DE940B0F3CDF30ED7C673679423CBA4
3DAAFC4007418D97EA06548F1C828FAB2EE4A82FEF9C134E1FE4529CB285FE76
513F6CAAC29098175B3576B61FA11C0336C7C9124BD7EC4657C740B4E3B7699A
C3E34064F16A1CC95DEF76BF18E59C83275F7B3A9BC29C0D5A58030753CA9085
2D80186F7A4297E9C8A247460BAB02AAE954C4F3BA93E9CB0331C01BB5F6233D
D7C16E466A9E47B9F885D90DA5902CF732798999032FD981B40DB8E0EF5003B6
C65A1E7C582B1DD0371B4CA5B83085A8998987780DC5374F7EE2950241A1A949
28723C54FF45FABBA03A96535C1418D435E21E037B512AF0230B43E7B08E9D4A
3880D36694D69E4ABDB743DFF2AC7E0BECCBA723F1BD97A7BD0F15F529A25F5A
EC4CB3BA061ECFFD5F3B24BF47C0E5EB6DD00C3719834B39139264B015956DD4
065DA2C0083EAE5AC3266E43AAA9EC138303EDBE89047AC1C195B5D2BA2BD941
79675752B9C38193AAC08D6A77FBE6AD78E30DF4FB0750411678A09CC4200DB2
998EF9C1C0ED0DF84333F17D137A2EA91A6CA839E4424E16924120FA88FC3872
D047D33C96C5E86C1AA3CF2C4E5A19DAF637CBAC603FBBE081AA75C450D0C046
90BC2073BAF3F80FA5BC75899F816F10D4064F2EEF6F93A14376BB0B8DE9F1ED
35DAFFCEFEE32B6C5F2B5662DE55DA71C09913F807E56C7245D2CFB98905FF46
FE06EC6F67875F0BF76FB657C1EBCF3B103461073C013CB1C542713051451686
5552DEAE78E2AB2D755666DCFD303C99317FC15BAA0BC10F73275663D2F809ED
4DDB1B2411B04CDFA157D97CAD68A1E8B8E3CCB65A716C6FCB1058069D2A4DB2
ED0C0DFB0D289F9C317AC3D26BAB2D27B63A2174375C925D07F545D72617746E
16075887DFDA21E607DD0B95F106A9D71AAC44C329A8ED819BA14531D1B1AEFD
1DAE19FD47166DC04CC43AD5860EDD0C1AECA5244421584C7C7B15062D18B72C
3346EB569B01712286C1CA7457E60F226CB76F1A84778E5330D1E655010EB1E4
91DC41B7929C00FF8D6ABF9128CCCE14FEA601D7F38B5ADE44B54BFFE55DFA69
1FDA161B827DCA1F776A70B0C261C9941411FF495E9C6763F36E5930209CF748
3006886740734794F7C34916F5AA57AA52E695AD2B6E8F298DBFD1E6FC18B43B
D83EBCA758026B807835A38F67B7CA00F98C9DEDD806FB199384BB9C398564BB
FD96D5216D7DA3AAAAD9E4861197A8F5B845AF73107DF2B2BFB5995F5D37F315
0F8D57F5B19F4808BDD5149D4BE130635CC1883B9386BDB72BBD4E443C0C58C6
7198B76A1C3DA1F1EA89D2EC03E51A1062B02D759782BBF14DC2D3576D195B7E
7D3219497DB5157B9ACD5C2F679DBB1B78C5C4AE62AA0DF53D460EB26942666E
3E352E3979AB565D0FB7858AE92AD9EFEF93C1EE625A86B3DE0A6987C57584C4
96C70AEC1F756AB06377C0670719F69E8E6F6049445FA455979A9DB932D8E3F9
CF497FE6FEB2B11760E1E3C4EC413CD7AC258DE320395187E169983EE3D70ADB
3D537EE8DE003E82EBC1796B32F4EF3FE44F1A525A12EFB424306BA94C86CBD7
C54625B34D2843367826C9442C4C3BFB2D0704ED0A2EF39E5239B69CCB634232
0DC447796AA45B3EF93FDD1B01CCD4165D6445DB7FF83912E7658FDC2C94067E
14DBCEDA6BC17CB328EF6C6D14412B3247FF398A28D562B12C8CE9C2CC0A3CEE
EE82F5AEBAA2A5A9788A7D6989E168E0D09EECB9F600F76B8D8E3552106C521F
181DE503B54FF37EFD9DCF28AC8E78E910EE07388FF83134C1A1FD42E1A9B363
55BFF2C2AF9E370952B83E851E61F1115A383B07B3CFCBA2179553C4D4CC39EC
34E794DD86C88309A73844F30766EF81ADF312E8635DE363FA6DA144BDC46ADB
5520643EABD269D11D855B6182B22322855654A96593E06569C2738FBED3D121
A69637EA4D9B7CA7FBCCB602071757763960F553FEC7301CB8DFDCAAB337ED9A
28B87793420921CE113A6A7527575600948E79659B6C462F31F9E357DC9CD171
604B019484607482111986F445D2F27FA7C5236F11B441115A612CF9D8CAA0B8
FB5B55105D4508F04DFCC322FD1D757B85208D8E61A9BF129FC6C0A21F95D255
B7BCA9B3D1EB5C8CE770E994ECDEF86B1BB748EDB28BBCA513D356F09B05B1C7
4DC4AEF1C3195667D0CB049D9DB6021B37C71E17EF1AAECF7D363726AF7CE2CB
5A9EDAC73FAEEDD92245237B30A41713A3C4C529A0637444E1964D42DB1771C0
C919AD6CF1F53CC676B875B5108EAF8DF7E1DCD276BF66E5A1FC86C20A98E416
E76D9A1406329F4B87D98D0CD723AF857544EDADD685D5DAEE7E9ED34B2BEDE0
412CD3F767784112E6FAA1D37E0DB11C8ADE8264C72AE2AFDA288B5F459F03E2
E6E304B7F802F0CE74DF546E23FCDF5D2DEF6C71677A92DDB72E9EC147232DCD
74258408AD2C500BFED63C9C11C7BCFE269717108EF28632EAEB3C491FFF6FD4
232C44B6D460AC5B98CDD11A803A60D5171D15EFDD5D6493B4310DE1658F63B8
653C266367CF559737D1144A3B7FF678EFC2AE92F007041C84F3B83F06C419B3
DE9A46CD81E79F58EDEEAEFEBE0B4286E16DB4220896313ADB393D108EB7A801
F4C1AA72E692723894F8297E5F7F2C243A39C86A17141D49ABC74CCF39B5BB14
521484D6650D966E07BA302DB3FACB3B3CDF0FB8E462133A100343D2BFDF0917
089E15B3F816FE265305E7BC74E5C42880D07AC427FCDE3A97D9EA708B8CDC47
E3273D36ADD09D918C67863636F7691AEE8124277370E2C978B28875B3331EB7
3EC09FBAD0B580CCB0ECE516632AFCDDBEC0D5FB07C6A0FA8C9A575CE6A35F0C
D5909BDEBB85588F39872B83604384359C53F8834CF023C4E5D0369F7C750DA3
6CA9A630C585983E6F34D0D5DD525C150435886CFD6EFA24E2E11743205D19FF
894ADEB319330567D4446F5A57A65E5CD1BFDE88B1607DCFD4434C4060177909
D5B237182A9F5222C6E703E7466081109F174FCD114178AAC5ECDDE219E2CC51
13BCD8346390B298214B0A71802051E1FB0D7D4FB99449091A543B2AFCCC221F
933480C39BAC30809A01BDE3BD8F5C807F2C04397EF137B2356E862D87FF9999
6091AB1207AA093DB743E8B71AF23E4AA4A1667FCBACEC07CC0DC7F20CF37264
BD54315960B5DF38077F91E483BE83A5F5A12B05439134AC7F67E0E1A1F2AFD1
7564C21BD5F263CE9488D335A6F00B2806077327FEAAAA246F136E26FACF6DAB
78C542E0D16931870AF95D962153B335747B32E46C890C1327C8E01140005A30
14D736D4338EAD5B3CE7760B0008C418C80508C44B9E5E8B58B6B770CFBD7AFF
85631CCA1EACB7836580F3D889D9055FF808F29CEF9EBFF7FF904F89D6655DD9
A7097E2A27C19A0C47E710FE7143A2EE1E642DA6AF5606305C2ABCA4DB9AE966
057C124757B094B5B1226702B1A7FA4F082F8F1BBF841ABBC29F760ED72E0474
6EC76895D4D5D78D2E09B73E0B6CAD2CBF7B2583C1B6AED6B208DD582795177D
F4976908582A253CE329AF84DB80D2DDB23C02C659F99C0BD70849B40C4BEE2C
41C3118E5444CBE7DE1E57DA268C9C6E0DA8F2FC33D7193F0F4ECB83DFBB9BEC
8D0098C10134FC5C2700A90A9F0707AD75762FB063F620B691C478FF88F78B48
6E7FA772C06E3F86B94555D981ED92FDF2AB8DF1B9C1F9ACA180098D876E0B5A
1F44D53A4341AD0C3C0837B8A595932EFBECEBA6BDEFFBEE967E474E173F9990
71689C1A7E23255D793557A022726053B5BDBC9C333926D714FF8D6261E492DF
9C905DD66DD1B7E17E714A44C1E073DEADF6A250B765872BF96E047B297580C2
7AD1714D8A2CE93346D0A972CBA8BAE026BC1646F8FED5C9A3366E73A2A65FE7
FBED4A8447BA4CEF3F25E20EEC13F5448DAB2B1768BE14A2F1FE90117079DE58
883A86E7759A3F8723901E70ED76DFDAB6DB2A2597F3CDED02E1418E33EF2FC5
EB86072BA97DB0B4A87BF21354EB8FA680BD07FBAFCF8CB2FA44A9BAD1EC8D56
92B12A0390E550E272449546A95AEA075538359DF87234050BF5B6FA86634E62
8DCE90F5947772B834D3DCB5BBFEF9F5FACCAC5EA302813FA76A0C7E8D4A6904
110E7D164FDDA1F2F9E867052945E5697F3E7B3F3E44A159FDBB940D942C4352
0B6760DAD2D26E5568604EAF88278A7842315D062BC8B723D19B35D5913264C3
313D68F88A1F063D0C1B5D51296C7C2878C5A016C6ADB672F6148EA484B43564
7794900EFC313CA6FB90D3165695C194440F715875B1817B511A9255D75A7EC5
343BAF3115503E2B7B7550688CAA306B175B35F1A17D821F4168E5F8CAA50058
E5700ECA8751C8446A91C1EF58E6D8DE3DC3D7F89FACF39E5063C470F80C7D74
0FC48D67A51EB34ADB4BF49F04166E3C8CC5EDBA32684D760CF5DE8E3B15FB7C
922BB6866719F75F5E4B35FE0BCFC50117E820A707A9D45377BCBB9B5057C58D
4D9ED248BECB7D749CEAA982166F4E8FB3617654D46DA66F2766FFD0404ADC34
8BBE5CB78623985F7BFE0B05C802F028D9F4A944F3077E85EB1E953656F07BE4
0F600F17273A582064E98C77B6ED4F49B086E2E83E8E7DBE8CD9DA174B491718
22CA13ECD8ED6CADAD41E56BAE142C7EA81CE7041B17CE25ECC4E7B836A6D283
1DA602B8E74347810EE746CFF2019AC296C137E34D2078D6CD89D12714FA8056
C200294B7D43A678EEC4B09C0DFBEBC9899763B21F281A278D4A67701DB89D78
6ACABDE84A78A9647F68CA1F1D96237BA5496E840C270C2DC9320668EB83864C
340DC520D9DE1F6C6035EFD0273406A14DBA72D0D484CF006F559C114020ACA0
BC9E1822EFDFEC07866913956D0BF90C5B0F96B6C17799153E59603FB415CBAC
3AAD5512EDA753DE8EA7B4FFE9135A8C70416899F5B6D1765B03ACAC1F8F970B
F2D937AE6BCB694DBD3DF0DB2B53FCFDB8EEDFBC7BB80246F7173B3193C0FD9B
B5C1F2C3B3A9AA1B4EA166322660DD848C4922FA4FEE272BA1AE64BEEEB19CC8
75B268712AFF8D4F245C2F081EDE4E619321F341B217198E7A7B6B39B5A13807
CB970AD03277FDBDBF29235C600E20CCD4D4153A4601248829F857509717222C
2C9535E05DEBDEDE4DADE6DDCB343C2E715573B2182AF3875528120B42DFDA77
3CED4E091F4E99FC1C8F33832569ADB8233C781B31FF37868723D053307300F1
E113E908473FBE39ED75A931C290E7EFAF4C89D4CD22F63852EC30831D61D1DE
3815A6D18FBCD15F28EEA75AE50BD0B237E8CB0870CAC5DDC13DA58DBD060D31
93FC92E6C4CEF3BCFD81CE6B3679BFC5855796CDFA8A26D63A659A2FF7A1A7E3
18A7F76FF80E846A2D647D38E827FFAF54BD5A9221EEB416A475EABF4EF0409B
1CA55A851C245BF7207AA563AC26D4A6704EBCBE96D74CD377454EFEC21F1B21
DAB103778EB687FE78363891EBE1950C13B31CB7B479C4A853CAD2A1D8712BC2
B1B314822712AE69CBA9DC280B3C3FBAA0F80687D6383CA5789537FD7B85CE2F
E02D8A3FA89D5E2B938ED8DA31BAEEBE739FFA32545089856E54B3031AA91694
E5C1EA3D874518B9852E4DD80EB3F4E490CCF8636921076B3FE511B0E3121D97
67B56994D57D8EBC8F15FC6D88D94B5C171A294A2A8C26324832795536528326
D89BCEFBFD625B734840AB8E4B4F0BD38498DA02F6961BFF95EF53C7747CFD61
EFD84E22F2DFF3BFF771183B302FF5DD069C53CE8988929FD5690F66986CBAA8
6A909DDD600EB57A295F76DC10DC0AF2EE31FB1205CA35E62925CC12F1B5D04F
A90E615D06A805EF2EA704243FB382621C03FF1DD18800B7E40E16407433FC9A
216DC7AFCE1C5C7B34B08DEA1708E447E0C557FAD8D550A1F61EDF7592EF1042
21F47D4750A55010A3B7A1F81FEF19B9EFE25CCC0F5FAA2A26E4066534FECE07
33F2CF67153F6BCCAA27D7B0664C33BBC4563825B3B11688B2C88E72133AADF0
D5BD0FCFCD3DF65CD95786A533A3F853168FBFD948093E2BD0287A3C313E9F51
13C3B60CB974E2ADDB60C656D51B897C5D9EE8EFC505738B7ACCDCA473D16BC0
E014A39E0EF4D2F696895B56FDA5307BA580316C26CAE5676F5FEC5AD00C0BB3
4BF5FE2701E66EA56A90D00E66F20E836DBD4BD5E3FECFA7BEC6245AE15CEC2E
2E4D5A36D194BB725DC6A9FD242594B3A3E057D4D17D2F2223787A153831D773
42899EBEF67E7CE05AB9DDF931FD05B5BC1E775BF71A3E1BDCFFC9E1C3162E4C
B5E6E3896FE8DFD51CB3231E6656B0668F6DF8363610442C4B1798E9C714FF36
5C101EFFCF996D53055DEE3934AB8043AD75C495E0166AE59D4A8F9701A449DF
4655802BC399C3238D7EB320BF1BB4896315C1C0205263923353A3C66B0100F0
165A9754D05E6BCC147F25F547E9ED8723F9B862B9B49500D2B1EA3B997085CD
AFF505D3DE7F1123961217480C6E4AA1204353EE8E0AEA0F58453DA07A44318D
8748B88E3A4F22573F8ABAE940DF17BBD56EE45F92EC62E5E2691212AD246306
222EDF818F8B06C5EF02517E675276F7AB7877B2085280F99595AF8449044214
E423613F0684994C4D2F630955519509EFDF2D587382FC6C4A8BA1BA97B2FFEB
1A6C1D057A8F9E90A00C23664E4C2540FFB8F037262EFA1217EA892982E3A3DA
B425B65C4159DD58D249D57056F5D459C670CD83451DBBBB2DA95CB8A3A1870E
5D0D295101AA8247D01252C7246D36E8BA1D64C77A07E3134150E1994450E945
5D21DA52742121C7730C379CEFD681B9DB013C054FB30D3DB58EDB880DCF90BC
CF891A68A2F032749BD80F3564AC04049824826C952B4C479386DCB313321F26
6BF54EEAC84BA8134181A5164650548935854A27DE62A6306FC293212C80FE66
F338A038F961B26BF6B2BC633C15424AFB8045527D3DCAC0285EB792520BBBD2
D4A34A86D80F04F43A79468B8A6E535E0290AA07CC000C9E10CDCA827382165E
A449C15523E53D93E34C5B064B7C36CDC0E342D3F2F8D8FC4782D9F7D8B839D9
C17F8AFC7DE029CA650385A943043493EE9DDA7024709275C207FD9CE16A1B31
575FDDCBF469888A0BB71A34281D2C5D52A08450BD276725D341C4E6DAFCE08A
19352801F1DC662404F1E84D254DB159CA1692CA0E863843B1DCCE4CFBCF9F2E
299CA0E9AF9082AB9D5620F5002D598AFF2C7EAED384BD67521B9D466B15CB81
7468C839AB3943D60F6AD6A8601495DF8D16299046BB88521D9176159F9258C3
1DD8A55D83CA3FB093BC52844696766C10F0C53713B195C41C077D7EC9643952
234583B54B0E849352BE4E5B232C7CBC667C0E24A17D6F00F4ACE07E502852C7
6043E1C7240382F946AE271F8B6A4C48FA0D341C9BBF6400101820BDA78BC2EA
E54D4B6DED26FCEAB191B7F6E3026545A040E15D7882ECCF781AD2D0A16FDC0C
CEF7B1BE7201CDE812C524567283F7B31E3090DF18CAB0CA9CDA9E5CF3DC47D8
FC0126F16821BE8ABB335E8574175EBE3B8AF169694C9DA7A87B2BB4F361669F
A26E0BF0D937535EF1D1055ED8D23A159A051F5A3BA4937020998211E7247EAD
FA37ACC21CE90AB97307F5CBBAA7D982D5DCA49D0387353CC35EDAE316116A80
DDEDD293B1B2DCF6C3A719537C1B93D56E752D5A84BC81D3DE3CD424E81D7A2A
2815285180E4195EE415AFAD7EAC9DD1916E3FACD252142A91A85A4A3DCFCA54
AE1EBEDF0C640F5FC4397EBC6057DE5DB24925F700B166478E468098B47950A4
ABB2D14EFDBC3CEDD870B41B5D82D02D0ECDDFA2C48370CEFDEC26EDC4A2FD42
15EF05B2173B33C154F11DA8A0E57D2356116AAB5689FE615D2EAF186CAE9849
8F384FCF6E4FEE4FA71C68E728A0656E606B54BD74AF28212C497798DCA362B9
D3A1F964A04776F70BDD9C6CED770BEE8179F6332064671A7CB283667B3C296C
9C55DC7322936BA9BD735842D877B74657D5CB7778136015FBC4EE608D5E8393
B0732D2EAEEEDFF4260561A0BE6FAA07B34A62367BCFF6E5A241753425831F31
F7D90E8AC3808A2A2256E5CAEB43FAD2234C4D8DC3C7AD59249278CBB64DFE3D
46533116AE6F913D8E311D66AE80BEF6300B60CCC25615BF52FD453207218F2B
3C7BBD38165E71842D18F206F4201F125C2F6893BED339A7463BFBAA82700901
065B8148765D77F2E3C4B1F1507EE2340127480ACD4B418A201257A97E7E0424
83154ECCCC3355017FEFFD14BA0B5EAF2A52BADEE351D0A3FD5B2A1C3AC64C12
6D73BF5DD4E97C704F540568AA8E6E943A59E1C505C53F9D608393EC06AB164A
908C464389D943EB4315F237E901FDE7C46FEDB1F88CF78FE242A04EA8491DC9
5FBB61218034C7214600B5785127982D81BE6E5E8D759F2478B3EB9BF9231166
FE0A9C9B1D087324813323E53E2D3B73A6EC733C91DC96ED74D7D2DA8E734EAF
39B067F71A5CEBE0A21591D96243CBBE846CA5843916A13C82B12AE8FF399442
97C26FE58DC870F33F1DC2E3D875703CA4AE2695C010291290CB0E69C7119B9D
F6E2294ED430DB6AEE84AC01A62CE227164153490C46AF6FE77CE8F363C7DBBD
43D94DB7F1295F3CDADC5C5D722A217BD6ACA435D761069404D2827991E3E837
8827E992E86FE6173A3A73744C49C350C448386433380269F2DE963951E1FE23
32ECBD08A8C24FAB447D8DEDC61610768737F2CD354ACE5EFE1FE0D20161C787
5A72A280E5D8288BD57DC3CC3CA54DA0A97D47AE81B548C2857AE325FFDDEE95
9D6956C03DAC2A0356FBAC4585567C7770CF606D377EDBF26160DFD4E887F4AE
BA91BF4A67DDA7027E66038BE0404D5D48E9F69E34F9BE83EC6F909B4FB83688
747998DC56BFA69654D570FFBEACADF4491AF8E69D0C653BB13FFB57E1E1A273
E51B44FB45CF8DAEA662A8034F59F558422F38E00BF2E3EFBF8D8E5199A7D233
583706556DB2F9B3AB2ED24FDAB28F9BABF2D64F061E19A43F505AF2DDD935AB
117F22394D4AD810C636144B9DAD6EEF59FD95DCC5E18B031BD0F8994D27A6C4
8D77F2392BE80EEF766BF15A99571D0FFE4C7AD90EAB0D27391C24EBBF3198F1
F816E05A4DF445A6B369316CE51DC4E5194DD6DBE54B5636EE787294387099DB
7C37C808F0DC632A172EBC3726D32FAF5C65DDABCD3BE477DB0944D27B2F4801
37213EDCE740498CCBDDBCAC3227C577727D68DB73FE81FA688FA2829B66CC28
51A2D328502F0509D385DD66F2D72AF82E418E84FF7290AA657C2B6D09A93AFF
3F796E9B3098CB0510D26B578F7978D95460DA778FE5DEF3FF87035D76BCDFC2
E018B9605A5F125C46EEE70C0BC64BAAF77CB0A80C9B59A56B57B4F58434AFDC
AA709E0EE0BF662A404B76C9F2A4DD95316C4B78262D22A449F5FDCA24E9FA52
5589D25A780835960439CE4F89DC869A300C6CB74EF782DC0389925CAEFE51B5
C80B766236BFBE8248D9C67B4F9E8DDACF23815911BCFB77D1A7BCE01E240ED0
28DF288D5B3F95F9CAADA95A1F07DEAEA22FC06C4C6590D20B3A3ADDD9D5B78D
F27981381837596901BF19D1A3383503D5A5E8D8907DFE4B3BC7AFB408D032C0
68BEC1F1BCC3618EB165AD31AB336035BD4AF0064C535F6C0BD36F496F190583
30B904C69BF91D3DEF230BAF0047B572126BF5CC274F3C481BEAB54023EDD97C
82C80AC223D5C80DF82DD5DA4E371F9B38DA2A8773049987555716B01F47FBED
9FCC8FD6098B2EF469B731BBA8237ADD8F14E244070A8A921E52FD38639E9816
AAECD3404A4F7359D0DBE10DB500EA7D146D4C933678DC58226BD68916824CD4
31C1DE98E90B6AC53D92A300912D8176F4760E43CE6C8F04A0B7478E5351D914
CAAA189AABE26D91D7DF1F1B96A9267A6417AFC2C46EB5563EF561E50E93F8C4
F54DF378A16E035DCF25D2D5B63BAB317F73196753CF37EC3C526BA504546FD8
60023FE44B58D3BB574481B02EA85066F8945CFD829F1C15B37ED393491A63D3
501E0A74C65A01FF8C0272CEA0F091F47F9275FB64CDBAF67C18608715522C18
AEFA86EC9D46EBEE7C96F47368961BDA3CDB78AED53F9816AC24DD8065328ABA
0A88EAC7A14D1639F5E3D5FBD86E2D1DF53EE1006BDE8E5409FFCB581B94AC0A
1E403DFA75804B355E4308F5EDA2E9AADBDC8D163FCC51156AD7656CAED508BD
3664EAABADB5211CF6C43FDD92FC4A42F9662C67B1AA433998908AEC60CA7F66
2A15B0F962AA25D8832FEE527DE779230E81033CEA947A861EAEFB2D31D0AEDB
A8BED8300AFE06C314950E7F741E513358EF5B06F10058FBB011EDFDE392D3AC
A420DF328C79FB6BBC46328A0F4114BA0E1FD2DD746B1DC6F2434C083DDA8880
F78371A04B2624925C57C4562322F915E96915AAC947B29CE5EDE78BEFFBF579
3FD09F3CB39D65B74E453D82F27B49388E582DCB122B5FB621F05C06F44D8D4A
EC1DFE5D828143D37D8F7BE61C4544411FF1F54BAA934722ED0FA5435F570A1D
72591094EC0E0D8A70AE73D1EF47ACC9FAC644DAE5925455ACFB45CAE644ED7C
1A8ADCE923E8C40DF6EE70A9FF468FEDE27362B7AA7CAF89948398C05A83D13E
E6CFCF07321F82C95E1859D35273CB2FCCF281601BF443376DF34DA87265C5FE
24BAF7AEB1E1AF63AEE1B409E366749C56918F8C97D0DC6A8450C8AC2A6272C2
A4113194475DB712C28F0B1AD46AC1D8D5E760F69BEC49BDA7CE440CE8A6D028
0070FA3F449286309A0D86B2FBD1B328060AF0F06B83759912AA978ACA32EE9E
12F58C8D3BAB9845354DFCA1758EEC8B3AA794BC8B56CA42FD9837506BD374A6
3FB8E695D84DA3FCB084BCC1213EA9FAC44CB4788376215755FB79DB76342868
5DA95DF234AEAD16BAEFBAB9B23FE3D484D9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (poster.dvi)
@start /Fa 134[95 95 141 1[107 75 79 71 107 107 103 107
164 49 101 1[49 107 103 63 92 107 92 1[99 9[195 2[141
3[132 1[146 181 112 6[123 1[132 1[138 6[57 3[103 2[103
103 1[103 2[69 57 44[{}38 206.559 /CMSSI10 rf /Fb 132[103
92 109 109 149 109 115 80 81 81 1[115 103 115 172 57
2[57 115 103 63 92 115 92 115 103 3[57 1[57 3[212 155
1[149 115 152 3[155 189 1[161 106 75 1[162 135 141 158
149 146 155 6[57 2[103 103 103 103 103 103 103 103 1[57
69 57 31[115 12[{}56 206.559 /CMR10 rf /Fc 193[193 3[69
58[{}2 247.904 /CMMI10 rf /Fd 134[108 1[108 108 108 108
108 2[108 1[108 4[108 108 2[108 108 2[108 33[108 108
3[108 10[108 108 46[{}18 206.559 /CMTT10 rf /Fe 138[128
90 95 85 2[124 5[59 2[76 110 101[{}8 247.904 /CMSS10
rf /Ff 134[114 114 169 114 128 90 95 85 128 128 124 128
197 59 121 1[59 128 124 76 110 128 110 128 119 69 8[234
2[169 138 160 3[176 8[148 19[124 2[69 83 5[69 39[{}35
247.904 /CMSSI10 rf /Fg 240[124 15[{}1 247.904 /CMSY10
rf /Fh 205[86 86 49[{}2 172.188 /CMR10 rf /Fi 137[130
1[130 1[130 1[130 130 2[130 2[130 3[130 1[130 130 130
10[130 5[130 1[130 10[130 130 130 65[{}17 247.904 /CMTT10
rf /Fj 134[152 152 1[152 3[149 1[138 158 152 185 127
4[159 133 138 155 147 1[152 12[195 1[198 12[184 69[{}18
247.904 /CMCSC10 rf /Fk 133[110 131 131 179 131 138 96
98 97 131 138 124 138 207 69 131 76 69 138 124 76 110
138 110 138 124 3[69 1[69 3[255 186 1[179 138 182 1[169
193 186 227 2[127 90 186 1[162 169 189 179 176 186 1[117
4[69 124 124 124 124 124 124 124 124 124 124 1[69 83
69 1[124 96 96 2[207 23[138 138 12[{}67 247.904 /CMR10
rf /Fl 134[150 150 206 150 158 111 112 117 1[158 143
158 238 79 2[79 158 143 87 131 158 127 158 139 9[295
2[198 6[271 5[224 1[187 3[216 15[143 2[79 95 79 2[111
111 25[238 14[{}35 247.904 /CMBX10 rf /Fm 137[260 274
192 194 203 1[274 246 274 411 137 260 1[137 2[151 226
274 219 1[239 9[509 4[369 370 7[187 2[310 1[378 356 67[{}24
428.394 /CMBX10 rf /Fn 134[181 1[247 181 190 133 135
141 1[190 171 190 285 95 2[95 190 171 105 157 190 152
190 166 9[354 259 1[238 3[234 257 7[269 3[247 17[171
2[95 114 45[{}31 297.468 /CMBX10 rf /Fo 130[187 1[187
1[187 3[187 187 187 5[187 1[187 187 187 3[187 187 2[187
32[187 6[187 3[187 1[187 2[187 1[187 1[187 44[{}20 356.995
/CMTT10 rf /Fp 138[274 192 194 203 2[246 274 411 137
3[274 1[151 226 274 2[239 14[369 6[386 255 6[356 20[137
46[{}18 428.394 /CMBXSL10 rf /Fq 134[363 3[382 267 271
283 2[344 382 573 191 2[191 1[344 210 315 1[306 382 334
10[520 529 4[470 1[538 10[496 21[229 45[{}22 597.758
/CMBX10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
20003 1981 a
 currentpoint currentpoint translate 1.49728 1.49728 scale neg exch
neg exch translate
 20003 1981 a @beginspecial 0 @llx 0 @lly
529 @urx 106 @ury 5290 @rwi @setspecial
%%BeginDocument: usyd.eps
%!PS-Adobe-3.1 EPSF-3.0
%%Title: Col_Landscape(outline) [Convert
%%Creator: Adobe Illustrator(R) 11
%%AI8_CreatorVersion: 11.0.0
%AI9_PrintingDataBegin
%%For: roberth
%%CreationDate: 20/6/05
%%BoundingBox: 0 0 529 106
%%HiResBoundingBox: 0 0 528.4043 105.9014
%%CropBox: 0 0 528.4043 105.9014
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)
%%+ procset Adobe_CoolType_Core (2.23 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (BLUE 072)
%%+ (PANTONE 124)
%%+ (PANTONE 186)
%%CMYKCustomColor: 1 0.7900 0 0 (BLUE 072)
%%+ 0 0.2750 1 0.0600 (PANTONE 124)
%%+ 0 0.9100 0.6600 0.0600 (PANTONE 186)
%%RGBCustomColor: 
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 68 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/agm_sethalftone
{ 
	dup
	begin
		/_Data load
		/Thresholds xdf
	end
	level3 
	{ sethalftone }{
		dup /HalftoneType get 3 eq {
			sethalftone
		} {pop} ifelse
	}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ imageDict begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height { 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 
	dup type /dicttype eq
		{
			AGMCORE_tmp
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			AGMCORE_tmp exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	AGMCORE_tmp 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		/CSD known
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 216 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_gradientcache 32 dict def
/AGMCORE_in_pattern false def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/add_grad
{
	AGMCORE_gradientcache 3 1 roll put
}bdf
/exec_grad
{
	AGMCORE_gradientcache exch get exec
}bdf
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&usrshfill /shfill load def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not currentpagedevice/OverrideSeparations known and
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		/AGMCORE_IsSeparationAProcessColor
			{
			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				gsave
				false setoverprint
				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
				currentgray 0 eq 
				grestore
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				clonedict
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					currentdict end
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 xpt
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 xpt
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/currentpagedevice currentpagedevice def
/getrampcolor {
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
ColorSpaceFamily /Separation eq
	{
	sep
	}
	{
	ColorSpaceFamily /DeviceN eq
		{
		devn
		}
		{
		setcolor
		}ifelse
	}ifelse
} bind def
/sssetbackground { aload pop setcolor } bind def
/RadialShade {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bind def
/GenStrips {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bind def
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		6 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get 0 get null eq {
					dup /Names get names_index get /name xdf
					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
					or or or not {
						/AliasedColorants false def
						exit
					} if
				} if
			} for
			AliasedColorants {
				dup begin
				/Names new_names def
				/AliasedColorants true def
				/LookupTables new_LookupTables def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				currentdict /NComponents known not {
					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			Names {
				AvoidAliasedColorants {
					/currentspotalias current_spot_alias def
					false set_spot_alias
				} if
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				AvoidAliasedColorants {
					currentspotalias set_spot_alias
				} if
				/names_index names_index 1 add def
			} forall
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				/setcolor ldf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSD known {
			CSD get_csd /Names known {
				CSD get_csd begin
				currentdict devncs
				AGMCORE_host_sep{
					4 dict begin
					/devnCompCnt Names length def
					/NewLookup HiVal 1 add string def
					0 1 HiVal {
						/tableIndex xdf
						Lookup dup type /stringtype eq {
							devnCompCnt tableIndex map_index
						}{
							exec
						} ifelse
						setdevicencolor
						currentgray
						tableIndex exch
						HiVal mul cvi 
						NewLookup 3 1 roll put
					} for
					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
					end
				}{
					level3
					{
					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
					[/Indexed MappedCSA HiVal
						[
						Lookup dup type /stringtype eq
							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
						]cvx
					]setcolorspace_opt
					}ifelse
				} ifelse
				end
			}{
			} ifelse
			set_crd
		}
		{
			/MappedCSA CSA map_csa def
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {
			begin
			CSD get_csd begin
			map_indexed_devn
			devn
			end
			end
		}{
			AGMCORE_gget/Lookup get 4 3 -1 roll map_index
			pop setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {
			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		1 dict begin
		/name xdf
		AGMCORE_CSA_cache
		{
			0 get name eq {
				exit
			}{
				pop
			} ifelse
		}forall
		end
		end
	}{
		pop
	} ifelse
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
		dup wrap_paintproc
	}if
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	  begin
		/OldPaintProc /PaintProc load def
		/PaintProc
		{
		  mark exch
		  dup /OldPaintProc get stopped
		  {closefile restore end} if
		  cleartomark
		}  def
	  end
  } {pop} ifelse
} def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		dup /customcolor_tint exch AGMCORE_gput
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.23 0
%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.23 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.23 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel
		2 copy known not
			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 2 sub 1 index lt
				{ pop count 1 sub }
			if
			dup /argCount exch def
			dup 0 gt
				{
				exch 1 index 2 add 1 roll
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count 1 sub /restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup begin
		mark
			{
				(*) { pop stop } 128 string /Category
			resourceforall
			}
		stopped
		cleartomark
		currentdict eq dup
			{ end }
		if
		not
		}
		{ false }
	ifelse
	def
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
	userdict /Adobe_CoolType_Data 10 dict dup
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end put
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.19 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	currentcolorspace 0 get dup /DeviceCMYK eq {
		pop 4
	}
	{
		/DeviceRGB eq {
			pop 3
		}{
			1
		} ifelse
	} ifelse
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/srcDataStrs xdf
	/dstDataStr xdf
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/samplesNeedDecoding
		0 0 1 origDecode length 1 sub {
			origDecode exch get add
		} for
		origDecode length 2 div div
		dup 1 eq {
			/decodeDivisor 2 origBitsPerComponent exp 1 sub def
		} if
		2 origBitsPerComponent exp 1 sub ne
	def
	[
		0 1 dsCnt 1 sub [
			currentdict /origMultipleDataSources get {
				dup currentdict /origDataSource get exch get dup type
			}{
				currentdict /origDataSource get dup type
			} ifelse
			dup /filetype eq {
				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx
			}{
				/stringtype ne {
					/exec cvx
				} if
				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx
			} ifelse
		] cvx /for cvx
		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [
			0 1 Width 1 sub [
				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx
				currentdict /origMultipleDataSources get {
					0 1 dsCnt 1 sub [
						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx
						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs
								BitsPerComponent /decode_image_sample load /exec cvx
							} ifelse
						} if
					] cvx /for cvx
				}{
					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx
					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx		
					currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 
					[
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx
								BitsPerComponent /decode_image_sample load /exec cvx
								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx
							} ifelse
						} if
					] cvx /forall cvx
				} ifelse
				currentdict /convProc get /exec cvx
				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [
					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx
					currentdict /convProc get /filter_indexed_devn load ne {
						255 /mul cvx /cvi cvx 
					} if
					/put cvx 
				] cvx /for cvx
			] cvx /for cvx
			currentdict /dstDataStr get
		] cvx /if cvx
	] cvx bind
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	2 dict begin
	dup dup
	/dstDataStr exch /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						dstDataStr srcDataStrs devn_alt_datasource /exec cvx
						] cvx 0 () /SubFileDecode filter def
					/MultipleDataSources false def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA map_csa 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							[
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							dstDataStr srcDataStrs devn_alt_datasource /exec cvx
							] cvx
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource [
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								dstDataStr srcDataStrs devn_alt_datasource /exec cvx
								] cvx 0 () /SubFileDecode filter def
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get map_csa
				}{
					/CSD get get_csd /Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
					CSD get_csd begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Col_Landscape\(outline\) [Convert) 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2005-06-20T02:40:31Z</xap:CreateDate>
  <xap:ModifyDate>2005-06-20T02:40:31Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>52</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgANAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qxLVvPKQR3UUEPp3E&#xA;LNGGlIBHEGshWhFFK78iM5LWe0pHFjxQPiCXCO/rvw107jXN2+n7MMjEk2D3fcx6P81VbTmIvrWS&#xA;RGKPcKwL8gwPFUAo/wAJ24hvHKB2l2jwCHCOMi+Lbv8A9Ly26l2J7BPH9Mh5ft6fGmOW35u2jarL&#xA;Kk9wJVqZLoo7QFT2KfEyqu5HJafF0WlTDwNZE+MJ/vTdizVdBvttv5b7U7Ofs7MYwCI13WL+fLf3&#xA;9Otsin/NUNa2wjvrOOWUjhKHRvUovxVrVF39wa7ZLL2p2kYUIASjVnv/AEfJ1kOwTxG4zIHly/Sy&#xA;vSfOUF9cWtqYCJp+Qcqa8CtftAgHcCu2w8c2Gh9oo5pwxmNTld+RHeKHv7h383U5+zjAGV7BkmdK&#xA;612KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KoPVbq8trQyWd&#xA;t9auCQqRVp17nboPo+eYevz5cWO8UOOfd+n8V727BCMpVI8IeRfmHPdT6bqt9eWTFpo2jFuRxA4I&#xA;FL/Hy+KKqvSn0jOHwTy5db4mS8cpbVRF8IFg791F7DsaEY5IQjLkef6Nu/cME8iw2wtmvYCLW7t2&#xA;pPeTuiQGp5KAWbkpULvseQ2p/N0WTm9F2tKXFwH1RlyiAb/Hyrv7j+2h8mXIu6XNxdSL+8vr5eEd&#xA;iSEDfE8iSsx7UZWJbemR3dbOWqjw7RiOUY7mfPuBAHwqgxfz1Y6JHZ6VeaQpS1uUkCiSNI5mKkEs&#xA;3p8VZatRSF8cnAne3b9k5cplOGX6o11JH2/bu9Y8nXWoWot7vT7D4p7f0vqoWqxsQrlF9PiKL8Ne&#xA;lK5zWnzZ8GrnPEDlJuO4PPY1z5Dbn0eN7RhCRMZy5Su+/pe706xnmntY5poTbyuDzhJqVNaUrRc7&#xA;7S5ZZMYlKPBI9O77nl8sRGRANjvV8yGDsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdiqld+l9Vm9UFouDeoo6laGoFKdsp1HD4cuL6eE37qZwviFc7ee6FpEOq3sduyN&#xA;caWUaS8jmA4gyK0ZTYmocAe/3Z5/2JpTl1EOHiOOPqlfQ7ivjQ8/k9BqdQcUeIbZL2ry3v4J/wD8&#xA;qw/L+lP0HbU8OJ/rnf8A5eHc4P8ALms/1ST508r6Zos+keTr2XzBHeX2q6zaW99oX+jlTHJcJHIn&#xA;pqgkVljPxE9mHtXcZNPDxsmPwAIRgSJUe7v5f2fLHHa+q4RPxp8XvfRr/lp5DcKr6LbsqCiAhiAP&#xA;Ab7Zp/y2Pubx23rByySY7dWEVhrL294JFtY7hXtoUHwtFM/xGtV/ZULt3+Wed6nTDBqjHLxcAyXE&#xA;DrGUt97HQVt19zsIZTkx3GuIx3PmA9Iz0t5tIvO+kavrHlXUdL0e9k03UbuMRwX8MjRSQ1deTo6f&#xA;EGC1pTFXglxYalH/AM5J2fkNfMfmD/DsumGWSE61qXqGb6rI/q+p6/LlzUNT7PtTbFVDUdW81/lx&#xA;+cXkrTdW1vXddtP0dfSahYQ3N1ftesDepat9WLcWkKCHltxUjltSuKvVNN/5yC/L/UPIqecYDdi0&#xA;lvhpUGnNEovZL5grLbogcxlmRw1fU406kYqyfyZ580fzYupR2cU9pfaNdPY6pp12qLPBOnZvSeWN&#xA;lb9lkcg4q8i0qTVZP+crdU0B9a1Y6FZ2K6lBpR1K9NsLgxwMaxmUgx8pWPpn4e1OO2Ksq8xeYtM8&#xA;jedfNPmTVJtYvNIstM0m6eyiu7i4ggkv7q+gllS0lnWFVP1WIbD4ewFTiqI8t/8AOQnkzzB5itPL&#xA;9nYatDf6lZNqGlfWrVYUu41iaUrAWkqW4xuAxAQlTRulVWL+Uvzy8o+XfIV15ivbzzBr2lza5d2k&#xA;l9e28HrW07qlwlsUWVeMYST4SNuQbZBxXFWc61+c/lbQ4dWn1e2vbO30iG1lmmaOJ0lkvVDQW8Bi&#xA;lf1JWFdugoSTShKqEv8A8+fKenaRrt/qNhqVpP5auLe21vTHiha5t/rf9xK3pzSQtHISACsh36jF&#xA;Uui/5yY8gyW97OLLV1jtVs2gMlmI/rTah/vOluXkUVahIMhVSASpI3xVAfmf+aWlnR7I3zeY/KbW&#xA;fmCGyupLaG2aQzwQxXf1aYrPJGYp4riqEMyniSQyijKouy/ODXrr87Nf8oro15JpWg6eWNtAtu88&#xA;twTHItwxeROMbxuFiUN+1VgP2VUz8v8A59+VfMGkjVNK0zVbiBtSi0YRCGATfW5kLgGMz8gqj7TH&#xA;YfQaKsp89efNA8laKuq6y0hSaZLW0tYFDz3FxLXhFEpKgsaE7sB74q87/Mr86Yv+VeedU0OK90zz&#xA;VoAS0vbSYQrcWn1pgiXIeKWWMoVPwvG7EMV2GKph/wA4+aFqtv5Vh1691XVruLXLLT5ksNVkEyxS&#xA;i2Vp7i3cyTMY7h5OQrxNNiOmKvP778zNCh/Nnzd5c/MrUNU0blOkPli/t7q5tra1tgvwSAW7qFeU&#xA;8X9VlYHoxCimKs98ufmRY+Tx5T8ha897rGvapCgsNbhMU9reiRzSZbmSYE7Ecq7+FarVVMNR/PTy&#xA;taaZYTzabqjXmsX82laXpEUUJvbma3kEMzxBZ/T9NJTw5mQbjbahxV51+U35oXGiL+aWta/NrWoa&#xA;JoerrFa2VxJLeXVnbNPOioUuZWZeACiT4q7b9MVZ95W/5yH8j+Y/NGm+Xba01OzudYtzdaXdX1sI&#xA;LedArMfTYyFj/duOXHiSpox2qqitK/Pfybqmp2lpaW981nqV1cafpOrtHELO8u7VQzQwt6vqAtyo&#xA;jSRqrHocVUNK/P7yrqum6lf2OlatKNJvbfTbu2EEP1gXV1IYY41i9fkx9Sin5/Oir0PUo76SzdLJ&#xA;0juDTi0gqtK7jo3UexzF1kMssZGIgT8+Xn3/AHFtwmIl6hs+d/zQ0DX9W0+xstE0+91WOC9WW+Wx&#xA;qAERSKMtG+1zbgxG29Qa7av/AIH5x455yZR2ERuPfy35X5WduTndtWRDZu+8tk+brO+0jyTqllps&#xA;Vi0U4ltGI+sfAY2WNfUo6KOLPXc1/wBZuy0xyjERkyxlLjvY9N/d8v7Bq5GPFYHRNv8AlbPkPUNQ&#xA;nayvri4vNVU2dqFsJ/UuJZfVVbblyNeP1iMd+22T/KZoijGhHf6o7ef2Fh4ke/72M6L5UniXzSdX&#xA;8jaxdS39f0O8dvxCLSgC1I9Fufx8qHYdK/Cx1UskpY/DywAj9W/4vbav7Qw4RxXFkP5T6T5ksND0&#xA;3StatZ9P1KC4cW0V8D8StJ6qEDjVULyN1DfFXsaDgPbGMcnamPw5RuUY13WJGr5/7n3u67LJjppc&#xA;QNAn7vx1e9Wi3K2sS3TrJcBQJXQUBbxAzodOMgxgZCDOtyHWZDEyPDyVsuYPnu80jzSf+coLfzkv&#xA;l3U28uwWxsHvRCKF/q7xeoF5cvT5sN6e9MVTPzzpnmdv+cj/ACn5ntfL+oXmhaLZSWt5ewRoyF7m&#xA;K4QFKutVQ3C8jt3xV5LaflN+Zc35XTQJ5evYdY0bzOddj0+QiJrm1uII4z6Do/IyxPb7gUNG+Gpx&#xA;V9F/lNpOnwJqmrWflO78rDVDA041O4ea9uZYlfk8sbyT8FQvxQluTbkqNsVYV5i8vea/K3/OQw/M&#xA;GHRrrWvLeq2AsbttOQT3Fu6xqnxQAh2HKFTUdie4piq78z9K82eZ/JfnbUbPy/fi58wW+l6Ro+mO&#xA;sYujDYXE1y1zNGHPpKz3UgCseXwioFcVYxpOjedbT8wfyr16Xynq31Hyx5ej0rVuMUZdLhbe4tDx&#xA;X1N15Or1r9k+O2Kq/wCV35XeYdR/JXzx5K8w6Lc6Xf6lfTajprXSqqNJJFEbfiwY7pNa/H7EeOKr&#xA;fM35Ned9T/5xy0rTYkluPOUdza6zf2zsEnkMVsbSKCrcfjgtfSWhNap44q15v8p6hrv5W+ZZNB/L&#xA;3U9J17Xo9Ntrg3lxJPeTzW9zHPLWOaaVvQhSDikjkM1QOIGKsr1ryxLrP5J+SvK+s+W7+8iVbHT9&#xA;atoV9O+shaWEiNdw1PA+nNEtOXIOrUoSRiryzXPIf5szfldZ+Xv0Xq+sW1v5lN/oaXaILqHS7SB4&#xA;l9dWkZojK0/wRnpxboKYq9J0vS/Oej/85Ja/5lHl6eby95isLONdUkkSGG2jihtRM8zHlRk9Bxw6&#xA;k0/ZPIKtfl7+Xb6f+fXmm/s51l8qFbfXbGGJlaL6/qEcsauvElRxjkuaAfsup8MVT/8A5yA8k+YP&#xA;MFh5a1bQ7Zr+68tavBqM+nxlRLNAhBk9LkVDOvEfDXfem+xVebec/wAv/Omu3X5o+bLXRbtY/M8F&#xA;lpmhaaYilzMIHtjJPJCxDRIBa/t0Jr0xV7t+Vcd5b/lx5bsb6znsb3TtNtLG6trlODrLbQJE9BU1&#xA;UsvwnuMVeYea9MXzdoPmXSPPPk3Ur7V7W+1SPypq1tZl5ZbY3MpsvTuIh+5C1UUmojIAx5VOKse8&#xA;3fld5j0/8k/JdnDdxD8w/Jl7aTW6pKjyRNqV7whh6kfDI8QU7g+mQtcVT/8AMn8vNe0LzN+WnmHQ&#xA;tNudc0vyiBaalaWYD3ZT4f36xsR6jP8AEW369TvXFWJWXlT8x08t/m9HceT9Rin853ZutJiBt3IM&#xA;1zK7RuFl5VRZq8lBU0O/SqqpY+T/ADvc+ZPyo9Xy1qdta6DpR0vWLpo0AgknWS157SfZSokJ/lPj&#xA;tiqJ/Jz8t9U0OW08u+avI91daroerC+sPMUl06aVDbo6v9YSk3EzAoSiLF8VRz47nFWSaB+XxT/n&#xA;I3U9X026SXyrqFlb+YriKBleKS+Yy20HKla/vDNcKelflirOYE1B/MfKzuJ7ik3pyTtVAUBpKo5G&#xA;lEHse2ee4o5pa28U5z9dGXLb+Ib/AM349HfyMBh9QA25fd81Kwu7vR9ZnuVgmlsg7W03Mgysa8uQ&#xA;FAa7chXtXfK9JqMmi1MpiMpY74Df1Hrf2WPK9+rLLjjmxiNgS5juT2/88WMQt2sgLkOx+sIeSOig&#xA;VPwkdevttm+1ftPijwnF67PqG4IH4+Gzg4uzJG+Lbu83hPl+bzzb2nlryveaJBHp2gajaX0urpIh&#xA;SWG3uFm4xDiP3mzcv2unKlano8/bXZsBPWRzcRyRkBCjfFXI9e7ns4kdHnNYjGqrfpT3aw872T2b&#xA;SXw9K6DlVtYgzuQKU7bH5nOc0vtPiOIyy+nJf0xsn8e9y8vZshKobx7ykdtJe6p5lhu50lhS4f8A&#xA;cmFhWNY+zUFe1D03+7NFhnl1WujkkJREztwn6RHv/Ty3s+TnTEcWAxFGud9bV9GXUF8wI19PPBcS&#xA;SH1aAsjyfa9FiCVHw7j2y7s0ZhrAcspwmZb9xPPgO9ctx5UWvUGHg+kAivs72d537onYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FULqumWOq6XeaXfxetY38Elrdwkkc4pkKSLVSCKqxG2KpP5H8g+WfJOjn&#xA;SfL9u0Fs7+rK8sjzSO/FUBZ3JPwoiqoGwA2GKsixV2KuxV2KsTvPyv8AJl554h87XFmz69AiIsnq&#xA;yekTECI3aGvBnQH4SRt16gHFWWYq7FXYqpXVtBdW0ttcJ6kE6NFKhqAyOOLDbxBxVjvkP8uPKfkX&#xA;TprDy5avbwXEnqStLLJM5pXivKQsQq8jxUbbk9SSVUZf6NcCR3tAssTsZDAztGyStWrxOK0ryJpt&#xA;v37ZotX2bPiJx+qJN8JJiRI9YnpzJrbf+Lo5uLUCqlse/nY7j+Pghbqz1dkdoIbpJVR/RJuVYBzs&#xA;hIaQ9BmLn02pIJjHKJAHh/eA79Oc22GTGDuY119P7FsDgiUXMf16NQn1iGWNUu0I+I1C/wB4tRX3&#xA;7E5DFK+LxB4o24hKIGQden1R2+PQyTIcuE8PcQfSf1H8bICLS/KEdz663LTKAvCyCl5OaEFqrTl8&#xA;XChBXucwYaHs2M+MTMhtUKuVir2q963FdS3yz6gxqq8+iKum1ASQrZRLauDH6dlEoa4eBdn9ST9j&#xA;alPi8RWuZOc5uKIxRED6ahEesw5Hil/D8+8E21wEKPEeLnufpvyHVXNjq4eiQ3RiaobnchTuBVvg&#xA;kAryr2y86XU3tHJw+eT7fTPnd9Gvxcdc43/V/WEdpujyRTJPOEQR1MFtH8QVjUc2eiln4tT+pzP0&#xA;XZphITnQ4fpiOh39RNC5Ua+Z3JtozagEUOvM/o9yb5uXEdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVSrWf0V6kP1iv12v+i+j/f9f2f8nx5fDmp7S/L3Hj/v&#xA;f4eH6/h5d/F6e9ytP4lHh+nrfL8e7dJLP1/Q+D619U9WXr9X9fn6g5157V9SnTfwzQ6fi4dvE8Pi&#xA;l/qfHfEL57fVXLe+TnZKvfh4qH86uW32Mg0f9Gei/wBR+1y/0jnX1eff1OXxV+f0Z0fZ3gcJ8Lnf&#xA;qv6r/pXvf4Dr9Rx36vh3fBMM2LjuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2Kv//Z</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -105.902 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 105.902 li
528.405 105.902 li
528.405 0 li
clp
[1 0 0 1 0 0 ] concat
147.257 62.5176 mo
133.922 62.5176 li
133.922 61.5127 li
136.649 61.2715 137.545 61.1915 137.545 57.8169 cv
137.545 36.6441 li
134.931 36.8047 131.083 37.0059 130.336 43.4341 cv
129.253 43.4341 li
129.365 35.3584 li
151.777 35.3584 li
151.852 43.4341 li
150.769 43.4341 li
150.022 37.0059 146.174 36.8047 143.597 36.6441 cv
143.597 57.8169 li
143.597 61.2325 144.493 61.3126 147.257 61.5127 cv
147.257 62.5176 li
false sop
/0 
[/DeviceCMYK] add_csa
0 0 0 1 cmyk
f
172.963 62.5176 mo
164.185 62.5176 li
164.185 61.5538 li
165.418 61.4327 165.94 60.75 165.94 59.2632 cv
165.94 49.5406 li
165.94 48.4156 165.903 46.2061 163.886 46.2061 cv
162.392 46.2061 160.786 48.1749 160.786 48.5362 cv
160.786 59.2632 li
160.786 60.1876 160.898 61.3526 162.616 61.5538 cv
162.616 62.5176 li
153.614 62.5176 li
153.614 61.5538 li
154.958 61.2715 155.594 61.1114 155.594 59.1431 cv
155.594 38.6529 li
155.594 36.7647 155.071 36.6441 153.614 36.3228 cv
153.614 35.3584 li
160.786 35.3584 li
160.786 46.648 li
162.579 44.398 164.185 43.5142 166.127 43.5142 cv
168.182 43.5142 171.133 44.7598 171.133 49.1792 cv
171.133 59.1431 li
171.133 59.8257 171.133 61.5538 172.963 61.5538 cv
172.963 62.5176 li
f
184.918 51.188 mo
184.881 49.9424 184.881 47.8531 184.583 46.648 cv
184.358 45.7642 183.873 44.7598 182.565 44.7598 cv
181.183 44.7598 179.913 45.6436 179.913 51.188 cv
184.918 51.188 li
cp
189.7 58.0582 mo
187.421 61.795 185.292 63.0801 182.304 63.0801 cv
178.531 63.0801 174.721 60.107 174.721 53.2369 cv
174.721 47.2906 178.12 43.5142 182.416 43.5142 cv
188.916 43.5142 189.401 50.5049 189.513 52.6744 cv
180.1 52.6744 li
180.212 56.0894 181.034 60.1876 184.583 60.1876 cv
186.786 60.1876 188.094 58.4195 188.803 57.4957 cv
189.7 58.0582 li
f
225.523 36.3628 mo
223.469 36.6841 222.61 37.126 222.61 39.7779 cv
222.61 52.5943 li
222.61 54.9644 222.087 58.5401 220.518 60.3487 cv
218.65 62.5176 215.4 63.2803 213.159 63.2803 cv
211.516 63.2803 208.004 63.0401 205.577 60.75 cv
203.97 59.2232 202.999 57.8169 202.999 53.4781 cv
202.999 40.0591 li
202.999 36.6841 202.028 36.6041 199.936 36.3628 cv
199.936 35.3584 li
212.562 35.3584 li
212.562 36.3628 li
210.096 36.4834 208.938 36.5235 208.938 40.0591 cv
208.938 53.4781 li
208.938 55.7681 208.938 61.3126 214.317 61.3126 cv
220.892 61.3126 220.966 55.1656 220.966 52.5943 cv
220.966 40.3404 li
220.966 37.8897 220.518 36.5235 217.306 36.3628 cv
217.306 35.3584 li
225.523 35.3584 li
225.523 36.3628 li
f
245.325 62.5176 mo
236.547 62.5176 li
236.547 61.5538 li
237.78 61.4327 238.303 60.75 238.303 59.2632 cv
238.303 49.5406 li
238.303 48.4156 238.265 46.2061 236.248 46.2061 cv
234.754 46.2061 233.148 48.1749 233.148 48.5362 cv
233.148 59.2632 li
233.148 60.1876 233.26 61.3526 234.978 61.5538 cv
234.978 62.5176 li
225.976 62.5176 li
225.976 61.5538 li
227.321 61.2715 227.956 61.1114 227.956 59.1431 cv
227.956 47.3311 li
227.956 45.523 227.47 45.2017 225.976 44.9605 cv
225.976 43.9966 li
233.11 43.9966 li
233.11 46.8892 li
233.185 46.8892 li
233.708 45.9249 235.314 43.5142 238.489 43.5142 cv
240.544 43.5142 243.495 44.7598 243.495 49.1792 cv
243.495 59.2632 li
243.495 60.2276 243.495 61.4737 245.325 61.5538 cv
245.325 62.5176 li
f
251.117 34.7559 mo
252.724 34.7559 253.994 36.1622 253.994 37.8897 cv
253.994 39.6573 252.724 40.983 251.117 40.983 cv
249.399 40.983 248.204 39.6172 248.204 37.8897 cv
248.204 36.2022 249.437 34.7559 251.117 34.7559 cv
cp
255.487 62.5176 mo
246.56 62.5176 li
246.56 61.5538 li
247.905 61.1915 248.54 61.0713 248.54 59.1431 cv
248.54 47.3311 li
248.54 45.523 247.98 45.2418 246.56 44.9605 cv
246.56 43.9966 li
253.732 43.9966 li
253.732 59.2632 li
253.732 60.5088 254.031 61.3926 255.487 61.5538 cv
255.487 62.5176 li
f
273.712 44.9605 mo
272.816 45.0811 272.292 45.1617 271.546 47.1705 cv
265.569 63.0801 li
264.598 63.0801 li
260.116 51.188 li
259.294 49.0186 258.173 46.5274 257.949 46.0455 cv
257.501 45.1211 257.314 45.1211 256.38 44.9605 cv
256.38 43.9966 li
265.718 43.9966 li
265.718 44.9605 li
264.486 45.0811 263.739 45.1211 263.739 46.0455 cv
263.739 46.2061 263.739 46.3267 264.075 47.2505 cv
267.026 55.4063 li
269.715 48.0943 li
269.977 47.4112 270.126 46.8086 270.126 46.2862 cv
270.126 45.001 269.005 45.001 268.072 44.9605 cv
268.072 43.9966 li
273.712 43.9966 li
273.712 44.9605 li
f
285.036 51.188 mo
284.999 49.9424 284.999 47.8531 284.7 46.648 cv
284.476 45.7642 283.99 44.7598 282.682 44.7598 cv
281.3 44.7598 280.03 45.6436 280.03 51.188 cv
285.036 51.188 li
cp
289.817 58.0582 mo
287.539 61.795 285.41 63.0801 282.421 63.0801 cv
278.648 63.0801 274.838 60.107 274.838 53.2369 cv
274.838 47.2906 278.237 43.5142 282.534 43.5142 cv
289.033 43.5142 289.518 50.5049 289.63 52.6744 cv
280.217 52.6744 li
280.33 56.0894 281.151 60.1876 284.7 60.1876 cv
286.903 60.1876 288.211 58.4195 288.92 57.4957 cv
289.817 58.0582 li
f
301.507 62.5176 mo
291.572 62.5176 li
291.572 61.5538 li
292.767 61.3126 293.588 61.1514 293.588 59.1431 cv
293.588 47.3311 li
293.588 45.3223 292.692 45.1211 291.572 44.9605 cv
291.572 43.9966 li
298.631 43.9966 li
298.631 47.1705 li
298.706 47.1705 li
299.49 45.9249 301.171 43.5142 303.599 43.5142 cv
306.139 43.5142 306.7 45.6836 306.7 46.648 cv
306.7 47.6924 306.176 49.3399 304.309 49.3399 cv
302.143 49.3399 302.18 46.9693 300.984 46.9693 cv
300.424 46.9693 298.781 47.8531 298.781 50.7862 cv
298.781 58.3794 li
298.781 60.8301 299.229 61.4327 301.507 61.5538 cv
301.507 62.5176 li
f
318.838 49.42 mo
318.054 46.5679 316.336 44.8399 314.207 44.8399 cv
312.862 44.8399 311.816 45.8848 311.816 47.1299 cv
311.816 51.2281 320.556 50.3042 320.556 56.8931 cv
320.556 60.71 318.166 63.0801 314.693 63.0801 cv
312.825 63.0801 310.285 61.9151 309.948 61.9151 cv
309.538 61.9151 309.314 62.2364 308.94 63.0401 cv
308.005 63.0401 li
308.005 56.4107 li
309.051 56.4107 li
309.276 57.4957 310.172 61.7139 314.319 61.7139 cv
316.186 61.7139 316.971 60.2676 316.971 59.0626 cv
316.971 55.3663 308.081 55.6075 308.081 49.42 cv
308.081 45.8848 310.584 43.5142 314.02 43.5142 cv
315.776 43.5142 317.307 44.398 318.017 44.398 cv
318.689 44.398 318.838 43.9161 318.951 43.5948 cv
319.772 43.5948 li
319.772 49.42 li
318.838 49.42 li
f
326.758 34.7559 mo
328.365 34.7559 329.634 36.1622 329.634 37.8897 cv
329.634 39.6573 328.365 40.983 326.758 40.983 cv
325.04 40.983 323.844 39.6172 323.844 37.8897 cv
323.844 36.2022 325.077 34.7559 326.758 34.7559 cv
cp
331.128 62.5176 mo
322.201 62.5176 li
322.201 61.5538 li
323.546 61.1915 324.181 61.0713 324.181 59.1431 cv
324.181 47.3311 li
324.181 45.523 323.621 45.2418 322.201 44.9605 cv
322.201 43.9966 li
329.373 43.9966 li
329.373 59.2632 li
329.373 60.5088 329.671 61.3926 331.128 61.5538 cv
331.128 62.5176 li
f
343.377 45.7642 mo
339.866 45.7642 li
339.866 57.857 li
339.866 58.5 339.829 60.1475 341.323 60.1475 cv
342.406 60.1475 343.042 58.9019 343.452 58.0582 cv
344.385 58.5 li
343.601 60.2276 342.256 63 338.895 63 cv
334.861 63 334.711 59.625 334.674 58.7813 cv
334.674 45.7642 li
332.731 45.7642 li
332.731 44.6792 li
334.711 42.8716 336.392 41.1036 338.932 37.2066 cv
339.866 37.2066 li
339.866 43.9966 li
343.377 43.9966 li
343.377 45.7642 li
f
362.347 44.9605 mo
361.526 45.0811 360.891 45.1617 360.181 47.1705 cv
354.615 63.1202 li
352.748 68.4639 351.963 70.754 348.452 70.754 cv
346.024 70.754 345.015 68.9053 345.015 67.6202 cv
345.015 67.0577 345.24 65.0088 347.481 65.0088 cv
349.162 65.0088 349.573 66.334 349.573 67.0577 cv
349.573 67.419 349.46 67.6202 349.46 67.7803 cv
349.46 67.9815 349.647 68.4639 350.095 68.4639 cv
351.365 68.4639 352.299 66.0538 352.56 65.17 cv
353.233 63.0401 li
348.75 51.188 li
347.928 49.0186 346.808 46.5274 346.584 46.0455 cv
346.135 45.1211 345.95 45.1211 345.015 44.9605 cv
345.015 43.9966 li
354.354 43.9966 li
354.354 44.9605 li
353.382 45.0411 352.374 45.0811 352.374 46.0455 cv
352.374 46.4473 352.785 47.4918 353.122 48.3755 cv
355.81 55.8082 li
358.351 48.0943 li
358.575 47.4112 358.761 46.8892 358.761 46.2862 cv
358.761 45.001 357.641 45.001 356.707 44.9605 cv
356.707 43.9966 li
362.347 43.9966 li
362.347 44.9605 li
f
381.106 61.834 mo
383.684 61.834 383.983 58.4195 383.983 53.3174 cv
383.983 47.1299 383.347 44.7598 381.069 44.7598 cv
378.305 44.7598 378.118 48.7374 378.118 53.3174 cv
378.118 57.6563 378.118 61.834 381.106 61.834 cv
cp
381.069 43.5142 mo
385.962 43.5142 389.473 47.733 389.473 53.3174 cv
389.473 58.6607 386.149 63.0801 381.069 63.0801 cv
375.877 63.0801 372.627 58.5401 372.627 53.3174 cv
372.627 48.1343 375.877 43.5142 381.069 43.5142 cv
f
390.898 61.5538 mo
392.168 61.3926 393.027 61.2715 393.027 59.1431 cv
393.027 45.7642 li
390.898 45.7642 li
390.898 43.9966 li
393.027 43.9966 li
393.027 40.0992 393.064 34.7559 399.826 34.7559 cv
402.104 34.7559 404.906 36.0015 404.906 38.7735 cv
404.906 40.1797 404.046 41.2642 402.552 41.2642 cv
400.984 41.2642 400.348 39.8985 400.348 39.0948 cv
400.348 38.0103 401.17 37.3672 401.17 36.7647 cv
401.17 36.1216 400.498 36.0015 400.049 36.0015 cv
398.256 36.0015 398.219 38.0103 398.219 39.0948 cv
398.219 43.9966 li
401.469 43.9966 li
401.469 45.7642 li
398.219 45.7642 li
398.219 58.3794 li
398.219 61.1514 398.855 61.4737 401.282 61.5538 cv
401.282 62.5176 li
390.898 62.5176 li
390.898 61.5538 li
f
431.051 43.4341 mo
430.378 40.6216 428.137 36.0015 423.73 36.0015 cv
421.788 36.0015 419.733 37.2066 419.733 39.8179 cv
419.733 41.9878 420.443 42.8716 423.581 44.5586 cv
429.072 47.4918 li
430.341 48.1749 433.18 50.5049 433.18 54.8843 cv
433.18 58.4195 430.79 63.2803 423.916 63.2803 cv
420.368 63.2803 418.687 61.9151 417.529 61.9151 cv
416.745 61.9151 416.557 62.6377 416.409 63.2803 cv
415.326 63.2803 li
415.326 53.3575 li
416.409 53.3575 li
417.155 57.4151 419.322 61.9551 424.066 61.9551 cv
428.548 61.9551 428.735 57.9776 428.735 57.4556 cv
428.735 54.7637 426.98 53.7994 424.551 52.5538 cv
422.049 51.2681 li
415.661 47.9737 415.661 44.5186 415.661 42.6705 cv
415.661 40.2198 416.819 34.7559 423.916 34.7559 cv
426.905 34.7559 428.66 36.0816 429.744 36.0816 cv
430.602 36.0816 430.79 35.4791 430.976 34.7154 cv
432.097 34.7154 li
432.097 43.4341 li
431.051 43.4341 li
f
451.785 44.9605 mo
450.962 45.0811 450.328 45.1617 449.618 47.1705 cv
444.052 63.1202 li
442.184 68.4639 441.4 70.754 437.888 70.754 cv
435.461 70.754 434.452 68.9053 434.452 67.6202 cv
434.452 67.0577 434.676 65.0088 436.918 65.0088 cv
438.598 65.0088 439.009 66.334 439.009 67.0577 cv
439.009 67.419 438.897 67.6202 438.897 67.7803 cv
438.897 67.9815 439.084 68.4639 439.532 68.4639 cv
440.802 68.4639 441.737 66.0538 441.998 65.17 cv
442.67 63.0401 li
438.188 51.188 li
437.366 49.0186 436.245 46.5274 436.021 46.0455 cv
435.573 45.1211 435.386 45.1211 434.452 44.9605 cv
434.452 43.9966 li
443.791 43.9966 li
443.791 44.9605 li
442.819 45.0411 441.811 45.0811 441.811 46.0455 cv
441.811 46.4473 442.222 47.4918 442.558 48.3755 cv
445.248 55.8082 li
447.788 48.0943 li
448.012 47.4112 448.198 46.8892 448.198 46.2862 cv
448.198 45.001 447.078 45.001 446.144 44.9605 cv
446.144 43.9966 li
451.785 43.9966 li
451.785 44.9605 li
f
464.901 48.2549 mo
464.901 48.2149 464.079 45.7642 461.987 45.7642 cv
459.334 45.7642 458.812 49.3799 458.812 53.2769 cv
458.812 55.6075 458.812 60.8301 461.799 60.8301 cv
463.518 60.8301 464.901 58.46 464.901 58.0181 cv
464.901 48.2549 li
cp
472.296 61.7139 mo
467.665 62.3165 467.329 62.3575 465.012 63.0401 cv
465.012 60.4288 li
463.668 61.9551 462.622 63.0801 459.821 63.0801 cv
456.72 63.0801 453.284 59.7051 453.284 53.8394 cv
453.284 46.8487 456.981 43.5142 460.493 43.5142 cv
462.734 43.5142 464.004 44.9605 464.901 46.0054 cv
464.901 38.6529 li
464.901 36.5235 464.116 36.4834 462.061 36.3228 cv
462.061 35.3584 li
470.092 35.3584 li
470.092 58.46 li
470.092 59.5445 470.168 60.71 472.296 60.7901 cv
472.296 61.7139 li
f
493.254 62.5176 mo
484.476 62.5176 li
484.476 61.5538 li
485.708 61.4327 486.231 60.75 486.231 59.2632 cv
486.231 49.5406 li
486.231 48.4156 486.194 46.2061 484.177 46.2061 cv
482.683 46.2061 481.077 48.1749 481.077 48.5362 cv
481.077 59.2632 li
481.077 60.1876 481.189 61.3526 482.907 61.5538 cv
482.907 62.5176 li
473.905 62.5176 li
473.905 61.5538 li
475.25 61.2715 475.884 61.1114 475.884 59.1431 cv
475.884 47.3311 li
475.884 45.523 475.399 45.2017 473.905 44.9605 cv
473.905 43.9966 li
481.04 43.9966 li
481.04 46.8892 li
481.114 46.8892 li
481.637 45.9249 483.243 43.5142 486.418 43.5142 cv
488.472 43.5142 491.424 44.7598 491.424 49.1792 cv
491.424 59.2632 li
491.424 60.2276 491.424 61.4737 493.254 61.5538 cv
493.254 62.5176 li
f
505.023 51.188 mo
504.985 49.9424 504.985 47.8531 504.686 46.648 cv
504.462 45.7642 503.977 44.7598 502.669 44.7598 cv
501.288 44.7598 500.017 45.6436 500.017 51.188 cv
505.023 51.188 li
cp
509.804 58.0582 mo
507.526 61.795 505.396 63.0801 502.408 63.0801 cv
498.635 63.0801 494.825 60.107 494.825 53.2369 cv
494.825 47.2906 498.225 43.5142 502.52 43.5142 cv
509.02 43.5142 509.505 50.5049 509.618 52.6744 cv
500.204 52.6744 li
500.316 56.0894 501.138 60.1876 504.686 60.1876 cv
506.891 60.1876 508.198 58.4195 508.908 57.4957 cv
509.804 58.0582 li
f
528.405 44.9605 mo
527.582 45.0811 526.948 45.1617 526.239 47.1705 cv
520.672 63.1202 li
518.805 68.4639 518.02 70.754 514.509 70.754 cv
512.082 70.754 511.073 68.9053 511.073 67.6202 cv
511.073 67.0577 511.296 65.0088 513.538 65.0088 cv
515.219 65.0088 515.63 66.334 515.63 67.0577 cv
515.63 67.419 515.518 67.6202 515.518 67.7803 cv
515.518 67.9815 515.705 68.4639 516.153 68.4639 cv
517.422 68.4639 518.357 66.0538 518.618 65.17 cv
519.291 63.0401 li
514.808 51.188 li
513.987 49.0186 512.866 46.5274 512.641 46.0455 cv
512.193 45.1211 512.006 45.1211 511.073 44.9605 cv
511.073 43.9966 li
520.411 43.9966 li
520.411 44.9605 li
519.44 45.0411 518.432 45.0811 518.432 46.0455 cv
518.432 46.4473 518.842 47.4918 519.178 48.3755 cv
521.868 55.8082 li
524.409 48.0943 li
524.632 47.4112 524.819 46.8892 524.819 46.2862 cv
524.819 45.001 523.698 45.001 522.764 44.9605 cv
522.764 43.9966 li
528.405 43.9966 li
528.405 44.9605 li
f
100.519 27.0909 mo
100.519 26.6089 101.798 26.2461 102.617 26.0538 cv
102.047 25.0977 101.184 25.0279 100.971 24.9957 cv
100.323 24.897 99.9122 24.878 98.7369 26.2237 cv
99.2071 23.8199 97.6397 23.4893 97.4996 23.419 cv
97.378 23.3584 96.7227 23.4346 96.3858 23.8199 cv
96.8189 24.3013 97.5811 24.6348 97.7256 25.4532 cv
97.8702 26.272 97.4849 26.7051 97.0997 27.6202 cv
97.0191 27.6836 96.3458 29.0865 95.9649 29.8897 cv
96.1451 29.1685 96.3936 27.6368 96.3257 27.3643 cv
95.5416 24.2295 92.2505 23.6168 92.2994 21.4747 cv
92.3277 20.2481 92.5372 20.2251 92.668 19.5269 cv
92.9644 17.9415 91.8843 16.7837 91.8843 16.7837 cv
91.671 16.814 90.8702 16.9068 90.0914 16.981 cv
90.1729 16.7867 li
90.647 16.731 91.0811 16.6607 91.0811 16.6607 cv
94.2437 16.2896 95.2051 14.5552 95.2808 13.6485 cv
95.5416 10.5137 93.0874 9.39991 91.3218 9.39991 cv
89.3882 9.39991 89.1778 10.2315 89.0259 10.7696 cv
88.7789 11.6451 89.7154 12.439 90.4039 12.5167 cv
90.7525 12.5562 91.9918 12.8389 92.2759 11.9942 cv
92.4278 11.5435 92.4395 11.7549 92.7549 12.168 cv
93.1094 12.6324 92.9971 13.1954 92.5811 13.4742 cv
92.0469 13.8326 91.3619 13.9102 90.3165 13.9102 cv
89.2876 13.9102 87.9698 13.668 87.274 13.293 cv
86.5787 12.919 85.5084 11.9019 85.5621 10.7784 cv
85.6158 9.65479 86.9532 9.06592 87.4346 8.74512 cv
86.9532 8.26368 86.501 8.21729 85.7227 8.31739 cv
84.2808 8.50196 83.9034 9.60108 83.8497 10.0293 cv
83.7964 10.4576 84.3316 11.3135 84.5455 11.5274 cv
84.7593 11.7413 84.9732 11.8472 84.6524 11.9556 cv
84.5284 11.9976 84.2935 12.108 83.9073 11.7354 cv
82.8619 10.7276 83.0245 9.45899 82.9937 9.17334 cv
82.9419 8.69092 82.9087 6.66309 82.8331 6.28418 cv
82.7486 5.8584 82.3482 5.0962 81.7061 4.72168 cv
81.6587 4.93409 81.335 6.76563 81.0142 6.87256 cv
80.4258 6.44434 79.5513 4.45997 77.3223 4.35792 cv
76.7876 4.33301 76.6802 4.46485 76.4664 4.73243 cv
77.1617 5.10694 78.3921 7.08643 78.3389 7.40772 cv
77.7876 6.87696 76.1221 6.81153 76.1221 6.81153 cv
75.7632 6.81153 77.0303 7.80567 77.2979 8.01954 cv
77.7222 8.35938 78.6885 9.0879 79.1949 9.38721 cv
79.7647 9.72413 80.8536 10.5645 80.8536 10.5645 cv
80.8536 10.5645 80.9605 10.8853 80.7999 11.0459 cv
80.7999 11.0459 80.7203 10.9629 79.9439 10.5645 cv
79.0923 10.1275 76.4629 8.69776 75.8775 8.37061 cv
75.3814 8.09327 74.3467 7.59522 72.5953 7.59522 cv
70.4014 7.59522 69.5396 9.28272 69.5396 10.8345 cv
69.5396 10.9029 69.543 10.9737 69.546 11.0445 cv
69.3916 11.1265 li
69.1797 11.0435 li
69.0079 7.42139 68.8282 6.08106 65.1749 4.38135 cv
65.1416 4.48047 66.2051 6.76075 66.3462 8.05469 cv
66.4 8.54834 66.4 8.54834 66.4 8.54834 cv
66.2486 8.68653 65.9034 8.61768 65.752 8.37891 cv
65.6226 8.17481 63.5586 5.17286 62.3057 4.9751 cv
62.2071 5.07422 62.8335 5.70069 63.064 6.22803 cv
63.2203 6.58497 63.3438 7.23243 63.1231 7.3877 cv
62.7588 7.64502 62.2232 7.47022 61.8169 7.24463 cv
61.605 7.12696 60.2408 6.4336 60.3487 3.89405 cv
60.4122 3.69727 60.6006 2.9751 61.5376 2.81397 cv
61.3541 2.28467 60.8565 2.08448 60.2867 2.25342 cv
59.6651 2.43702 59.1065 3.02979 58.7818 3.08399 cv
58.4673 2.39551 li
58.4673 2.39551 58.0313 0.91504 57.0552 0.369629 cv
56.8897 0.336426 li
56.6744 0.382325 li
55.6983 0.928223 55.2291 2.37696 55.2291 2.37696 cv
54.9146 3.06543 li
54.5904 3.01124 54.0313 2.41846 53.4097 2.23487 cv
52.8404 2.06641 52.3423 2.26612 52.1592 2.79542 cv
53.0958 2.95704 53.2842 3.67872 53.3477 3.87598 cv
53.4561 6.41553 52.0918 7.1084 51.8799 7.22608 cv
51.4732 7.45166 50.938 7.62647 50.5738 7.36963 cv
50.3531 7.21387 50.4761 6.5669 50.6324 6.20948 cv
50.8633 5.68213 51.4898 5.05567 51.3907 4.95655 cv
50.1377 5.15479 48.0743 8.15626 47.9444 8.36036 cv
47.793 8.59913 47.4483 8.66797 47.2964 8.53028 cv
47.2964 8.53028 47.2964 8.53028 47.3501 8.03614 cv
47.4918 6.74268 48.5547 4.46192 48.522 4.36329 cv
45.0328 5.98584 44.712 7.28174 44.5401 10.5503 cv
44.15 10.6153 li
44.0782 9.12256 43.2012 7.57715 41.1016 7.57715 cv
39.3497 7.57715 38.315 8.07471 37.8194 8.35206 cv
37.2334 8.67969 34.6041 10.1094 33.7525 10.5459 cv
32.9761 10.9444 32.8965 11.0274 32.8965 11.0274 cv
32.7359 10.8672 32.8433 10.5459 32.8433 10.5459 cv
32.8433 10.5459 33.9317 9.70557 34.502 9.36866 cv
35.0079 9.06983 35.9742 8.34082 36.399 8.00147 cv
36.6666 7.7876 37.9332 6.79297 37.5743 6.79297 cv
37.5743 6.79297 35.9092 6.8584 35.358 7.38916 cv
35.3042 7.06788 36.5352 5.08838 37.2305 4.71387 cv
37.0162 4.44629 36.9092 4.31495 36.3741 4.33936 cv
34.1456 4.4419 33.271 6.42627 32.6827 6.85401 cv
32.3614 6.74708 32.0376 4.91553 31.9903 4.70313 cv
31.3482 5.07764 30.9483 5.83985 30.8633 6.26563 cv
30.7881 6.64454 30.7549 8.67237 30.7027 9.15479 cv
30.6724 9.44044 30.8345 10.709 29.7896 11.7168 cv
29.4029 12.0894 29.1685 11.9791 29.0445 11.9371 cv
28.7237 11.8287 28.9371 11.7232 29.1514 11.5093 cv
29.3653 11.295 29.9 10.439 29.8467 10.0108 cv
29.7935 9.58301 29.4156 8.4834 27.9737 8.29883 cv
27.1954 8.19922 26.7437 8.24512 26.2618 8.72706 cv
26.7437 9.04786 28.0811 9.63624 28.1348 10.7603 cv
28.1885 11.8838 27.1182 12.9004 26.4224 13.2745 cv
25.7271 13.6495 24.4092 13.8917 23.3799 13.8917 cv
22.335 13.8917 21.6495 13.814 21.1158 13.4561 cv
20.6993 13.1768 20.587 12.6138 20.9415 12.15 cv
21.2574 11.7369 21.2691 11.525 21.4205 11.9756 cv
21.7046 12.8209 22.9439 12.5376 23.293 12.4981 cv
23.981 12.4205 24.918 11.6265 24.6705 10.7515 cv
24.5191 10.2134 24.3082 9.38135 22.3746 9.38135 cv
20.6094 9.38135 18.1548 10.4952 18.4161 13.6304 cv
18.4913 14.5367 19.4527 16.2715 22.6153 16.6421 cv
22.6153 16.6421 23.0948 16.7198 23.5958 16.7769 cv
23.6407 16.9659 li
22.8511 16.8912 22.0289 16.7964 21.8121 16.7652 cv
21.8121 16.7652 20.732 17.9229 21.0284 19.5084 cv
21.1592 20.2066 21.3692 20.23 21.397 21.4561 cv
21.4458 23.5987 18.1548 24.211 17.3707 27.3462 cv
17.3028 27.6182 17.5518 29.1504 17.732 29.8716 cv
17.3506 29.0684 16.6773 27.6651 16.5972 27.6021 cv
16.212 26.6871 15.8267 26.2535 15.9712 25.4351 cv
16.1153 24.6163 16.8775 24.2828 17.3111 23.8013 cv
16.9737 23.4161 16.3184 23.3399 16.1968 23.4009 cv
16.0567 23.4708 14.4898 23.8013 14.96 26.2056 cv
13.7842 24.8594 13.3736 24.8785 12.7261 24.9771 cv
12.5127 25.0093 11.65 25.0796 11.0806 26.0352 cv
11.899 26.2276 13.1783 26.5909 13.1783 27.0723 cv
12.8409 27.4092 11.668 28.3716 11.5894 29.0464 cv
11.4639 30.1158 11.9766 30.4185 12.2632 30.5396 cv
12.504 29.191 13.1192 28.6001 13.7564 28.5166 cv
14.3301 28.4419 15.021 28.4322 15.9712 28.9502 cv
17.0308 29.5284 17.9937 30.4244 17.9937 30.4244 cv
17.9937 30.4244 17.9883 30.4131 17.982 30.4004 cv
18.3467 30.8072 19.2896 31.4859 20.3755 31.3956 cv
21.6597 31.2886 22.335 30.1553 22.335 29.5669 cv
22.335 28.9781 21.7603 28.5606 21.439 28.5069 cv
21.1182 28.4532 20.6426 28.4654 20.3272 28.8936 cv
20.1143 29.1827 19.8282 29.3345 19.6202 29.0665 cv
19.2872 28.6373 19.5547 28.0704 19.7916 27.8233 cv
20.063 27.5411 20.5596 27.2881 21.2364 27.2881 cv
21.7188 27.2881 24.1387 27.982 25.2085 32.0484 cv
26.2789 36.1148 25.8912 37.9893 25.731 39.0059 cv
25.5704 40.0225 25.1958 41.0928 24.6612 41.7349 cv
24.6612 41.7349 24.5538 41.7349 24.5 41.253 cv
24.9283 40.1294 25.0357 39.2735 24.5538 37.7754 cv
24.0723 36.2769 22.5708 34.9595 22.4136 34.2974 cv
22.2842 34.063 22.5962 32.1792 22.5962 32.1792 cv
22.5962 32.1792 20.3755 32.3096 20.2735 34.5113 cv
20.21 35.8887 18.6436 32.3052 15.7735 34.063 cv
14.5494 34.8126 14.6021 35.7955 14.709 36.2237 cv
15.4 35.9678 15.397 35.9102 16.2071 35.8492 cv
16.7432 35.8086 18.9893 36.3306 19.043 37.4542 cv
17.8658 37.6685 17.2774 38.2569 16.9561 38.8453 cv
16.6353 39.4341 16.689 39.9156 17.1168 40.6109 cv
17.4913 39.8624 18.3614 39.4419 19.6314 39.3272 cv
21.9322 39.3272 23.1392 41.3511 23.1626 42.9117 cv
23.1812 44.0967 23.0704 44.9659 22.5875 45.752 cv
22.3174 46.1919 21.7046 47.2974 19.4976 47.1177 cv
18.9039 47.0074 18.5118 46.7183 18.3936 46.5938 cv
17.6876 45.8487 18.1548 44.7193 18.1548 44.7193 cv
18.2144 45.6553 19.5386 45.9727 20.1143 45.7642 cv
20.5342 45.6124 21.2662 45.3501 21.1592 44.066 cv
21.0523 42.7818 19.4805 41.587 17.7784 42.4029 cv
15.6802 43.5689 15.8038 46.8091 16.065 48.1153 cv
16.3067 49.3233 17.607 53.3672 17.502 54.7774 cv
17.2085 58.6939 14.4893 57.6168 14.2959 57.4927 cv
14.1163 57.377 13.7916 57.1407 13.6753 56.9131 cv
13.5513 56.6094 13.4825 56.4166 13.5098 56.044 cv
13.5513 55.4781 14.1031 55.1607 13.9981 55.459 cv
13.8082 55.9981 14.3101 56.4644 14.4751 56.5132 cv
15.0411 56.6788 16.0206 56.4136 16.0206 55.4507 cv
16.0206 54.4874 15.2486 53.815 14.147 53.9283 cv
12.2129 54.1265 12.0728 56.1651 12.1026 56.7476 cv
12.1202 57.0918 12.2818 57.6168 12.4336 57.8238 cv
12.4395 57.8194 li
12.9083 58.5914 13.875 59.377 14.7979 59.5396 cv
17.1768 59.959 18.4625 58.8584 18.8765 58.4029 cv
19.4698 57.8648 19.9527 56.7198 19.9527 56.7198 cv
19.9527 56.7198 20.9458 57.0372 21.608 58.7481 cv
22.0777 60.3448 21.4605 61.5665 20.8721 62.3584 cv
19.6573 61.4249 19.8111 59.7266 19.8111 59.7266 cv
19.8111 59.7266 16.9449 62.417 17.5933 64.7491 cv
17.6451 64.9346 18.0484 66.5977 20.3282 67.0772 cv
20.7027 66.9161 21.022 66.3399 21.3418 66.3155 cv
22.0372 66.2618 23.6558 68.9815 24.0225 69.5372 cv
24.4019 70.1241 25.1534 71.2237 25.1534 71.7588 cv
25.1534 72.294 22.9014 70.6827 22.0186 69.7999 cv
21.1358 68.9161 21.3956 67.9708 20.647 67.9708 cv
20.4864 68.6661 20.6114 69.2237 20.4512 69.2764 cv
20.2901 69.3301 18.7203 67.7061 17.65 67.921 cv
16.5801 68.1338 15.1958 69.709 15.3565 70.7794 cv
15.7076 71.0332 17.3848 70.084 17.8121 70.0284 cv
18.1924 69.9786 18.6734 70.0997 18.4913 70.5831 cv
18.0635 70.7969 16.6319 72.4834 17.0547 72.7383 cv
17.4776 72.9932 17.607 72.1026 20.712 72.1504 cv
22.629 72.296 23.2584 73.1973 23.2374 73.8916 cv
23.2247 74.3233 23.1441 74.7247 22.8897 74.8067 cv
22.4278 74.9542 21.8082 74.9708 20.0914 74.6329 cv
18.6207 74.3428 18.5967 74.0235 18.6548 74.6651 cv
18.6871 75.0245 19.9283 75.4815 19.9283 76.0694 cv
19.9283 76.6582 16.7793 77.4229 19.1446 80.6416 cv
20.3638 81.9483 22.9815 82.0166 23.6294 81.6866 cv
23.7901 81.3653 21.7618 80.4004 22.0186 79.1172 cv
22.0621 78.8995 22.4976 77.8975 23.7164 77.8116 cv
24.4537 77.7579 23.8033 79.2481 25.3711 79.379 cv
25.3711 77.3868 26.3941 77.4737 26.3941 77.4737 cv
26.3941 77.4737 26.9493 77.375 28.3135 77.8692 cv
29.3208 78.2334 30.0792 78.4044 30.4 79.0997 cv
30.7212 79.796 30.4537 79.4747 29.9722 79.4747 cv
29.4903 79.4747 28.9307 79.0967 28.2886 79.2042 cv
27.646 79.3116 27.0118 80.0225 26.8516 80.7715 cv
26.691 81.5206 26.5718 83.171 27.3741 83.3838 cv
27.3741 83.3838 27.7657 81.8165 29.9864 80.9024 cv
30.6319 80.6368 31.5826 80.6582 32.5992 81.0332 cv
33.6158 81.4082 37.3023 83.1846 40.9942 83.1846 cv
44.6861 83.1846 47.1548 80.4581 47.629 79.4405 cv
47.7603 79.1573 47.858 78.8868 47.9405 78.6221 cv
47.982 78.9952 48.2676 79.6084 48.6792 79.9288 cv
49.1607 80.3028 50.2398 80.1133 49.7584 80.2735 cv
49.2769 80.4336 47.3731 81.1983 47.3731 81.626 cv
47.3731 82.0547 49.4376 81.3438 49.5977 81.504 cv
49.7584 81.6651 49.9454 81.7042 49.4625 82.0362 cv
48.9932 82.3575 45.9029 82.8497 45.9361 83.586 cv
45.9673 84.2881 46.084 86.1211 46.4585 86.0674 cv
47.6343 83.7168 52.1666 82.3809 51.2564 83.003 cv
51.0215 83.25 49.1587 84.671 49.732 85.5372 cv
49.9439 85.8584 51.1451 88.1973 51.3589 88.25 cv
51.5733 88.3038 51.0303 83.9776 54.0923 82.9493 cv
55.2124 82.5723 50.7452 85.9952 56.6363 90.4522 cv
56.7208 90.4795 56.6363 90.4522 56.6363 90.4522 cv
56.7208 90.4795 li
57.0601 90.4698 li
62.9512 86.0137 58.4839 82.5909 59.6045 82.9668 cv
62.6661 83.9961 62.1236 88.3223 62.3374 88.2696 cv
62.5518 88.2159 63.7525 85.876 63.9649 85.5557 cv
64.5376 84.6895 62.6753 83.2676 62.44 83.0206 cv
61.5303 82.3995 66.0626 83.7344 67.2383 86.086 cv
67.6128 86.1397 67.7291 84.3077 67.7608 83.6045 cv
67.7935 82.8682 64.7032 82.376 64.2339 82.0538 cv
63.7515 81.7237 63.9385 81.6827 64.0987 81.5225 cv
64.2593 81.3624 66.3238 82.0733 66.3238 81.6456 cv
66.3238 81.2168 64.42 80.4532 63.9385 80.292 cv
63.4566 80.1319 64.5362 80.3213 65.0176 79.9463 cv
65.4292 79.626 65.7149 79.0127 65.7559 78.6416 cv
65.8389 78.9053 65.9361 79.1758 66.0679 79.4581 cv
66.542 80.4776 69.0108 83.2042 72.7027 83.2042 cv
76.3941 83.2042 80.0811 81.4268 81.0972 81.0518 cv
82.1138 80.6778 83.065 80.6553 83.71 80.921 cv
85.9307 81.835 86.3223 83.4034 86.3223 83.4034 cv
87.125 83.1885 87.0054 81.5401 86.8448 80.7911 cv
86.6846 80.0411 86.0503 79.3292 85.4078 79.2227 cv
84.7662 79.1163 84.2061 79.4922 83.7247 79.4922 cv
83.2432 79.4922 82.9752 79.8135 83.2964 79.1182 cv
83.6172 78.4229 84.3755 78.253 85.3834 77.8877 cv
86.7471 77.3946 87.3023 77.4922 87.3023 77.4922 cv
87.3023 77.4922 88.3252 77.4044 88.3252 79.3965 cv
89.8931 79.2666 89.2432 77.7764 89.98 77.8292 cv
91.1993 77.9161 91.6348 78.918 91.6783 79.1358 cv
91.9346 80.42 89.9063 81.3838 90.0674 81.7042 cv
90.7149 82.0342 93.3326 81.9659 94.5518 80.6592 cv
96.917 77.4415 93.7681 76.6768 93.7681 76.0879 cv
93.7681 75.4991 95.0088 75.043 95.0416 74.6836 cv
95.1002 74.042 95.0757 74.3614 93.605 74.6504 cv
91.8887 74.9883 91.2691 74.9737 90.8072 74.8252 cv
90.5523 74.7432 90.4717 74.3418 90.459 73.9112 cv
90.438 73.2159 91.0679 72.3135 92.9844 72.169 cv
96.0894 72.1211 96.2193 73.0118 96.6421 72.7569 cv
97.065 72.501 95.6329 70.8155 95.2051 70.6016 cv
95.0235 70.1182 95.504 69.9971 95.8843 70.0469 cv
96.3121 70.1026 97.9888 71.0518 98.3399 70.7969 cv
98.5005 69.7276 97.1168 68.1534 96.0464 67.9385 cv
94.9766 67.7247 93.4063 69.3487 93.2457 69.296 cv
93.085 69.2413 93.21 68.6846 93.0499 67.9893 cv
92.3008 67.9893 92.5611 68.9346 91.6783 69.8174 cv
90.7955 70.7002 88.543 72.3126 88.543 71.7764 cv
88.543 71.2422 89.295 70.1416 89.6744 69.5547 cv
90.0406 69 91.6592 66.2803 92.3545 66.3331 cv
92.6749 66.3584 92.9937 66.9346 93.3682 67.0958 cv
95.648 66.6163 96.0513 64.9542 96.1031 64.7676 cv
96.7515 62.4366 93.8858 59.7447 93.8858 59.7447 cv
93.8858 59.7447 94.0391 61.4444 92.8248 62.377 cv
92.2364 61.584 91.6192 60.3624 92.0884 58.7662 cv
92.7505 57.0557 93.7442 56.7383 93.7442 56.7383 cv
93.7442 56.7383 94.2271 57.8834 94.8199 58.4214 cv
95.2339 58.877 96.5196 59.9776 98.899 59.5582 cv
99.8218 59.3956 100.789 58.6094 101.257 57.8379 cv
101.263 57.8423 li
101.415 57.6348 101.577 57.1104 101.594 56.7657 cv
101.624 56.1836 101.484 54.1446 99.5499 53.9463 cv
98.4483 53.8335 97.6758 54.5059 97.6758 55.4693 cv
97.6758 56.4322 98.6553 56.6968 99.2212 56.5313 cv
99.3868 56.483 99.8882 56.0166 99.6983 55.4776 cv
99.5938 55.1792 100.146 55.4966 100.188 56.0621 cv
100.214 56.4351 100.146 56.628 100.022 56.9317 cv
99.9048 57.1592 99.5801 57.3956 99.4004 57.5108 cv
99.2076 57.6348 96.4878 58.7124 96.1949 54.796 cv
96.0894 53.3858 97.3902 49.3418 97.6319 48.1338 cv
97.8931 46.8277 98.0166 43.587 95.918 42.4214 cv
94.2164 41.6055 92.6446 42.8003 92.5372 44.0845 cv
92.4302 45.3687 93.1626 45.6304 93.5826 45.7823 cv
94.1578 45.9913 95.4825 45.6739 95.5416 44.7378 cv
95.5416 44.7378 96.0088 45.8672 95.3028 46.6119 cv
95.1846 46.7369 94.7925 47.0259 94.1993 47.1363 cv
91.9918 47.3155 91.379 46.2105 91.1089 45.7706 cv
90.626 44.9839 90.5157 44.1148 90.5337 42.9302 cv
90.5577 41.3692 91.7647 39.3453 94.0655 39.3453 cv
95.3355 39.4605 96.2056 39.8804 96.5801 40.6294 cv
97.0079 39.9341 97.0616 39.4522 96.7403 38.8638 cv
96.4195 38.2754 95.8311 37.6866 94.6539 37.4727 cv
94.7071 36.3492 96.9532 35.8272 97.4893 35.8677 cv
98.2999 35.9288 98.2964 35.9864 98.9878 36.2422 cv
99.0948 35.814 99.1475 34.8311 97.9229 34.0811 cv
95.0533 32.3238 93.4869 35.9073 93.4234 34.5298 cv
93.3213 32.3282 91.1006 32.1978 91.1006 32.1978 cv
91.1006 32.1978 91.4126 34.0811 91.2828 34.316 cv
91.1255 34.9781 89.6241 36.2955 89.1431 37.7935 cv
88.6612 39.292 88.7681 40.148 89.1963 41.2715 cv
89.1431 41.753 89.0357 41.753 89.0357 41.753 cv
88.5005 41.1109 88.126 40.0411 87.9659 39.0245 cv
87.8052 38.0079 87.418 36.1334 88.4878 32.0669 cv
89.5582 28.0005 91.9781 27.3067 92.46 27.3067 cv
93.1368 27.3067 93.6338 27.5596 93.9048 27.8418 cv
94.1421 28.0889 94.4092 28.6553 94.0762 29.085 cv
93.8682 29.3531 93.5826 29.2007 93.3697 28.9122 cv
93.0542 28.4839 92.5787 28.4717 92.2574 28.5254 cv
91.9366 28.5787 91.3619 28.9966 91.3619 29.585 cv
91.3619 30.1734 92.0372 31.3067 93.3213 31.4141 cv
94.4068 31.5044 95.3502 30.8257 95.7144 30.419 cv
95.7085 30.4312 95.7032 30.4429 95.7032 30.4429 cv
95.7032 30.4429 96.6661 29.5464 97.7256 28.9688 cv
98.6753 28.4502 99.3668 28.46 99.9405 28.5352 cv
100.578 28.6187 101.193 29.2095 101.434 30.5577 cv
101.72 30.4371 102.233 30.1338 102.108 29.065 cv
102.029 28.3897 100.856 27.4278 100.519 27.0909 cv
0 0 0 0 cmyk
f
0.053 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
100.519 27.0909 mo
100.519 26.6089 101.798 26.2461 102.617 26.0538 cv
102.047 25.0977 101.184 25.0279 100.971 24.9957 cv
100.323 24.897 99.9122 24.878 98.7369 26.2237 cv
99.2071 23.8199 97.6397 23.4893 97.4996 23.419 cv
97.378 23.3584 96.7227 23.4346 96.3858 23.8199 cv
96.8189 24.3013 97.5811 24.6348 97.7256 25.4532 cv
97.8702 26.272 97.4849 26.7051 97.0997 27.6202 cv
97.0191 27.6836 96.3458 29.0865 95.9649 29.8897 cv
96.1451 29.1685 96.3936 27.6368 96.3257 27.3643 cv
95.5416 24.2295 92.2505 23.6168 92.2994 21.4747 cv
92.3277 20.2481 92.5372 20.2251 92.668 19.5269 cv
92.9644 17.9415 91.8843 16.7837 91.8843 16.7837 cv
91.671 16.814 90.8702 16.9068 90.0914 16.981 cv
90.1729 16.7867 li
90.647 16.731 91.0811 16.6607 91.0811 16.6607 cv
94.2437 16.2896 95.2051 14.5552 95.2808 13.6485 cv
95.5416 10.5137 93.0874 9.39991 91.3218 9.39991 cv
89.3882 9.39991 89.1778 10.2315 89.0259 10.7696 cv
88.7789 11.6451 89.7154 12.439 90.4039 12.5167 cv
90.7525 12.5562 91.9918 12.8389 92.2759 11.9942 cv
92.4278 11.5435 92.4395 11.7549 92.7549 12.168 cv
93.1094 12.6324 92.9971 13.1954 92.5811 13.4742 cv
92.0469 13.8326 91.3619 13.9102 90.3165 13.9102 cv
89.2876 13.9102 87.9698 13.668 87.274 13.293 cv
86.5787 12.919 85.5084 11.9019 85.5621 10.7784 cv
85.6158 9.65479 86.9532 9.06592 87.4346 8.74512 cv
86.9532 8.26368 86.501 8.21729 85.7227 8.31739 cv
84.2808 8.50196 83.9034 9.60108 83.8497 10.0293 cv
83.7964 10.4576 84.3316 11.3135 84.5455 11.5274 cv
84.7593 11.7413 84.9732 11.8472 84.6524 11.9556 cv
84.5284 11.9976 84.2935 12.108 83.9073 11.7354 cv
82.8619 10.7276 83.0245 9.45899 82.9937 9.17334 cv
82.9419 8.69092 82.9087 6.66309 82.8331 6.28418 cv
82.7486 5.8584 82.3482 5.0962 81.7061 4.72168 cv
81.6587 4.93409 81.335 6.76563 81.0142 6.87256 cv
80.4258 6.44434 79.5513 4.45997 77.3223 4.35792 cv
76.7876 4.33301 76.6802 4.46485 76.4664 4.73243 cv
77.1617 5.10694 78.3921 7.08643 78.3389 7.40772 cv
77.7876 6.87696 76.1221 6.81153 76.1221 6.81153 cv
75.7632 6.81153 77.0303 7.80567 77.2979 8.01954 cv
77.7222 8.35938 78.6885 9.0879 79.1949 9.38721 cv
79.7647 9.72413 80.8536 10.5645 80.8536 10.5645 cv
80.8536 10.5645 80.9605 10.8853 80.7999 11.0459 cv
80.7999 11.0459 80.7203 10.9629 79.9439 10.5645 cv
79.0923 10.1275 76.4629 8.69776 75.8775 8.37061 cv
75.3814 8.09327 74.3467 7.59522 72.5953 7.59522 cv
70.4014 7.59522 69.5396 9.28272 69.5396 10.8345 cv
69.5396 10.9029 69.543 10.9737 69.546 11.0445 cv
69.3916 11.1265 li
69.1797 11.0435 li
69.0079 7.42139 68.8282 6.08106 65.1749 4.38135 cv
65.1416 4.48047 66.2051 6.76075 66.3462 8.05469 cv
66.4 8.54834 66.4 8.54834 66.4 8.54834 cv
66.2486 8.68653 65.9034 8.61768 65.752 8.37891 cv
65.6226 8.17481 63.5586 5.17286 62.3057 4.9751 cv
62.2071 5.07422 62.8335 5.70069 63.064 6.22803 cv
63.2203 6.58497 63.3438 7.23243 63.1231 7.3877 cv
62.7588 7.64502 62.2232 7.47022 61.8169 7.24463 cv
61.605 7.12696 60.2408 6.4336 60.3487 3.89405 cv
60.4122 3.69727 60.6006 2.9751 61.5376 2.81397 cv
61.3541 2.28467 60.8565 2.08448 60.2867 2.25342 cv
59.6651 2.43702 59.1065 3.02979 58.7818 3.08399 cv
58.4673 2.39551 li
58.4673 2.39551 58.0313 0.91504 57.0552 0.369629 cv
56.8897 0.336426 li
56.6744 0.382325 li
55.6983 0.928223 55.2291 2.37696 55.2291 2.37696 cv
54.9146 3.06543 li
54.5904 3.01124 54.0313 2.41846 53.4097 2.23487 cv
52.8404 2.06641 52.3423 2.26612 52.1592 2.79542 cv
53.0958 2.95704 53.2842 3.67872 53.3477 3.87598 cv
53.4561 6.41553 52.0918 7.1084 51.8799 7.22608 cv
51.4732 7.45166 50.938 7.62647 50.5738 7.36963 cv
50.3531 7.21387 50.4761 6.5669 50.6324 6.20948 cv
50.8633 5.68213 51.4898 5.05567 51.3907 4.95655 cv
50.1377 5.15479 48.0743 8.15626 47.9444 8.36036 cv
47.793 8.59913 47.4483 8.66797 47.2964 8.53028 cv
47.2964 8.53028 47.2964 8.53028 47.3501 8.03614 cv
47.4918 6.74268 48.5547 4.46192 48.522 4.36329 cv
45.0328 5.98584 44.712 7.28174 44.5401 10.5503 cv
44.15 10.6153 li
44.0782 9.12256 43.2012 7.57715 41.1016 7.57715 cv
39.3497 7.57715 38.315 8.07471 37.8194 8.35206 cv
37.2334 8.67969 34.6041 10.1094 33.7525 10.5459 cv
32.9761 10.9444 32.8965 11.0274 32.8965 11.0274 cv
32.7359 10.8672 32.8433 10.5459 32.8433 10.5459 cv
32.8433 10.5459 33.9317 9.70557 34.502 9.36866 cv
35.0079 9.06983 35.9742 8.34082 36.399 8.00147 cv
36.6666 7.7876 37.9332 6.79297 37.5743 6.79297 cv
37.5743 6.79297 35.9092 6.8584 35.358 7.38916 cv
35.3042 7.06788 36.5352 5.08838 37.2305 4.71387 cv
37.0162 4.44629 36.9092 4.31495 36.3741 4.33936 cv
34.1456 4.4419 33.271 6.42627 32.6827 6.85401 cv
32.3614 6.74708 32.0376 4.91553 31.9903 4.70313 cv
31.3482 5.07764 30.9483 5.83985 30.8633 6.26563 cv
30.7881 6.64454 30.7549 8.67237 30.7027 9.15479 cv
30.6724 9.44044 30.8345 10.709 29.7896 11.7168 cv
29.4029 12.0894 29.1685 11.9791 29.0445 11.9371 cv
28.7237 11.8287 28.9371 11.7232 29.1514 11.5093 cv
29.3653 11.295 29.9 10.439 29.8467 10.0108 cv
29.7935 9.58301 29.4156 8.4834 27.9737 8.29883 cv
27.1954 8.19922 26.7437 8.24512 26.2618 8.72706 cv
26.7437 9.04786 28.0811 9.63624 28.1348 10.7603 cv
28.1885 11.8838 27.1182 12.9004 26.4224 13.2745 cv
25.7271 13.6495 24.4092 13.8917 23.3799 13.8917 cv
22.335 13.8917 21.6495 13.814 21.1158 13.4561 cv
20.6993 13.1768 20.587 12.6138 20.9415 12.15 cv
21.2574 11.7369 21.2691 11.525 21.4205 11.9756 cv
21.7046 12.8209 22.9439 12.5376 23.293 12.4981 cv
23.981 12.4205 24.918 11.6265 24.6705 10.7515 cv
24.5191 10.2134 24.3082 9.38135 22.3746 9.38135 cv
20.6094 9.38135 18.1548 10.4952 18.4161 13.6304 cv
18.4913 14.5367 19.4527 16.2715 22.6153 16.6421 cv
22.6153 16.6421 23.0948 16.7198 23.5958 16.7769 cv
23.6407 16.9659 li
22.8511 16.8912 22.0289 16.7964 21.8121 16.7652 cv
21.8121 16.7652 20.732 17.9229 21.0284 19.5084 cv
21.1592 20.2066 21.3692 20.23 21.397 21.4561 cv
21.4458 23.5987 18.1548 24.211 17.3707 27.3462 cv
17.3028 27.6182 17.5518 29.1504 17.732 29.8716 cv
17.3506 29.0684 16.6773 27.6651 16.5972 27.6021 cv
16.212 26.6871 15.8267 26.2535 15.9712 25.4351 cv
16.1153 24.6163 16.8775 24.2828 17.3111 23.8013 cv
16.9737 23.4161 16.3184 23.3399 16.1968 23.4009 cv
16.0567 23.4708 14.4898 23.8013 14.96 26.2056 cv
13.7842 24.8594 13.3736 24.8785 12.7261 24.9771 cv
12.5127 25.0093 11.65 25.0796 11.0806 26.0352 cv
11.899 26.2276 13.1783 26.5909 13.1783 27.0723 cv
12.8409 27.4092 11.668 28.3716 11.5894 29.0464 cv
11.4639 30.1158 11.9766 30.4185 12.2632 30.5396 cv
12.504 29.191 13.1192 28.6001 13.7564 28.5166 cv
14.3301 28.4419 15.021 28.4322 15.9712 28.9502 cv
17.0308 29.5284 17.9937 30.4244 17.9937 30.4244 cv
17.9937 30.4244 17.9883 30.4131 17.982 30.4004 cv
18.3467 30.8072 19.2896 31.4859 20.3755 31.3956 cv
21.6597 31.2886 22.335 30.1553 22.335 29.5669 cv
22.335 28.9781 21.7603 28.5606 21.439 28.5069 cv
21.1182 28.4532 20.6426 28.4654 20.3272 28.8936 cv
20.1143 29.1827 19.8282 29.3345 19.6202 29.0665 cv
19.2872 28.6373 19.5547 28.0704 19.7916 27.8233 cv
20.063 27.5411 20.5596 27.2881 21.2364 27.2881 cv
21.7188 27.2881 24.1387 27.982 25.2085 32.0484 cv
26.2789 36.1148 25.8912 37.9893 25.731 39.0059 cv
25.5704 40.0225 25.1958 41.0928 24.6612 41.7349 cv
24.6612 41.7349 24.5538 41.7349 24.5 41.253 cv
24.9283 40.1294 25.0357 39.2735 24.5538 37.7754 cv
24.0723 36.2769 22.5708 34.9595 22.4136 34.2974 cv
22.2842 34.063 22.5962 32.1792 22.5962 32.1792 cv
22.5962 32.1792 20.3755 32.3096 20.2735 34.5113 cv
20.21 35.8887 18.6436 32.3052 15.7735 34.063 cv
14.5494 34.8126 14.6021 35.7955 14.709 36.2237 cv
15.4 35.9678 15.397 35.9102 16.2071 35.8492 cv
16.7432 35.8086 18.9893 36.3306 19.043 37.4542 cv
17.8658 37.6685 17.2774 38.2569 16.9561 38.8453 cv
16.6353 39.4341 16.689 39.9156 17.1168 40.6109 cv
17.4913 39.8624 18.3614 39.4419 19.6314 39.3272 cv
21.9322 39.3272 23.1392 41.3511 23.1626 42.9117 cv
23.1812 44.0967 23.0704 44.9659 22.5875 45.752 cv
22.3174 46.1919 21.7046 47.2974 19.4976 47.1177 cv
18.9039 47.0074 18.5118 46.7183 18.3936 46.5938 cv
17.6876 45.8487 18.1548 44.7193 18.1548 44.7193 cv
18.2144 45.6553 19.5386 45.9727 20.1143 45.7642 cv
20.5342 45.6124 21.2662 45.3501 21.1592 44.066 cv
21.0523 42.7818 19.4805 41.587 17.7784 42.4029 cv
15.6802 43.5689 15.8038 46.8091 16.065 48.1153 cv
16.3067 49.3233 17.607 53.3672 17.502 54.7774 cv
17.2085 58.6939 14.4893 57.6168 14.2959 57.4927 cv
14.1163 57.377 13.7916 57.1407 13.6753 56.9131 cv
13.5513 56.6094 13.4825 56.4166 13.5098 56.044 cv
13.5513 55.4781 14.1031 55.1607 13.9981 55.459 cv
13.8082 55.9981 14.3101 56.4644 14.4751 56.5132 cv
15.0411 56.6788 16.0206 56.4136 16.0206 55.4507 cv
16.0206 54.4874 15.2486 53.815 14.147 53.9283 cv
12.2129 54.1265 12.0728 56.1651 12.1026 56.7476 cv
12.1202 57.0918 12.2818 57.6168 12.4336 57.8238 cv
12.4395 57.8194 li
12.9083 58.5914 13.875 59.377 14.7979 59.5396 cv
17.1768 59.959 18.4625 58.8584 18.8765 58.4029 cv
19.4698 57.8648 19.9527 56.7198 19.9527 56.7198 cv
19.9527 56.7198 20.9458 57.0372 21.608 58.7481 cv
22.0777 60.3448 21.4605 61.5665 20.8721 62.3584 cv
19.6573 61.4249 19.8111 59.7266 19.8111 59.7266 cv
19.8111 59.7266 16.9449 62.417 17.5933 64.7491 cv
17.6451 64.9346 18.0484 66.5977 20.3282 67.0772 cv
20.7027 66.9161 21.022 66.3399 21.3418 66.3155 cv
22.0372 66.2618 23.6558 68.9815 24.0225 69.5372 cv
24.4019 70.1241 25.1534 71.2237 25.1534 71.7588 cv
25.1534 72.294 22.9014 70.6827 22.0186 69.7999 cv
21.1358 68.9161 21.3956 67.9708 20.647 67.9708 cv
20.4864 68.6661 20.6114 69.2237 20.4512 69.2764 cv
20.2901 69.3301 18.7203 67.7061 17.65 67.921 cv
16.5801 68.1338 15.1958 69.709 15.3565 70.7794 cv
15.7076 71.0332 17.3848 70.084 17.8121 70.0284 cv
18.1924 69.9786 18.6734 70.0997 18.4913 70.5831 cv
18.0635 70.7969 16.6319 72.4834 17.0547 72.7383 cv
17.4776 72.9932 17.607 72.1026 20.712 72.1504 cv
22.629 72.296 23.2584 73.1973 23.2374 73.8916 cv
23.2247 74.3233 23.1441 74.7247 22.8897 74.8067 cv
22.4278 74.9542 21.8082 74.9708 20.0914 74.6329 cv
18.6207 74.3428 18.5967 74.0235 18.6548 74.6651 cv
18.6871 75.0245 19.9283 75.4815 19.9283 76.0694 cv
19.9283 76.6582 16.7793 77.4229 19.1446 80.6416 cv
20.3638 81.9483 22.9815 82.0166 23.6294 81.6866 cv
23.7901 81.3653 21.7618 80.4004 22.0186 79.1172 cv
22.0621 78.8995 22.4976 77.8975 23.7164 77.8116 cv
24.4537 77.7579 23.8033 79.2481 25.3711 79.379 cv
25.3711 77.3868 26.3941 77.4737 26.3941 77.4737 cv
26.3941 77.4737 26.9493 77.375 28.3135 77.8692 cv
29.3208 78.2334 30.0792 78.4044 30.4 79.0997 cv
30.7212 79.796 30.4537 79.4747 29.9722 79.4747 cv
29.4903 79.4747 28.9307 79.0967 28.2886 79.2042 cv
27.646 79.3116 27.0118 80.0225 26.8516 80.7715 cv
26.691 81.5206 26.5718 83.171 27.3741 83.3838 cv
27.3741 83.3838 27.7657 81.8165 29.9864 80.9024 cv
30.6319 80.6368 31.5826 80.6582 32.5992 81.0332 cv
33.6158 81.4082 37.3023 83.1846 40.9942 83.1846 cv
44.6861 83.1846 47.1548 80.4581 47.629 79.4405 cv
47.7603 79.1573 47.858 78.8868 47.9405 78.6221 cv
47.982 78.9952 48.2676 79.6084 48.6792 79.9288 cv
49.1607 80.3028 50.2398 80.1133 49.7584 80.2735 cv
49.2769 80.4336 47.3731 81.1983 47.3731 81.626 cv
47.3731 82.0547 49.4376 81.3438 49.5977 81.504 cv
49.7584 81.6651 49.9454 81.7042 49.4625 82.0362 cv
48.9932 82.3575 45.9029 82.8497 45.9361 83.586 cv
45.9673 84.2881 46.084 86.1211 46.4585 86.0674 cv
47.6343 83.7168 52.1666 82.3809 51.2564 83.003 cv
51.0215 83.25 49.1587 84.671 49.732 85.5372 cv
49.9439 85.8584 51.1451 88.1973 51.3589 88.25 cv
51.5733 88.3038 51.0303 83.9776 54.0923 82.9493 cv
55.2124 82.5723 50.7452 85.9952 56.6363 90.4522 cv
56.7208 90.4795 56.6363 90.4522 56.6363 90.4522 cv
56.7208 90.4795 li
57.0601 90.4698 li
62.9512 86.0137 58.4839 82.5909 59.6045 82.9668 cv
62.6661 83.9961 62.1236 88.3223 62.3374 88.2696 cv
62.5518 88.2159 63.7525 85.876 63.9649 85.5557 cv
64.5376 84.6895 62.6753 83.2676 62.44 83.0206 cv
61.5303 82.3995 66.0626 83.7344 67.2383 86.086 cv
67.6128 86.1397 67.7291 84.3077 67.7608 83.6045 cv
67.7935 82.8682 64.7032 82.376 64.2339 82.0538 cv
63.7515 81.7237 63.9385 81.6827 64.0987 81.5225 cv
64.2593 81.3624 66.3238 82.0733 66.3238 81.6456 cv
66.3238 81.2168 64.42 80.4532 63.9385 80.292 cv
63.4566 80.1319 64.5362 80.3213 65.0176 79.9463 cv
65.4292 79.626 65.7149 79.0127 65.7559 78.6416 cv
65.8389 78.9053 65.9361 79.1758 66.0679 79.4581 cv
66.542 80.4776 69.0108 83.2042 72.7027 83.2042 cv
76.3941 83.2042 80.0811 81.4268 81.0972 81.0518 cv
82.1138 80.6778 83.065 80.6553 83.71 80.921 cv
85.9307 81.835 86.3223 83.4034 86.3223 83.4034 cv
87.125 83.1885 87.0054 81.5401 86.8448 80.7911 cv
86.6846 80.0411 86.0503 79.3292 85.4078 79.2227 cv
84.7662 79.1163 84.2061 79.4922 83.7247 79.4922 cv
83.2432 79.4922 82.9752 79.8135 83.2964 79.1182 cv
83.6172 78.4229 84.3755 78.253 85.3834 77.8877 cv
86.7471 77.3946 87.3023 77.4922 87.3023 77.4922 cv
87.3023 77.4922 88.3252 77.4044 88.3252 79.3965 cv
89.8931 79.2666 89.2432 77.7764 89.98 77.8292 cv
91.1993 77.9161 91.6348 78.918 91.6783 79.1358 cv
91.9346 80.42 89.9063 81.3838 90.0674 81.7042 cv
90.7149 82.0342 93.3326 81.9659 94.5518 80.6592 cv
96.917 77.4415 93.7681 76.6768 93.7681 76.0879 cv
93.7681 75.4991 95.0088 75.043 95.0416 74.6836 cv
95.1002 74.042 95.0757 74.3614 93.605 74.6504 cv
91.8887 74.9883 91.2691 74.9737 90.8072 74.8252 cv
90.5523 74.7432 90.4717 74.3418 90.459 73.9112 cv
90.438 73.2159 91.0679 72.3135 92.9844 72.169 cv
96.0894 72.1211 96.2193 73.0118 96.6421 72.7569 cv
97.065 72.501 95.6329 70.8155 95.2051 70.6016 cv
95.0235 70.1182 95.504 69.9971 95.8843 70.0469 cv
96.3121 70.1026 97.9888 71.0518 98.3399 70.7969 cv
98.5005 69.7276 97.1168 68.1534 96.0464 67.9385 cv
94.9766 67.7247 93.4063 69.3487 93.2457 69.296 cv
93.085 69.2413 93.21 68.6846 93.0499 67.9893 cv
92.3008 67.9893 92.5611 68.9346 91.6783 69.8174 cv
90.7955 70.7002 88.543 72.3126 88.543 71.7764 cv
88.543 71.2422 89.295 70.1416 89.6744 69.5547 cv
90.0406 69 91.6592 66.2803 92.3545 66.3331 cv
92.6749 66.3584 92.9937 66.9346 93.3682 67.0958 cv
95.648 66.6163 96.0513 64.9542 96.1031 64.7676 cv
96.7515 62.4366 93.8858 59.7447 93.8858 59.7447 cv
93.8858 59.7447 94.0391 61.4444 92.8248 62.377 cv
92.2364 61.584 91.6192 60.3624 92.0884 58.7662 cv
92.7505 57.0557 93.7442 56.7383 93.7442 56.7383 cv
93.7442 56.7383 94.2271 57.8834 94.8199 58.4214 cv
95.2339 58.877 96.5196 59.9776 98.899 59.5582 cv
99.8218 59.3956 100.789 58.6094 101.257 57.8379 cv
101.263 57.8423 li
101.415 57.6348 101.577 57.1104 101.594 56.7657 cv
101.624 56.1836 101.484 54.1446 99.5499 53.9463 cv
98.4483 53.8335 97.6758 54.5059 97.6758 55.4693 cv
97.6758 56.4322 98.6553 56.6968 99.2212 56.5313 cv
99.3868 56.483 99.8882 56.0166 99.6983 55.4776 cv
99.5938 55.1792 100.146 55.4966 100.188 56.0621 cv
100.214 56.4351 100.146 56.628 100.022 56.9317 cv
99.9048 57.1592 99.5801 57.3956 99.4004 57.5108 cv
99.2076 57.6348 96.4878 58.7124 96.1949 54.796 cv
96.0894 53.3858 97.3902 49.3418 97.6319 48.1338 cv
97.8931 46.8277 98.0166 43.587 95.918 42.4214 cv
94.2164 41.6055 92.6446 42.8003 92.5372 44.0845 cv
92.4302 45.3687 93.1626 45.6304 93.5826 45.7823 cv
94.1578 45.9913 95.4825 45.6739 95.5416 44.7378 cv
95.5416 44.7378 96.0088 45.8672 95.3028 46.6119 cv
95.1846 46.7369 94.7925 47.0259 94.1993 47.1363 cv
91.9918 47.3155 91.379 46.2105 91.1089 45.7706 cv
90.626 44.9839 90.5157 44.1148 90.5337 42.9302 cv
90.5577 41.3692 91.7647 39.3453 94.0655 39.3453 cv
95.3355 39.4605 96.2056 39.8804 96.5801 40.6294 cv
97.0079 39.9341 97.0616 39.4522 96.7403 38.8638 cv
96.4195 38.2754 95.8311 37.6866 94.6539 37.4727 cv
94.7071 36.3492 96.9532 35.8272 97.4893 35.8677 cv
98.2999 35.9288 98.2964 35.9864 98.9878 36.2422 cv
99.0948 35.814 99.1475 34.8311 97.9229 34.0811 cv
95.0533 32.3238 93.4869 35.9073 93.4234 34.5298 cv
93.3213 32.3282 91.1006 32.1978 91.1006 32.1978 cv
91.1006 32.1978 91.4126 34.0811 91.2828 34.316 cv
91.1255 34.9781 89.6241 36.2955 89.1431 37.7935 cv
88.6612 39.292 88.7681 40.148 89.1963 41.2715 cv
89.1431 41.753 89.0357 41.753 89.0357 41.753 cv
88.5005 41.1109 88.126 40.0411 87.9659 39.0245 cv
87.8052 38.0079 87.418 36.1334 88.4878 32.0669 cv
89.5582 28.0005 91.9781 27.3067 92.46 27.3067 cv
93.1368 27.3067 93.6338 27.5596 93.9048 27.8418 cv
94.1421 28.0889 94.4092 28.6553 94.0762 29.085 cv
93.8682 29.3531 93.5826 29.2007 93.3697 28.9122 cv
93.0542 28.4839 92.5787 28.4717 92.2574 28.5254 cv
91.9366 28.5787 91.3619 28.9966 91.3619 29.585 cv
91.3619 30.1734 92.0372 31.3067 93.3213 31.4141 cv
94.4068 31.5044 95.3502 30.8257 95.7144 30.419 cv
95.7085 30.4312 95.7032 30.4429 95.7032 30.4429 cv
95.7032 30.4429 96.6661 29.5464 97.7256 28.9688 cv
98.6753 28.4502 99.3668 28.46 99.9405 28.5352 cv
100.578 28.6187 101.193 29.2095 101.434 30.5577 cv
101.72 30.4371 102.233 30.1338 102.108 29.065 cv
102.029 28.3897 100.856 27.4278 100.519 27.0909 cv
cp
@
56.8658 9.03858 mo
56.8658 9.03858 57.482 10.1211 58.9966 11.0015 cv
60.0621 11.6207 62.3799 12.167 62.3799 12.167 cv
63.8638 12.5464 66.5792 12.7554 68.4117 14.4185 cv
69.6612 15.5528 70.6827 16.1021 72.5025 16.0264 cv
74.251 15.9532 74.8975 15.129 75.1363 14.8536 cv
76.0831 13.7608 75.9136 12.7422 75.9136 12.7422 cv
76.6919 13.0049 78.5718 14 78.917 14.1636 cv
79.6094 14.4913 84.6334 17.3399 85.6534 17.4493 cv
85.1265 18.1563 84.7242 18.2505 84.3785 18.2505 cv
83.65 18.2505 82.1563 17.959 82.0835 18.4693 cv
82.0835 18.4693 81.8282 20.3272 82.8848 21.1285 cv
82.8848 21.1285 81.3238 24.1543 82.8174 26.0123 cv
84.3111 25.4292 84.524 25.1358 84.524 25.1358 cv
84.3785 25.8277 84.5425 26.6382 85.1436 26.5562 cv
85.4263 26.5181 85.7632 26.5381 85.982 26.6744 cv
85.982 26.6744 84.2964 27.5762 83.2584 30.9371 cv
82.6392 32.94 82.6026 35.3775 82.6026 35.3775 cv
31.0367 35.3775 li
31.0367 35.3775 31.1553 33.2979 30.4234 31.0259 cv
29.3565 27.71 27.7491 26.6929 27.7491 26.6929 cv
28.1133 26.5474 28.3228 26.5206 28.606 26.5562 cv
29.5362 26.6744 29.2251 25.4634 29.1465 25.1446 cv
30.9136 26.0308 li
32.3707 23.6626 30.7862 21.1377 30.7862 21.1377 cv
31.8204 20.4908 31.648 18.4878 31.648 18.4878 cv
31.3531 18.1197 30.2457 18.2867 29.292 18.2598 cv
28.9703 18.2505 28.5147 18.1236 28.0777 17.4678 cv
29.6807 16.9576 34.3052 14.4307 34.6231 14.2188 cv
34.941 14.0069 37.7574 12.751 37.7574 12.751 cv
37.7051 13.084 37.983 14.1094 38.5147 14.8536 cv
39.0665 15.6265 40.1978 16.0958 41.4654 16.0626 cv
43.2867 16.0157 44.0748 15.5367 45.5816 14.2046 cv
47.4356 12.5665 51.0396 12.3062 51.4102 12.0943 cv
51.4102 12.0943 53.8194 11.6207 54.7618 11.0015 cv
56.1768 10.0718 56.8658 9.03858 56.8658 9.03858 cv
/0 
<<
/Name (PANTONE 186)
/CSA /0 
/TintMethod /Subtractive
/TintProc null
/MappedCSA null
/NComponents 4 
/Components [ 0 0.91 0.66 0.06 ] 
>>
add_csd
1 /0 get_csd
sepcs
1 sep
f
0.2612 lw
56.8658 9.03858 mo
56.8658 9.03858 57.482 10.1211 58.9966 11.0015 cv
60.0621 11.6207 62.3799 12.167 62.3799 12.167 cv
63.8638 12.5464 66.5792 12.7554 68.4117 14.4185 cv
69.6612 15.5528 70.6827 16.1021 72.5025 16.0264 cv
74.251 15.9532 74.8975 15.129 75.1363 14.8536 cv
76.0831 13.7608 75.9136 12.7422 75.9136 12.7422 cv
76.6919 13.0049 78.5718 14 78.917 14.1636 cv
79.6094 14.4913 84.6334 17.3399 85.6534 17.4493 cv
85.1265 18.1563 84.7242 18.2505 84.3785 18.2505 cv
83.65 18.2505 82.1563 17.959 82.0835 18.4693 cv
82.0835 18.4693 81.8282 20.3272 82.8848 21.1285 cv
82.8848 21.1285 81.3238 24.1543 82.8174 26.0123 cv
84.3111 25.4292 84.524 25.1358 84.524 25.1358 cv
84.3785 25.8277 84.5425 26.6382 85.1436 26.5562 cv
85.4263 26.5181 85.7632 26.5381 85.982 26.6744 cv
85.982 26.6744 84.2964 27.5762 83.2584 30.9371 cv
82.6392 32.94 82.6026 35.3775 82.6026 35.3775 cv
31.0367 35.3775 li
31.0367 35.3775 31.1553 33.2979 30.4234 31.0259 cv
29.3565 27.71 27.7491 26.6929 27.7491 26.6929 cv
28.1133 26.5474 28.3228 26.5206 28.606 26.5562 cv
29.5362 26.6744 29.2251 25.4634 29.1465 25.1446 cv
30.9136 26.0308 li
32.3707 23.6626 30.7862 21.1377 30.7862 21.1377 cv
31.8204 20.4908 31.648 18.4878 31.648 18.4878 cv
31.3531 18.1197 30.2457 18.2867 29.292 18.2598 cv
28.9703 18.2505 28.5147 18.1236 28.0777 17.4678 cv
29.6807 16.9576 34.3052 14.4307 34.6231 14.2188 cv
34.941 14.0069 37.7574 12.751 37.7574 12.751 cv
37.7051 13.084 37.983 14.1094 38.5147 14.8536 cv
39.0665 15.6265 40.1978 16.0958 41.4654 16.0626 cv
43.2867 16.0157 44.0748 15.5367 45.5816 14.2046 cv
47.4356 12.5665 51.0396 12.3062 51.4102 12.0943 cv
51.4102 12.0943 53.8194 11.6207 54.7618 11.0015 cv
56.1768 10.0718 56.8658 9.03858 56.8658 9.03858 cv
cp
1 /0 get_csd
sepcs
1 sep
@
100.033 56.9239 mo
99.9166 57.1514 99.5918 57.3877 99.4117 57.5035 cv
99.2188 57.6275 96.4991 58.7051 96.2056 54.7876 cv
96.1002 53.3775 97.4014 49.3326 97.6431 48.1246 cv
97.9044 46.8179 98.0279 43.5767 95.9288 42.4107 cv
94.2266 41.5948 92.6544 42.7901 92.5474 44.0743 cv
92.4405 45.3589 93.1729 45.6207 93.5928 45.773 cv
94.1685 45.9815 95.4932 45.6641 95.5523 44.7276 cv
95.5523 44.7276 96.0196 45.8575 95.3135 46.6021 cv
95.1954 46.7271 94.8033 47.0162 94.21 47.1265 cv
92.002 47.3062 91.3892 46.2007 91.1187 45.7608 cv
90.6358 44.9742 90.5254 44.105 90.5435 42.92 cv
90.5674 41.3589 91.7745 39.3345 94.0757 39.3345 cv
95.3458 39.4493 96.2164 39.8697 96.5909 40.6187 cv
97.0191 39.9229 97.0723 39.4415 96.7515 38.8526 cv
96.4302 38.2642 95.8418 37.6753 94.6646 37.4615 cv
94.7178 36.3375 96.9644 35.8155 97.5005 35.856 cv
98.3111 35.917 98.3077 35.9747 98.9991 36.2305 cv
99.106 35.8023 99.1587 34.8194 97.9341 34.0694 cv
95.064 32.3111 93.4971 35.8956 93.4336 34.5181 cv
93.3316 32.316 91.1104 32.1851 91.1104 32.1851 cv
91.1104 32.1851 91.4224 34.0694 91.293 34.3038 cv
91.1353 34.9659 89.6338 36.2837 89.1524 37.7823 cv
88.6705 39.2808 88.7774 40.1368 89.2056 41.2608 cv
89.1524 41.7427 89.0455 41.7427 89.0455 41.7427 cv
88.5103 41.1006 88.1353 40.0298 87.9752 39.0132 cv
87.8145 37.9966 87.4268 36.1216 88.4976 32.0547 cv
89.5679 27.9874 91.9883 27.2935 92.4703 27.2935 cv
93.1475 27.2935 93.6441 27.5464 93.9151 27.8287 cv
94.1524 28.0757 94.4195 28.6426 94.0865 29.0718 cv
93.8785 29.3404 93.5928 29.188 93.3799 28.899 cv
93.0645 28.4708 92.5889 28.459 92.2676 28.5123 cv
91.9468 28.566 91.3716 28.9834 91.3716 29.5723 cv
91.3716 30.1607 92.0469 31.2945 93.3316 31.4014 cv
94.6158 31.5084 95.71 30.5352 95.8702 30.2144 cv
96.0308 29.8931 96.4195 27.6836 96.3365 27.3511 cv
95.5523 24.2154 92.2608 23.6031 92.3096 21.4605 cv
92.3374 20.2339 92.5474 20.2105 92.6783 19.5118 cv
92.9747 17.9263 91.8941 16.7686 91.8941 16.7686 cv
91.5196 16.8218 89.3316 17.0674 88.6358 17.0674 cv
88.6358 17.0674 88.0723 18.3765 86.2154 19.1866 cv
85.0088 19.7125 84.4805 19.6583 83.7315 19.4439 cv
83.6783 19.8184 83.8433 20.0342 84.2129 20.2295 cv
85.1299 20.7134 84.9698 21.0499 84.9698 21.2105 cv
84.9698 21.3711 83.6246 22.2095 83.6246 24.2432 cv
83.9991 24.1358 85.7759 22.3326 87.0601 22.3863 cv
87.3814 22.6539 86.9507 22.9952 86.7818 23.3868 cv
86.6148 23.7725 86.3536 24.4571 86.3536 25.0992 cv
86.9424 24.7784 87.6915 24.2964 88.4405 24.2964 cv
89.19 24.2964 90.3135 24.9922 90.3135 25.3668 cv
89.4576 26.1158 85.9791 27.8287 85.0694 31.3072 cv
84.1597 34.7857 84.5342 39.4947 85.337 41.7427 cv
86.1397 43.9903 87.6377 47.0406 90.7955 48.2178 cv
91.8946 48.5909 92.6172 48.4742 92.8292 48.4322 cv
93.5191 48.2945 94.274 47.8433 94.4878 47.7364 cv
94.6485 47.9502 94.2794 48.876 93.6436 49.9898 cv
93.23 50.7144 92.4986 51.8873 90.6495 52.0806 cv
89.3389 52.108 88.6763 50.4561 89.7491 50.1065 cv
89.7388 50.6041 89.8638 50.7837 90.2774 51.0044 cv
90.627 51.1905 91.0538 50.9571 91.2144 50.6895 cv
91.375 50.4219 91.3668 49.6861 90.9815 49.3604 cv
90.6783 49.1036 90.4742 48.8599 89.6182 48.9136 cv
88.7618 48.9673 87.5069 50.6148 88.4976 52.1749 cv
88.7178 52.522 89.2735 53.397 90.5254 53.5015 cv
91.4336 53.5777 92.959 52.9834 93.5611 52.4532 cv
94.1407 51.9424 94.1407 51.6666 94.8091 51.6426 cv
95.1836 52.0708 93.5738 53.4063 93.2437 53.6124 cv
91.9551 54.4151 91.397 54.5376 90.065 54.9185 cv
88.608 55.335 88.4942 56.0313 88.066 57.0479 cv
88.7081 57.0479 88.9292 57.1021 89.4576 57.2085 cv
89.9454 57.3067 90.2115 57.5923 90.2603 57.7437 cv
90.7051 59.1866 90.1666 61.0909 90.0152 62.167 cv
90.2188 62.6602 92.3057 63.4639 92.8853 62.4385 cv
92.2828 61.6485 91.6158 60.4004 92.0987 58.7588 cv
92.7608 57.0479 93.7544 56.7305 93.7544 56.7305 cv
93.7544 56.7305 94.2374 57.876 94.8306 58.4141 cv
95.2447 58.8692 96.5308 59.9703 98.9102 59.5508 cv
99.8809 59.3799 100.907 58.5191 101.344 57.7105 cv
true sop
/1 
<<
/Name (PANTONE 124)
/CSA /0 
/TintMethod /Subtractive
/TintProc null
/MappedCSA null
/NComponents 4 
/Components [ 0 0.275 1 0.06 ] 
>>
add_csd
1 /1 get_csd
sepcs
1 sep
f
0.4477 lw
100.033 56.9239 mo
99.9166 57.1514 99.5918 57.3877 99.4117 57.5035 cv
99.2188 57.6275 96.4991 58.7051 96.2056 54.7876 cv
96.1002 53.3775 97.4014 49.3326 97.6431 48.1246 cv
97.9044 46.8179 98.0279 43.5767 95.9288 42.4107 cv
94.2266 41.5948 92.6544 42.7901 92.5474 44.0743 cv
92.4405 45.3589 93.1729 45.6207 93.5928 45.773 cv
94.1685 45.9815 95.4932 45.6641 95.5523 44.7276 cv
95.5523 44.7276 96.0196 45.8575 95.3135 46.6021 cv
95.1954 46.7271 94.8033 47.0162 94.21 47.1265 cv
92.002 47.3062 91.3892 46.2007 91.1187 45.7608 cv
90.6358 44.9742 90.5254 44.105 90.5435 42.92 cv
90.5674 41.3589 91.7745 39.3345 94.0757 39.3345 cv
95.3458 39.4493 96.2164 39.8697 96.5909 40.6187 cv
97.0191 39.9229 97.0723 39.4415 96.7515 38.8526 cv
96.4302 38.2642 95.8418 37.6753 94.6646 37.4615 cv
94.7178 36.3375 96.9644 35.8155 97.5005 35.856 cv
98.3111 35.917 98.3077 35.9747 98.9991 36.2305 cv
99.106 35.8023 99.1587 34.8194 97.9341 34.0694 cv
95.064 32.3111 93.4971 35.8956 93.4336 34.5181 cv
93.3316 32.316 91.1104 32.1851 91.1104 32.1851 cv
91.1104 32.1851 91.4224 34.0694 91.293 34.3038 cv
91.1353 34.9659 89.6338 36.2837 89.1524 37.7823 cv
88.6705 39.2808 88.7774 40.1368 89.2056 41.2608 cv
89.1524 41.7427 89.0455 41.7427 89.0455 41.7427 cv
88.5103 41.1006 88.1353 40.0298 87.9752 39.0132 cv
87.8145 37.9966 87.4268 36.1216 88.4976 32.0547 cv
89.5679 27.9874 91.9883 27.2935 92.4703 27.2935 cv
93.1475 27.2935 93.6441 27.5464 93.9151 27.8287 cv
94.1524 28.0757 94.4195 28.6426 94.0865 29.0718 cv
93.8785 29.3404 93.5928 29.188 93.3799 28.899 cv
93.0645 28.4708 92.5889 28.459 92.2676 28.5123 cv
91.9468 28.566 91.3716 28.9834 91.3716 29.5723 cv
91.3716 30.1607 92.0469 31.2945 93.3316 31.4014 cv
94.6158 31.5084 95.71 30.5352 95.8702 30.2144 cv
96.0308 29.8931 96.4195 27.6836 96.3365 27.3511 cv
95.5523 24.2154 92.2608 23.6031 92.3096 21.4605 cv
92.3374 20.2339 92.5474 20.2105 92.6783 19.5118 cv
92.9747 17.9263 91.8941 16.7686 91.8941 16.7686 cv
91.5196 16.8218 89.3316 17.0674 88.6358 17.0674 cv
88.6358 17.0674 88.0723 18.3765 86.2154 19.1866 cv
85.0088 19.7125 84.4805 19.6583 83.7315 19.4439 cv
83.6783 19.8184 83.8433 20.0342 84.2129 20.2295 cv
85.1299 20.7134 84.9698 21.0499 84.9698 21.2105 cv
84.9698 21.3711 83.6246 22.2095 83.6246 24.2432 cv
83.9991 24.1358 85.7759 22.3326 87.0601 22.3863 cv
87.3814 22.6539 86.9507 22.9952 86.7818 23.3868 cv
86.6148 23.7725 86.3536 24.4571 86.3536 25.0992 cv
86.9424 24.7784 87.6915 24.2964 88.4405 24.2964 cv
89.19 24.2964 90.3135 24.9922 90.3135 25.3668 cv
89.4576 26.1158 85.9791 27.8287 85.0694 31.3072 cv
84.1597 34.7857 84.5342 39.4947 85.337 41.7427 cv
86.1397 43.9903 87.6377 47.0406 90.7955 48.2178 cv
91.8946 48.5909 92.6172 48.4742 92.8292 48.4322 cv
93.5191 48.2945 94.274 47.8433 94.4878 47.7364 cv
94.6485 47.9502 94.2794 48.876 93.6436 49.9898 cv
93.23 50.7144 92.4986 51.8873 90.6495 52.0806 cv
89.3389 52.108 88.6763 50.4561 89.7491 50.1065 cv
89.7388 50.6041 89.8638 50.7837 90.2774 51.0044 cv
90.627 51.1905 91.0538 50.9571 91.2144 50.6895 cv
91.375 50.4219 91.3668 49.6861 90.9815 49.3604 cv
90.6783 49.1036 90.4742 48.8599 89.6182 48.9136 cv
88.7618 48.9673 87.5069 50.6148 88.4976 52.1749 cv
88.7178 52.522 89.2735 53.397 90.5254 53.5015 cv
91.4336 53.5777 92.959 52.9834 93.5611 52.4532 cv
94.1407 51.9424 94.1407 51.6666 94.8091 51.6426 cv
95.1836 52.0708 93.5738 53.4063 93.2437 53.6124 cv
91.9551 54.4151 91.397 54.5376 90.065 54.9185 cv
88.608 55.335 88.4942 56.0313 88.066 57.0479 cv
88.7081 57.0479 88.9292 57.1021 89.4576 57.2085 cv
89.9454 57.3067 90.2115 57.5923 90.2603 57.7437 cv
90.7051 59.1866 90.1666 61.0909 90.0152 62.167 cv
90.2188 62.6602 92.3057 63.4639 92.8853 62.4385 cv
92.2828 61.6485 91.6158 60.4004 92.0987 58.7588 cv
92.7608 57.0479 93.7544 56.7305 93.7544 56.7305 cv
93.7544 56.7305 94.2374 57.876 94.8306 58.4141 cv
95.2447 58.8692 96.5308 59.9703 98.9102 59.5508 cv
99.8809 59.3799 100.907 58.5191 101.344 57.7105 cv
1 /1 get_csd
sepcs
1 sep
@
101.275 57.8345 mo
101.427 57.6275 101.589 57.1026 101.606 56.7584 cv
101.636 56.1758 101.496 54.1363 99.5616 53.938 cv
98.4595 53.8252 97.6871 54.4976 97.6871 55.461 cv
97.6871 56.4244 98.6666 56.689 99.2325 56.5235 cv
99.3985 56.4752 99.8995 56.0088 99.71 55.4698 cv
99.605 55.1714 100.157 55.4888 100.199 56.0542 cv
100.226 56.4273 100.157 56.6202 100.033 56.9239 cv
1 /1 get_csd
sepcs
1 sep
f
101.275 57.8345 mo
101.427 57.6275 101.589 57.1026 101.606 56.7584 cv
101.636 56.1758 101.496 54.1363 99.5616 53.938 cv
98.4595 53.8252 97.6871 54.4976 97.6871 55.461 cv
97.6871 56.4244 98.6666 56.689 99.2325 56.5235 cv
99.3985 56.4752 99.8995 56.0088 99.71 55.4698 cv
99.605 55.1714 100.157 55.4888 100.199 56.0542 cv
100.226 56.4273 100.157 56.6202 100.033 56.9239 cv
1 /1 get_csd
sepcs
1 sep
@
95.7139 30.4302 mo
95.7139 30.4302 96.9976 27.6958 97.1104 27.607 cv
97.4957 26.6919 97.8814 26.2584 97.7364 25.4395 cv
97.5923 24.6211 96.8301 24.2876 96.3965 23.8057 cv
96.7334 23.4205 97.3892 23.3443 97.5108 23.4053 cv
97.6509 23.4751 99.2183 23.8057 98.7481 26.2105 cv
99.9239 24.8643 100.335 24.8834 100.982 24.9815 cv
101.196 25.0142 102.059 25.084 102.629 26.0401 cv
101.81 26.2325 100.531 26.5958 100.531 27.0772 cv
100.868 27.4146 102.041 28.377 102.12 29.0518 cv
102.245 30.1211 101.732 30.4244 101.446 30.545 cv
101.205 29.1963 100.589 28.6055 99.9522 28.522 cv
99.378 28.4468 98.6871 28.4376 97.7364 28.9556 cv
96.6773 29.5337 95.7139 30.4302 95.7139 30.4302 cv
false sop
1 /1 get_csd
sepcs
1 sep
f
95.7139 30.4302 mo
95.7139 30.4302 96.9976 27.6958 97.1104 27.607 cv
97.4957 26.6919 97.8814 26.2584 97.7364 25.4395 cv
97.5923 24.6211 96.8301 24.2876 96.3965 23.8057 cv
96.7334 23.4205 97.3892 23.3443 97.5108 23.4053 cv
97.6509 23.4751 99.2183 23.8057 98.7481 26.2105 cv
99.9239 24.8643 100.335 24.8834 100.982 24.9815 cv
101.196 25.0142 102.059 25.084 102.629 26.0401 cv
101.81 26.2325 100.531 26.5958 100.531 27.0772 cv
100.868 27.4146 102.041 28.377 102.12 29.0518 cv
102.245 30.1211 101.732 30.4244 101.446 30.545 cv
101.205 29.1963 100.589 28.6055 99.9522 28.522 cv
99.378 28.4468 98.6871 28.4376 97.7364 28.9556 cv
96.6773 29.5337 95.7139 30.4302 95.7139 30.4302 cv
cp
1 /1 get_csd
sepcs
1 sep
@
63.7857 50.3624 mo
86.3086 50.3624 li
86.0787 52.7037 87.3892 53.8213 87.9371 54.0694 cv
87.9371 54.0694 86.2305 55.4771 86.3267 58.4439 cv
86.3267 58.4439 88.1597 58.1304 88.4932 58.6509 cv
88.8638 59.2286 88.2725 61.6866 87.9966 62.459 cv
87.167 62.459 63.7725 62.4776 63.7725 62.4776 cv
63.7725 76.378 li
63.7754 76.6807 61.7989 76.9249 60.606 77.3487 cv
59.8257 77.625 58.1363 78.4659 56.8389 80.0577 cv
55.4039 78.4571 54.2281 77.6807 53.4034 77.3487 cv
52.3252 76.9122 49.7325 76.6768 49.7437 76.378 cv
49.7437 75.4141 49.7437 62.4542 49.7437 62.4542 cv
25.9024 62.4542 li
25.7691 62.0772 25.5069 60.962 25.4058 60.3067 cv
25.2676 59.3956 25.3809 58.7676 25.3809 58.7676 cv
25.3501 58.4297 26.3252 58.1724 27.4292 58.4297 cv
27.6133 55.3941 25.8194 54.0694 25.8194 54.0694 cv
26.8404 53.4991 27.6133 52.2481 27.4478 50.3677 cv
28.2256 50.3677 49.7579 50.3677 49.7579 50.3677 cv
49.7579 36.9712 li
63.7857 36.9712 li
63.7857 50.3624 li
/2 
<<
/Name (BLUE 072)
/CSA /0 
/TintMethod /Subtractive
/TintProc null
/MappedCSA null
/NComponents 4 
/Components [ 1 0.79 0 0 ] 
>>
add_csd
1 /2 get_csd
sepcs
1 sep
f
0.2613 lw
63.7857 50.3624 mo
86.3086 50.3624 li
86.0787 52.7037 87.3892 53.8213 87.9371 54.0694 cv
87.9371 54.0694 86.2305 55.4771 86.3267 58.4439 cv
86.3267 58.4439 88.1597 58.1304 88.4932 58.6509 cv
88.8638 59.2286 88.2725 61.6866 87.9966 62.459 cv
87.167 62.459 63.7725 62.4776 63.7725 62.4776 cv
63.7725 76.378 li
63.7754 76.6807 61.7989 76.9249 60.606 77.3487 cv
59.8257 77.625 58.1363 78.4659 56.8389 80.0577 cv
55.4039 78.4571 54.2281 77.6807 53.4034 77.3487 cv
52.3252 76.9122 49.7325 76.6768 49.7437 76.378 cv
49.7437 75.4141 49.7437 62.4542 49.7437 62.4542 cv
25.9024 62.4542 li
25.7691 62.0772 25.5069 60.962 25.4058 60.3067 cv
25.2676 59.3956 25.3809 58.7676 25.3809 58.7676 cv
25.3501 58.4297 26.3252 58.1724 27.4292 58.4297 cv
27.6133 55.3941 25.8194 54.0694 25.8194 54.0694 cv
26.8404 53.4991 27.6133 52.2481 27.4478 50.3677 cv
28.2256 50.3677 49.7579 50.3677 49.7579 50.3677 cv
49.7579 36.9712 li
63.7857 36.9712 li
63.7857 50.3624 li
cp
1 /2 get_csd
sepcs
1 sep
@
53.8184 42.396 mo
51.9136 43.6626 li
53.7969 44.962 li
53.3394 47.2134 li
55.584 46.792 li
56.8423 48.709 li
58.1329 46.8135 li
60.3697 47.274 li
59.9576 44.9625 li
61.8619 43.6929 li
59.9727 42.4488 li
60.4542 40.1607 li
58.1856 40.6192 li
56.8389 38.7393 li
55.6363 40.5972 li
53.3995 40.1373 li
53.8184 42.396 li
1 /1 get_csd
sepcs
0.3 sep
f
0.784001 lw
67.4063 53.2442 mo
69.3658 53.2442 li
1 /1 get_csd
sepcs
0.3 sep
@
67.4063 55.1919 mo
69.3658 55.1919 li
1 /1 get_csd
sepcs
0.3 sep
@
67.4063 57.1719 mo
69.3658 57.1719 li
1 /1 get_csd
sepcs
0.3 sep
@
67.4063 59.1319 mo
69.3658 59.1319 li
1 /1 get_csd
sepcs
0.3 sep
@
48.5982 61.7647 mo
56.356 61.7647 li
56.356 61.1075 li
56.356 61.1075 55.6294 60.4307 52.6119 60.4307 cv
50.9195 60.6153 49.337 61.0928 48.5982 61.7647 cv
1 /1 get_csd
sepcs
0.3 sep
f
65.0782 61.7647 mo
57.3204 61.7647 li
57.3204 61.1075 li
57.3204 61.1075 58.0469 60.4307 61.0645 60.4307 cv
62.7569 60.6153 64.3394 61.0928 65.0782 61.7647 cv
1 /1 get_csd
sepcs
0.3 sep
f
48.8228 60.4415 mo
48.8228 50.2227 li
48.8228 50.2227 50.7486 49.7662 51.5757 49.7735 cv
52.5982 49.7828 55.358 50.0772 56.3643 50.8834 cv
56.3643 51.5826 56.3643 60.0489 56.3643 60.0489 cv
56.3643 60.0489 54.6524 59.5708 53.1871 59.5708 cv
50.9424 59.5708 48.8228 60.4415 48.8228 60.4415 cv
0 0 0 0 cmyk
f
46.9268 61.3711 mo
46.9268 51.3477 li
46.9268 51.3477 47.4468 50.8501 47.918 50.6656 cv
47.918 51.171 47.918 60.711 47.918 60.711 cv
47.918 60.711 47.0127 61.1377 46.9268 61.3711 cv
f
0.4775 lw
51.2491 57.6202 mo
52.7823 57.0684 54.5894 57.6387 54.5894 57.6387 cv
1 /2 get_csd
sepcs
1 sep
@
51.2369 55.8404 mo
52.7823 55.3619 54.5806 55.9551 54.5806 55.9551 cv
1 /2 get_csd
sepcs
1 sep
@
51.2491 54.1934 mo
52.6207 53.8668 54.5806 54.4058 54.5806 54.4058 cv
1 /2 get_csd
sepcs
1 sep
@
51.2491 52.4903 mo
52.6207 52.1636 54.5894 52.8082 54.5894 52.8082 cv
1 /2 get_csd
sepcs
1 sep
@
7.70655 71.1622 mo
1.65918 74.2706 li
-0.0273438 73.9405 -0.701661 71.5411 0.947266 70.0206 cv
0.947266 70.0206 3.7793 68.2276 7.30762 66.8262 cv
11.7647 65.0557 16.6026 75.336 13.5787 78.3379 cv
13.5787 78.3379 13.3834 78.587 12.0586 79.1143 cv
11.4229 79.3672 11.0733 79.5147 11.0733 79.5147 cv
9.83252 78.6954 9.38819 76.5909 9.92334 75.8995 cv
9.61963 76.0372 9.04688 76.3174 8.90235 76.9483 cv
8.10645 80.42 12.6011 85.294 19.4996 85.586 cv
26.0127 85.8624 31.0914 85.0577 36.6651 86.7999 cv
42.2388 88.542 48.3697 96.9424 56.877 96.9424 cv
56.8799 105.902 li
44.314 105.902 38.8375 96.8829 32.9498 94.8956 cv
27.4947 93.0538 20.438 95.042 13.7618 93.2764 cv
5.35303 91.0518 0.865723 83.8204 1.89258 78.9258 cv
9.0127 75.126 li
10.7295 74.2588 11.1055 74.6983 11.1138 75.4053 cv
11.1226 76.1514 11.147 77.8956 12.503 77.5284 cv
11.625 76.5157 12.5704 74.879 12.1294 73.9961 cv
11.7476 73.2325 10.6885 73.0264 9.34034 73.5792 cv
5.22266 75.6876 li
5.11231 75.0626 4.81788 74.5831 4.37647 74.3077 cv
10.1363 71.2354 li
9.41895 71.1622 6.91602 69.9903 7.82764 68.1524 cv
6.23487 69.1749 6.625 70.4454 7.70655 71.1622 cv
1 /1 get_csd
sepcs
1 sep
f
106.049 71.1622 mo
112.097 74.2706 li
113.783 73.9405 114.458 71.5411 112.809 70.0206 cv
112.809 70.0206 109.976 68.2276 106.448 66.8262 cv
101.991 65.0557 97.1524 75.336 100.177 78.3379 cv
100.177 78.3379 100.373 78.587 101.697 79.1143 cv
102.333 79.3672 102.683 79.5147 102.683 79.5147 cv
103.923 78.6954 104.368 76.5909 103.833 75.8995 cv
104.136 76.0372 104.709 76.3174 104.854 76.9483 cv
105.649 80.42 101.155 85.294 94.2554 85.586 cv
87.7427 85.8624 82.6636 85.0577 77.0899 86.7999 cv
71.5162 88.542 65.3858 96.9424 56.878 96.9424 cv
56.8755 105.902 li
69.4415 105.902 74.918 96.8829 80.8052 94.8956 cv
86.2608 93.0538 93.3174 95.042 99.9937 93.2764 cv
108.403 91.0518 112.89 83.8204 111.863 78.9258 cv
104.743 75.126 li
103.026 74.2588 102.65 74.6983 102.642 75.4053 cv
102.633 76.1514 102.609 77.8956 101.253 77.5284 cv
102.13 76.5157 101.186 74.879 101.626 73.9961 cv
102.008 73.2325 103.067 73.0264 104.416 73.5792 cv
108.533 75.6876 li
108.644 75.0626 108.938 74.5831 109.379 74.3077 cv
103.62 71.2354 li
104.337 71.1622 106.839 69.9903 105.928 68.1524 cv
107.521 69.1749 107.131 70.4454 106.049 71.1622 cv
1 /1 get_csd
sepcs
1 sep
f
4.14405 82.8663 mo
5.41553 82.0997 li
5.51416 82.2627 li
5.18653 82.585 4.99805 82.9024 4.94825 83.2129 cv
4.89844 83.5235 4.95362 83.8116 5.11426 84.0772 cv
5.26954 84.335 5.43995 84.4825 5.625 84.5196 cv
5.81055 84.5557 5.96924 84.5342 6.10108 84.4551 cv
6.25489 84.3624 6.34571 84.2295 6.37354 84.0567 cv
6.39161 83.9424 6.38233 83.7413 6.34668 83.4502 cv
6.29004 82.9825 li
6.23389 82.5186 6.24073 82.1631 6.31104 81.917 cv
6.38184 81.671 6.53467 81.4776 6.77002 81.335 cv
7.021 81.1836 7.31495 81.1416 7.65186 81.209 cv
7.98877 81.2754 8.28077 81.5147 8.52735 81.9239 cv
8.65284 82.1329 8.7461 82.3506 8.80665 82.5792 cv
8.86719 82.8086 8.90626 82.9376 8.92286 82.9639 cv
8.96045 83.0274 9.00294 83.0606 9.04981 83.0655 cv
9.09717 83.0694 9.15186 83.0626 9.21436 83.046 cv
9.31592 83.2139 li
8.19776 83.8887 li
8.10254 83.7315 li
8.31592 83.4991 8.4585 83.2315 8.53077 82.9278 cv
8.60254 82.6241 8.55665 82.335 8.3921 82.0626 cv
8.27637 81.8702 8.13721 81.7471 7.97608 81.6924 cv
7.81446 81.6377 7.66553 81.6514 7.53028 81.7334 cv
7.36817 81.8311 7.27832 81.9571 7.26172 82.1094 cv
7.2417 82.2627 7.26026 82.5655 7.31592 83.0166 cv
7.38233 83.5577 li
7.41163 83.7989 7.40821 84.0079 7.37305 84.1827 cv
7.30567 84.5088 7.13331 84.7569 6.85596 84.9239 cv
6.59668 85.0801 6.28418 85.1153 5.91846 85.0274 cv
5.55176 84.9405 5.21876 84.6475 4.91846 84.1495 cv
4.84913 84.0352 4.78956 83.9131 4.7378 83.7852 cv
4.68653 83.6563 4.646 83.5225 4.61768 83.3838 cv
4.58838 83.25 li
4.57911 83.2208 4.56983 83.1924 4.55958 83.1661 cv
4.54932 83.1397 4.53907 83.1182 4.52881 83.1016 cv
4.49366 83.042 4.45362 83.0118 4.40967 83.0079 cv
4.36524 83.004 4.30958 83.0118 4.24268 83.0294 cv
4.14405 82.8663 li
0 0 0 0 cmyk
f
0.1104 lw
4.14405 82.8663 mo
5.41553 82.0997 li
5.51416 82.2627 li
5.18653 82.585 4.99805 82.9024 4.94825 83.2129 cv
4.89844 83.5235 4.95362 83.8116 5.11426 84.0772 cv
5.26954 84.335 5.43995 84.4825 5.625 84.5196 cv
5.81055 84.5557 5.96924 84.5342 6.10108 84.4551 cv
6.25489 84.3624 6.34571 84.2295 6.37354 84.0567 cv
6.39161 83.9424 6.38233 83.7413 6.34668 83.4502 cv
6.29004 82.9825 li
6.23389 82.5186 6.24073 82.1631 6.31104 81.917 cv
6.38184 81.671 6.53467 81.4776 6.77002 81.335 cv
7.021 81.1836 7.31495 81.1416 7.65186 81.209 cv
7.98877 81.2754 8.28077 81.5147 8.52735 81.9239 cv
8.65284 82.1329 8.7461 82.3506 8.80665 82.5792 cv
8.86719 82.8086 8.90626 82.9376 8.92286 82.9639 cv
8.96045 83.0274 9.00294 83.0606 9.04981 83.0655 cv
9.09717 83.0694 9.15186 83.0626 9.21436 83.046 cv
9.31592 83.2139 li
8.19776 83.8887 li
8.10254 83.7315 li
8.31592 83.4991 8.4585 83.2315 8.53077 82.9278 cv
8.60254 82.6241 8.55665 82.335 8.3921 82.0626 cv
8.27637 81.8702 8.13721 81.7471 7.97608 81.6924 cv
7.81446 81.6377 7.66553 81.6514 7.53028 81.7334 cv
7.36817 81.8311 7.27832 81.9571 7.26172 82.1094 cv
7.2417 82.2627 7.26026 82.5655 7.31592 83.0166 cv
7.38233 83.5577 li
7.41163 83.7989 7.40821 84.0079 7.37305 84.1827 cv
7.30567 84.5088 7.13331 84.7569 6.85596 84.9239 cv
6.59668 85.0801 6.28418 85.1153 5.91846 85.0274 cv
5.55176 84.9405 5.21876 84.6475 4.91846 84.1495 cv
4.84913 84.0352 4.78956 83.9131 4.7378 83.7852 cv
4.68653 83.6563 4.646 83.5225 4.61768 83.3838 cv
4.58838 83.25 li
4.57911 83.2208 4.56983 83.1924 4.55958 83.1661 cv
4.54932 83.1397 4.53907 83.1182 4.52881 83.1016 cv
4.49366 83.042 4.45362 83.0118 4.40967 83.0079 cv
4.36524 83.004 4.30958 83.0118 4.24268 83.0294 cv
4.14405 82.8663 li
cp
@
7.02198 86.7666 mo
7.12403 86.6534 li
7.26563 86.7764 7.37891 86.8516 7.46485 86.879 cv
7.60547 86.9219 7.73584 86.878 7.8545 86.7461 cv
9.80079 84.5928 li
9.91993 84.462 9.95264 84.3301 9.89893 84.2002 cv
9.86622 84.1211 9.77881 84.0118 9.63721 83.8731 cv
9.73926 83.7608 li
11.4556 85.3116 li
11.3531 85.4249 li
11.1944 85.2911 11.0748 85.212 10.9937 85.1866 cv
10.857 85.1446 10.7286 85.1905 10.6084 85.3233 cv
8.66211 87.4756 li
8.54981 87.6006 8.5127 87.7178 8.55176 87.8292 cv
8.59034 87.9415 8.68653 88.0665 8.83985 88.2042 cv
8.7378 88.3174 li
7.02198 86.7666 li
f
7.02198 86.7666 mo
7.12403 86.6534 li
7.26563 86.7764 7.37891 86.8516 7.46485 86.879 cv
7.60547 86.9219 7.73584 86.878 7.8545 86.7461 cv
9.80079 84.5928 li
9.91993 84.462 9.95264 84.3301 9.89893 84.2002 cv
9.86622 84.1211 9.77881 84.0118 9.63721 83.8731 cv
9.73926 83.7608 li
11.4556 85.3116 li
11.3531 85.4249 li
11.1944 85.2911 11.0748 85.212 10.9937 85.1866 cv
10.857 85.1446 10.7286 85.1905 10.6084 85.3233 cv
8.66211 87.4756 li
8.54981 87.6006 8.5127 87.7178 8.55176 87.8292 cv
8.59034 87.9415 8.68653 88.0665 8.83985 88.2042 cv
8.7378 88.3174 li
7.02198 86.7666 li
cp
@
12.3482 90.2325 mo
13.0416 90.5323 13.6753 90.5762 14.2486 90.3624 cv
14.7579 90.1729 15.1207 89.8292 15.3365 89.3301 cv
15.5767 88.7754 15.5894 88.2549 15.3746 87.7706 cv
15.1377 87.2383 14.6451 86.8106 13.896 86.4864 cv
12.0401 85.6827 li
11.9795 85.8223 li
12.1343 85.9044 12.2374 85.9756 12.2886 86.0362 cv
12.377 86.1407 12.3907 86.2627 12.3296 86.4044 cv
11.1543 89.1182 li
11.0909 89.2657 10.9874 89.3409 10.8453 89.3458 cv
10.7647 89.3467 10.6465 89.3194 10.4903 89.2618 cv
10.4302 89.4014 li
12.3482 90.2325 li
cp
13.3111 86.8292 mo
13.3599 86.7168 13.4083 86.6475 13.4571 86.6211 cv
13.5313 86.5821 13.647 86.5958 13.8052 86.6641 cv
14.2833 86.8711 14.5259 87.2432 14.5328 87.7794 cv
14.5362 88.1133 14.4537 88.4747 14.2857 88.8633 cv
14.0025 89.5166 13.6954 89.9082 13.3648 90.0391 cv
13.0337 90.169 12.6885 90.1553 12.3287 90 cv
12.1959 89.9424 12.1207 89.8799 12.1021 89.8126 cv
12.0826 89.7452 12.0948 89.6534 12.1377 89.5381 cv
13.3111 86.8292 li
f
12.3482 90.2325 mo
13.0416 90.5323 13.6753 90.5762 14.2486 90.3624 cv
14.7579 90.1729 15.1207 89.8292 15.3365 89.3301 cv
15.5767 88.7754 15.5894 88.2549 15.3746 87.7706 cv
15.1377 87.2383 14.6451 86.8106 13.896 86.4864 cv
12.0401 85.6827 li
11.9795 85.8223 li
12.1343 85.9044 12.2374 85.9756 12.2886 86.0362 cv
12.377 86.1407 12.3907 86.2627 12.3296 86.4044 cv
11.1543 89.1182 li
11.0909 89.2657 10.9874 89.3409 10.8453 89.3458 cv
10.7647 89.3467 10.6465 89.3194 10.4903 89.2618 cv
10.4302 89.4014 li
12.3482 90.2325 li
cp
13.3111 86.8292 mo
13.3599 86.7168 13.4083 86.6475 13.4571 86.6211 cv
13.5313 86.5821 13.647 86.5958 13.8052 86.6641 cv
14.2833 86.8711 14.5259 87.2432 14.5328 87.7794 cv
14.5362 88.1133 14.4537 88.4747 14.2857 88.8633 cv
14.0025 89.5166 13.6954 89.9082 13.3648 90.0391 cv
13.0337 90.169 12.6885 90.1553 12.3287 90 cv
12.1959 89.9424 12.1207 89.8799 12.1021 89.8126 cv
12.0826 89.7452 12.0948 89.6534 12.1377 89.5381 cv
13.3111 86.8292 li
cp
@
19.5484 91.7647 mo
15.7125 91.2774 li
15.732 91.126 li
15.9205 91.1446 16.0567 91.1377 16.1412 91.1075 cv
16.2706 91.0616 16.3467 90.9522 16.3682 90.7823 cv
16.7334 87.9034 li
16.7554 87.7286 16.7071 87.6036 16.5889 87.5284 cv
16.5206 87.4825 16.3926 87.4415 16.2037 87.4082 cv
16.2227 87.2569 li
20.0044 87.7374 li
19.8521 88.9366 li
19.6919 88.9161 li
19.6573 88.5225 19.5489 88.2422 19.3672 88.0752 cv
19.1856 87.9082 18.8306 87.7911 18.3028 87.7247 cv
18.1021 87.6993 17.9722 87.7022 17.9126 87.7325 cv
17.8536 87.7637 17.8165 87.835 17.8028 87.9483 cv
17.6275 89.3243 li
18.001 89.375 18.2618 89.3458 18.4107 89.2364 cv
18.5591 89.126 18.69 88.9073 18.8033 88.5792 cv
18.9698 88.5997 li
18.7149 90.6104 li
18.5484 90.5889 li
18.5445 90.2452 18.4791 89.9932 18.3526 89.837 cv
18.2256 89.6797 17.9751 89.5782 17.6016 89.5303 cv
17.419 90.9708 li
17.4029 91.0967 17.4278 91.1876 17.4937 91.2422 cv
17.5591 91.2969 17.7032 91.3379 17.9253 91.3663 cv
18.3443 91.42 18.6954 91.3897 18.9791 91.2754 cv
19.2623 91.1622 19.5328 90.9161 19.7891 90.5372 cv
19.9717 90.5606 li
19.5484 91.7647 li
f
19.5484 91.7647 mo
15.7125 91.2774 li
15.732 91.126 li
15.9205 91.1446 16.0567 91.1377 16.1412 91.1075 cv
16.2706 91.0616 16.3467 90.9522 16.3682 90.7823 cv
16.7334 87.9034 li
16.7554 87.7286 16.7071 87.6036 16.5889 87.5284 cv
16.5206 87.4825 16.3926 87.4415 16.2037 87.4082 cv
16.2227 87.2569 li
20.0044 87.7374 li
19.8521 88.9366 li
19.6919 88.9161 li
19.6573 88.5225 19.5489 88.2422 19.3672 88.0752 cv
19.1856 87.9082 18.8306 87.7911 18.3028 87.7247 cv
18.1021 87.6993 17.9722 87.7022 17.9126 87.7325 cv
17.8536 87.7637 17.8165 87.835 17.8028 87.9483 cv
17.6275 89.3243 li
18.001 89.375 18.2618 89.3458 18.4107 89.2364 cv
18.5591 89.126 18.69 88.9073 18.8033 88.5792 cv
18.9698 88.5997 li
18.7149 90.6104 li
18.5484 90.5889 li
18.5445 90.2452 18.4791 89.9932 18.3526 89.837 cv
18.2256 89.6797 17.9751 89.5782 17.6016 89.5303 cv
17.419 90.9708 li
17.4029 91.0967 17.4278 91.1876 17.4937 91.2422 cv
17.5591 91.2969 17.7032 91.3379 17.9253 91.3663 cv
18.3443 91.42 18.6954 91.3897 18.9791 91.2754 cv
19.2623 91.1622 19.5328 90.9161 19.7891 90.5372 cv
19.9717 90.5606 li
19.5484 91.7647 li
cp
@
23.064 91.7813 mo
23.0655 91.629 li
22.8331 91.6192 22.6783 91.5772 22.6016 91.503 cv
22.525 91.4288 22.4874 91.2872 22.4898 91.0752 cv
22.502 89.9014 li
22.6763 89.9034 li
24.0298 91.7911 li
25.3834 91.8057 li
25.3848 91.6622 li
25.3243 91.6582 25.274 91.6475 25.233 91.6329 cv
25.1924 91.6172 25.1539 91.587 25.1182 91.5391 cv
23.8047 89.8184 li
24.0313 89.7823 24.2461 89.6944 24.4502 89.5557 cv
24.7173 89.3711 24.8526 89.1163 24.856 88.7901 cv
24.8604 88.3487 24.5987 88.0411 24.0704 87.8653 cv
23.7979 87.7784 23.441 87.7334 22.9996 87.7286 cv
20.8707 87.7061 li
20.8692 87.8584 li
21.0948 87.879 21.2403 87.9122 21.3042 87.959 cv
21.4004 88.0303 21.4473 88.1827 21.4449 88.4151 cv
21.417 91.0645 li
21.4151 91.2872 21.3726 91.4307 21.2901 91.4961 cv
21.2076 91.5626 21.0542 91.5987 20.8301 91.6065 cv
20.8282 91.7579 li
23.064 91.7813 li
cp
22.5196 88.1827 mo
22.5206 88.0918 22.5489 88.0254 22.6041 87.9864 cv
22.6597 87.9463 22.7754 87.9288 22.9522 87.9297 cv
23.2774 87.9327 23.5 88.0499 23.6202 88.2794 cv
23.69 88.4151 23.7237 88.5987 23.7217 88.8311 cv
23.7178 89.209 23.6221 89.4502 23.4346 89.5528 cv
23.2471 89.6553 22.9371 89.7071 22.504 89.7081 cv
22.5196 88.1827 li
f
23.064 91.7813 mo
23.0655 91.629 li
22.8331 91.6192 22.6783 91.5772 22.6016 91.503 cv
22.525 91.4288 22.4874 91.2872 22.4898 91.0752 cv
22.502 89.9014 li
22.6763 89.9034 li
24.0298 91.7911 li
25.3834 91.8057 li
25.3848 91.6622 li
25.3243 91.6582 25.274 91.6475 25.233 91.6329 cv
25.1924 91.6172 25.1539 91.587 25.1182 91.5391 cv
23.8047 89.8184 li
24.0313 89.7823 24.2461 89.6944 24.4502 89.5557 cv
24.7173 89.3711 24.8526 89.1163 24.856 88.7901 cv
24.8604 88.3487 24.5987 88.0411 24.0704 87.8653 cv
23.7979 87.7784 23.441 87.7334 22.9996 87.7286 cv
20.8707 87.7061 li
20.8692 87.8584 li
21.0948 87.879 21.2403 87.9122 21.3042 87.959 cv
21.4004 88.0303 21.4473 88.1827 21.4449 88.4151 cv
21.417 91.0645 li
21.4151 91.2872 21.3726 91.4307 21.2901 91.4961 cv
21.2076 91.5626 21.0542 91.5987 20.8301 91.6065 cv
20.8282 91.7579 li
23.064 91.7813 li
cp
22.5196 88.1827 mo
22.5206 88.0918 22.5489 88.0254 22.6041 87.9864 cv
22.6597 87.9463 22.7754 87.9288 22.9522 87.9297 cv
23.2774 87.9327 23.5 88.0499 23.6202 88.2794 cv
23.69 88.4151 23.7237 88.5987 23.7217 88.8311 cv
23.7178 89.209 23.6221 89.4502 23.4346 89.5528 cv
23.2471 89.6553 22.9371 89.7071 22.504 89.7081 cv
22.5196 88.1827 li
cp
@
29.9083 91.9122 mo
26.042 91.8145 li
26.0459 91.6622 li
26.2359 91.6622 26.3707 91.6416 26.4517 91.6026 cv
26.5762 91.543 26.6402 91.4278 26.6446 91.2559 cv
26.7183 88.3545 li
26.7227 88.1797 26.6617 88.0596 26.5367 87.9961 cv
26.4644 87.9571 26.3321 87.9297 26.1407 87.9161 cv
26.1451 87.7637 li
29.9561 87.8594 li
29.9253 89.0694 li
29.7637 89.0655 li
29.6895 88.6768 29.5533 88.4082 29.356 88.2608 cv
29.1583 88.1133 28.7935 88.0332 28.2618 88.0196 cv
28.0591 88.0147 27.9302 88.0294 27.8741 88.0665 cv
27.8184 88.1036 27.7891 88.1788 27.7862 88.2911 cv
27.751 89.6788 li
28.1275 89.6924 28.3848 89.6368 28.521 89.5118 cv
28.6578 89.3877 28.7662 89.1573 28.8458 88.8194 cv
29.0137 88.8233 li
28.9625 90.8487 li
28.7945 90.8448 li
28.7559 90.502 28.6656 90.2588 28.5235 90.1163 cv
28.3819 89.9727 28.1226 89.8956 27.7457 89.8868 cv
27.709 91.3379 li
27.7061 91.4659 27.7398 91.5528 27.8111 91.5997 cv
27.8819 91.6475 28.0289 91.6749 28.253 91.6797 cv
28.6749 91.6915 29.021 91.625 29.292 91.4834 cv
29.5626 91.3418 29.8067 91.0704 30.0235 90.668 cv
30.2076 90.6719 li
29.9083 91.9122 li
f
29.9083 91.9122 mo
26.042 91.8145 li
26.0459 91.6622 li
26.2359 91.6622 26.3707 91.6416 26.4517 91.6026 cv
26.5762 91.543 26.6402 91.4278 26.6446 91.2559 cv
26.7183 88.3545 li
26.7227 88.1797 26.6617 88.0596 26.5367 87.9961 cv
26.4644 87.9571 26.3321 87.9297 26.1407 87.9161 cv
26.1451 87.7637 li
29.9561 87.8594 li
29.9253 89.0694 li
29.7637 89.0655 li
29.6895 88.6768 29.5533 88.4082 29.356 88.2608 cv
29.1583 88.1133 28.7935 88.0332 28.2618 88.0196 cv
28.0591 88.0147 27.9302 88.0294 27.8741 88.0665 cv
27.8184 88.1036 27.7891 88.1788 27.7862 88.2911 cv
27.751 89.6788 li
28.1275 89.6924 28.3848 89.6368 28.521 89.5118 cv
28.6578 89.3877 28.7662 89.1573 28.8458 88.8194 cv
29.0137 88.8233 li
28.9625 90.8487 li
28.7945 90.8448 li
28.7559 90.502 28.6656 90.2588 28.5235 90.1163 cv
28.3819 89.9727 28.1226 89.8956 27.7457 89.8868 cv
27.709 91.3379 li
27.7061 91.4659 27.7398 91.5528 27.8111 91.5997 cv
27.8819 91.6475 28.0289 91.6749 28.253 91.6797 cv
28.6749 91.6915 29.021 91.625 29.292 91.4834 cv
29.5626 91.3418 29.8067 91.0704 30.0235 90.668 cv
30.2076 90.6719 li
29.9083 91.9122 li
cp
@
32.897 92.1856 mo
32.9654 92.0499 li
33.191 92.1612 33.3555 92.1993 33.4581 92.1622 cv
33.5611 92.125 33.6485 92.0362 33.7193 91.8956 cv
34.9996 89.3536 li
35.0733 89.2071 35.0835 89.0918 35.0303 89.0069 cv
34.9766 88.921 34.8545 88.8223 34.6656 88.71 cv
34.7344 88.5743 li
36.2232 89.3243 li
36.1368 92.3877 li
36.1861 92.4131 li
38.5918 90.5166 li
40.0806 91.2666 li
40.0118 91.4034 li
39.8047 91.3165 39.6514 91.2803 39.5518 91.2969 cv
39.4517 91.3135 39.3492 91.4258 39.2447 91.6329 cv
38.0528 94 li
37.9532 94.1963 37.9249 94.3438 37.9673 94.4415 cv
38.0098 94.5401 38.129 94.6426 38.3257 94.75 cv
38.2569 94.8858 li
36.295 93.8975 li
36.3638 93.7618 li
36.5416 93.8448 36.6866 93.8838 36.7994 93.8809 cv
36.9117 93.878 37.0088 93.795 37.0904 93.6329 cv
38.4097 91.0157 li
38.3658 90.9932 li
35.3316 93.4122 li
35.1729 93.3321 li
35.2647 89.5098 li
35.2388 89.4961 li
34.0176 91.921 li
33.9278 92.0987 33.899 92.2471 33.9312 92.3663 cv
33.9625 92.4844 34.1016 92.6114 34.3472 92.7452 cv
34.2784 92.8819 li
32.897 92.1856 li
f
32.897 92.1856 mo
32.9654 92.0499 li
33.191 92.1612 33.3555 92.1993 33.4581 92.1622 cv
33.5611 92.125 33.6485 92.0362 33.7193 91.8956 cv
34.9996 89.3536 li
35.0733 89.2071 35.0835 89.0918 35.0303 89.0069 cv
34.9766 88.921 34.8545 88.8223 34.6656 88.71 cv
34.7344 88.5743 li
36.2232 89.3243 li
36.1368 92.3877 li
36.1861 92.4131 li
38.5918 90.5166 li
40.0806 91.2666 li
40.0118 91.4034 li
39.8047 91.3165 39.6514 91.2803 39.5518 91.2969 cv
39.4517 91.3135 39.3492 91.4258 39.2447 91.6329 cv
38.0528 94 li
37.9532 94.1963 37.9249 94.3438 37.9673 94.4415 cv
38.0098 94.5401 38.129 94.6426 38.3257 94.75 cv
38.2569 94.8858 li
36.295 93.8975 li
36.3638 93.7618 li
36.5416 93.8448 36.6866 93.8838 36.7994 93.8809 cv
36.9117 93.878 37.0088 93.795 37.0904 93.6329 cv
38.4097 91.0157 li
38.3658 90.9932 li
35.3316 93.4122 li
35.1729 93.3321 li
35.2647 89.5098 li
35.2388 89.4961 li
34.0176 91.921 li
33.9278 92.0987 33.899 92.2471 33.9312 92.3663 cv
33.9625 92.4844 34.1016 92.6114 34.3472 92.7452 cv
34.2784 92.8819 li
32.897 92.1856 li
cp
@
41.875 97.546 mo
38.794 95.209 li
38.8858 95.087 li
39.0401 95.1973 39.1617 95.2608 39.25 95.2754 cv
39.3858 95.2999 39.5054 95.2432 39.6094 95.1075 cv
41.3624 92.795 li
41.4688 92.6544 41.4893 92.5225 41.4249 92.3965 cv
41.3887 92.3233 41.2974 92.2247 41.1504 92.1006 cv
41.2427 91.9795 li
44.2803 94.2832 li
43.5494 95.2471 li
43.4205 95.1495 li
43.5875 94.7911 43.6334 94.4932 43.5591 94.2579 cv
43.4844 94.0225 43.2354 93.7452 42.8116 93.4239 cv
42.6504 93.3008 42.5362 93.2383 42.4698 93.2364 cv
42.4029 93.2334 42.335 93.2764 42.2666 93.3663 cv
41.4283 94.4727 li
41.7261 94.7032 41.9668 94.8077 42.1504 94.7872 cv
42.334 94.7657 42.5572 94.6416 42.8189 94.4131 cv
42.9527 94.5157 li
41.7286 96.1299 li
41.5948 96.0284 li
41.7632 95.7276 41.8316 95.4776 41.8003 95.2784 cv
41.7686 95.0792 41.6031 94.8663 41.3028 94.6377 cv
40.4249 95.796 li
40.3482 95.8965 40.3248 95.9874 40.3545 96.0674 cv
40.3843 96.1475 40.4883 96.2549 40.667 96.3907 cv
41.0035 96.6456 41.3228 96.795 41.625 96.8379 cv
41.9278 96.8809 42.2847 96.8028 42.6958 96.6026 cv
42.8423 96.7139 li
41.875 97.546 li
f
41.875 97.546 mo
38.794 95.209 li
38.8858 95.087 li
39.0401 95.1973 39.1617 95.2608 39.25 95.2754 cv
39.3858 95.2999 39.5054 95.2432 39.6094 95.1075 cv
41.3624 92.795 li
41.4688 92.6544 41.4893 92.5225 41.4249 92.3965 cv
41.3887 92.3233 41.2974 92.2247 41.1504 92.1006 cv
41.2427 91.9795 li
44.2803 94.2832 li
43.5494 95.2471 li
43.4205 95.1495 li
43.5875 94.7911 43.6334 94.4932 43.5591 94.2579 cv
43.4844 94.0225 43.2354 93.7452 42.8116 93.4239 cv
42.6504 93.3008 42.5362 93.2383 42.4698 93.2364 cv
42.4029 93.2334 42.335 93.2764 42.2666 93.3663 cv
41.4283 94.4727 li
41.7261 94.7032 41.9668 94.8077 42.1504 94.7872 cv
42.334 94.7657 42.5572 94.6416 42.8189 94.4131 cv
42.9527 94.5157 li
41.7286 96.1299 li
41.5948 96.0284 li
41.7632 95.7276 41.8316 95.4776 41.8003 95.2784 cv
41.7686 95.0792 41.6031 94.8663 41.3028 94.6377 cv
40.4249 95.796 li
40.3482 95.8965 40.3248 95.9874 40.3545 96.0674 cv
40.3843 96.1475 40.4883 96.2549 40.667 96.3907 cv
41.0035 96.6456 41.3228 96.795 41.625 96.8379 cv
41.9278 96.8809 42.2847 96.8028 42.6958 96.6026 cv
42.8423 96.7139 li
41.875 97.546 li
cp
@
42.4732 98.0596 mo
42.563 97.9376 li
42.7647 98.0782 42.917 98.1377 43.0215 98.1163 cv
43.1255 98.0948 43.2232 98.0215 43.3145 97.8975 cv
44.9981 95.6094 li
44.9566 95.3243 44.9273 95.1534 44.9102 95.0967 cv
44.8936 95.0391 44.855 94.9825 44.795 94.9268 cv
44.8853 94.8038 li
46.0147 95.6348 li
46.3487 99.0176 li
46.3746 99.0372 li
47.4317 97.6006 li
47.5518 97.4376 47.605 97.296 47.5904 97.1778 cv
47.5762 97.0586 47.4751 96.92 47.2876 96.7608 cv
47.378 96.6377 li
48.5254 97.4825 li
48.4351 97.6045 li
48.25 97.5079 48.1138 97.459 48.0264 97.46 cv
47.9385 97.461 47.8404 97.5362 47.7315 97.6836 cv
45.6387 100.528 li
45.4903 100.419 li
45.0464 96.1114 li
45.0098 96.084 li
43.6148 97.9795 li
43.5059 98.128 43.4517 98.2491 43.4517 98.3438 cv
43.4498 98.4952 43.5562 98.6553 43.7706 98.8252 cv
43.6802 98.9483 li
42.4732 98.0596 li
f
42.4732 98.0596 mo
42.563 97.9376 li
42.7647 98.0782 42.917 98.1377 43.0215 98.1163 cv
43.1255 98.0948 43.2232 98.0215 43.3145 97.8975 cv
44.9981 95.6094 li
44.9566 95.3243 44.9273 95.1534 44.9102 95.0967 cv
44.8936 95.0391 44.855 94.9825 44.795 94.9268 cv
44.8853 94.8038 li
46.0147 95.6348 li
46.3487 99.0176 li
46.3746 99.0372 li
47.4317 97.6006 li
47.5518 97.4376 47.605 97.296 47.5904 97.1778 cv
47.5762 97.0586 47.4751 96.92 47.2876 96.7608 cv
47.378 96.6377 li
48.5254 97.4825 li
48.4351 97.6045 li
48.25 97.5079 48.1138 97.459 48.0264 97.46 cv
47.9385 97.461 47.8404 97.5362 47.7315 97.6836 cv
45.6387 100.528 li
45.4903 100.419 li
45.0464 96.1114 li
45.0098 96.084 li
43.6148 97.9795 li
43.5059 98.128 43.4517 98.2491 43.4517 98.3438 cv
43.4498 98.4952 43.5562 98.6553 43.7706 98.8252 cv
43.6802 98.9483 li
42.4732 98.0596 li
cp
@
47.0035 101.368 mo
47.6724 100.042 li
47.8423 100.129 li
47.7369 100.576 47.7457 100.945 47.8687 101.234 cv
47.9918 101.524 48.1915 101.738 48.4683 101.878 cv
48.7378 102.014 48.9605 102.048 49.1368 101.981 cv
49.313 101.914 49.4361 101.811 49.5054 101.673 cv
49.5865 101.513 49.5928 101.352 49.5245 101.191 cv
49.4791 101.084 49.3643 100.918 49.1792 100.692 cv
48.8829 100.326 li
48.5884 99.962 48.4053 99.6582 48.3345 99.4122 cv
48.2627 99.1661 48.2891 98.921 48.4131 98.6749 cv
48.545 98.4131 48.7715 98.2217 49.0928 98.0997 cv
49.4136 97.9776 49.7876 98.0235 50.2144 98.2393 cv
50.4317 98.3487 50.627 98.4844 50.7999 98.6456 cv
50.9727 98.8077 51.0738 98.8956 51.1026 98.9102 cv
51.168 98.9434 51.2217 98.9493 51.2637 98.9278 cv
51.3062 98.9063 51.3487 98.8711 51.3926 98.8243 cv
51.5684 98.9122 li
50.9795 100.08 li
50.8155 99.9952 li
50.8731 99.6856 50.8516 99.3829 50.751 99.087 cv
50.6504 98.7911 50.4581 98.5713 50.1734 98.4288 cv
49.9737 98.3272 49.7906 98.2969 49.6246 98.337 cv
49.4585 98.376 49.3399 98.4668 49.2686 98.6084 cv
49.1832 98.7764 49.1744 98.9307 49.2418 99.0704 cv
49.3062 99.209 49.482 99.4561 49.7696 99.8086 cv
50.1138 100.232 li
50.2666 100.421 50.3746 100.599 50.4376 100.766 cv
50.5547 101.08 50.5401 101.379 50.3941 101.669 cv
50.2579 101.939 50.0113 102.134 49.6548 102.255 cv
49.2984 102.376 48.8609 102.305 48.3414 102.043 cv
48.2222 101.984 48.1065 101.913 47.9947 101.831 cv
47.8829 101.75 47.7779 101.658 47.6797 101.555 cv
47.584 101.459 li
47.5606 101.438 47.5376 101.418 47.5147 101.402 cv
47.4918 101.384 47.4717 101.372 47.4546 101.363 cv
47.3931 101.333 47.3428 101.328 47.3033 101.347 cv
47.2642 101.368 47.2208 101.404 47.1734 101.455 cv
47.0035 101.368 li
f
47.0035 101.368 mo
47.6724 100.042 li
47.8423 100.129 li
47.7369 100.576 47.7457 100.945 47.8687 101.234 cv
47.9918 101.524 48.1915 101.738 48.4683 101.878 cv
48.7378 102.014 48.9605 102.048 49.1368 101.981 cv
49.313 101.914 49.4361 101.811 49.5054 101.673 cv
49.5865 101.513 49.5928 101.352 49.5245 101.191 cv
49.4791 101.084 49.3643 100.918 49.1792 100.692 cv
48.8829 100.326 li
48.5884 99.962 48.4053 99.6582 48.3345 99.4122 cv
48.2627 99.1661 48.2891 98.921 48.4131 98.6749 cv
48.545 98.4131 48.7715 98.2217 49.0928 98.0997 cv
49.4136 97.9776 49.7876 98.0235 50.2144 98.2393 cv
50.4317 98.3487 50.627 98.4844 50.7999 98.6456 cv
50.9727 98.8077 51.0738 98.8956 51.1026 98.9102 cv
51.168 98.9434 51.2217 98.9493 51.2637 98.9278 cv
51.3062 98.9063 51.3487 98.8711 51.3926 98.8243 cv
51.5684 98.9122 li
50.9795 100.08 li
50.8155 99.9952 li
50.8731 99.6856 50.8516 99.3829 50.751 99.087 cv
50.6504 98.7911 50.4581 98.5713 50.1734 98.4288 cv
49.9737 98.3272 49.7906 98.2969 49.6246 98.337 cv
49.4585 98.376 49.3399 98.4668 49.2686 98.6084 cv
49.1832 98.7764 49.1744 98.9307 49.2418 99.0704 cv
49.3062 99.209 49.482 99.4561 49.7696 99.8086 cv
50.1138 100.232 li
50.2666 100.421 50.3746 100.599 50.4376 100.766 cv
50.5547 101.08 50.5401 101.379 50.3941 101.669 cv
50.2579 101.939 50.0113 102.134 49.6548 102.255 cv
49.2984 102.376 48.8609 102.305 48.3414 102.043 cv
48.2222 101.984 48.1065 101.913 47.9947 101.831 cv
47.8829 101.75 47.7779 101.658 47.6797 101.555 cv
47.584 101.459 li
47.5606 101.438 47.5376 101.418 47.5147 101.402 cv
47.4918 101.384 47.4717 101.372 47.4546 101.363 cv
47.3931 101.333 47.3428 101.328 47.3033 101.347 cv
47.2642 101.368 47.2208 101.404 47.1734 101.455 cv
47.0035 101.368 li
cp
@
58.417 103.386 mo
54.5503 103.342 li
54.5518 103.191 li
54.7413 103.187 54.876 103.166 54.9566 103.126 cv
55.0796 103.064 55.1426 102.948 55.1446 102.776 cv
55.1768 99.8741 li
55.1788 99.6983 55.1168 99.5792 54.9903 99.5166 cv
54.9175 99.4795 54.7852 99.4542 54.5938 99.4424 cv
54.5958 99.2901 li
58.4073 99.3331 li
58.3941 100.542 li
58.2325 100.542 li
58.1529 100.154 58.0127 99.8868 57.8135 99.7422 cv
57.6133 99.5967 57.2476 99.5215 56.7159 99.5166 cv
56.5132 99.5137 56.3843 99.5313 56.3287 99.5694 cv
56.2735 99.6065 56.2452 99.6817 56.2442 99.795 cv
56.2286 101.183 li
56.6055 101.192 56.8614 101.132 56.9961 101.005 cv
57.1309 100.879 57.2359 100.647 57.3111 100.308 cv
57.4791 100.31 li
57.4561 102.335 li
57.2881 102.334 li
57.2447 101.992 57.1509 101.75 57.0074 101.609 cv
56.8633 101.467 56.6031 101.396 56.2261 101.391 cv
56.21 102.843 li
56.2085 102.97 56.2437 103.057 56.315 103.104 cv
56.3868 103.15 56.5347 103.175 56.7588 103.178 cv
57.1807 103.182 57.5259 103.112 57.795 102.966 cv
58.0635 102.821 58.3038 102.545 58.5147 102.14 cv
58.6993 102.142 li
58.417 103.386 li
f
58.417 103.386 mo
54.5503 103.342 li
54.5518 103.191 li
54.7413 103.187 54.876 103.166 54.9566 103.126 cv
55.0796 103.064 55.1426 102.948 55.1446 102.776 cv
55.1768 99.8741 li
55.1788 99.6983 55.1168 99.5792 54.9903 99.5166 cv
54.9175 99.4795 54.7852 99.4542 54.5938 99.4424 cv
54.5958 99.2901 li
58.4073 99.3331 li
58.3941 100.542 li
58.2325 100.542 li
58.1529 100.154 58.0127 99.8868 57.8135 99.7422 cv
57.6133 99.5967 57.2476 99.5215 56.7159 99.5166 cv
56.5132 99.5137 56.3843 99.5313 56.3287 99.5694 cv
56.2735 99.6065 56.2452 99.6817 56.2442 99.795 cv
56.2286 101.183 li
56.6055 101.192 56.8614 101.132 56.9961 101.005 cv
57.1309 100.879 57.2359 100.647 57.3111 100.308 cv
57.4791 100.31 li
57.4561 102.335 li
57.2881 102.334 li
57.2447 101.992 57.1509 101.75 57.0074 101.609 cv
56.8633 101.467 56.6031 101.396 56.2261 101.391 cv
56.21 102.843 li
56.2085 102.97 56.2437 103.057 56.315 103.104 cv
56.3868 103.15 56.5347 103.175 56.7588 103.178 cv
57.1807 103.182 57.5259 103.112 57.795 102.966 cv
58.0635 102.821 58.3038 102.545 58.5147 102.14 cv
58.6993 102.142 li
58.417 103.386 li
cp
@
60.6836 103.132 mo
60.6514 102.984 li
60.5035 103.014 60.3907 103.026 60.3126 103.021 cv
60.1802 103.01 60.1045 102.962 60.0865 102.879 cv
60.0713 102.81 60.0762 102.695 60.1002 102.531 cv
60.1119 102.455 60.1402 102.291 60.1841 102.037 cv
61.6363 101.721 li
61.8775 102.04 li
61.9302 102.11 61.9732 102.17 62.0064 102.221 cv
62.0606 102.308 62.0923 102.374 62.1026 102.419 cv
62.1246 102.52 62.105 102.59 62.044 102.629 cv
61.983 102.669 61.8482 102.715 61.6397 102.768 cv
61.6719 102.917 li
63.7647 102.462 li
63.7325 102.313 li
63.586 102.349 63.4615 102.326 63.3599 102.243 cv
63.2579 102.16 63.0889 101.963 62.8516 101.654 cv
60.7388 98.8887 li
60.5586 98.9278 li
59.8208 102.449 li
59.7623 102.727 59.711 102.91 59.6661 102.998 cv
59.5972 103.136 59.4859 103.228 59.3321 103.271 cv
59.3643 103.42 li
60.6836 103.132 li
cp
60.5201 100.3 mo
60.5738 100.289 li
61.4878 101.51 li
60.2315 101.784 li
60.5201 100.3 li
f
60.6836 103.132 mo
60.6514 102.984 li
60.5035 103.014 60.3907 103.026 60.3126 103.021 cv
60.1802 103.01 60.1045 102.962 60.0865 102.879 cv
60.0713 102.81 60.0762 102.695 60.1002 102.531 cv
60.1119 102.455 60.1402 102.291 60.1841 102.037 cv
61.6363 101.721 li
61.8775 102.04 li
61.9302 102.11 61.9732 102.17 62.0064 102.221 cv
62.0606 102.308 62.0923 102.374 62.1026 102.419 cv
62.1246 102.52 62.105 102.59 62.044 102.629 cv
61.983 102.669 61.8482 102.715 61.6397 102.768 cv
61.6719 102.917 li
63.7647 102.462 li
63.7325 102.313 li
63.586 102.349 63.4615 102.326 63.3599 102.243 cv
63.2579 102.16 63.0889 101.963 62.8516 101.654 cv
60.7388 98.8887 li
60.5586 98.9278 li
59.8208 102.449 li
59.7623 102.727 59.711 102.91 59.6661 102.998 cv
59.5972 103.136 59.4859 103.228 59.3321 103.271 cv
59.3643 103.42 li
60.6836 103.132 li
cp
60.5201 100.3 mo
60.5738 100.289 li
61.4878 101.51 li
60.2315 101.784 li
60.5201 100.3 li
cp
@
66.4883 101.292 mo
67.1783 100.984 67.6382 100.545 67.8682 99.9786 cv
68.0723 99.4747 68.0635 98.9747 67.8418 98.4786 cv
67.5948 97.9268 67.2198 97.5665 66.7173 97.3975 cv
66.1651 97.212 65.5162 97.2872 64.771 97.6202 cv
62.9253 98.4463 li
62.9874 98.585 li
63.1524 98.5264 63.274 98.4991 63.3536 98.501 cv
63.4903 98.5069 63.5899 98.5792 63.6529 98.7208 cv
64.8609 101.42 li
64.9263 101.567 64.9122 101.693 64.8189 101.801 cv
64.7657 101.862 64.6651 101.93 64.5181 102.007 cv
64.5801 102.146 li
66.4883 101.292 li
cp
64.629 98.2832 mo
64.5787 98.171 64.5606 98.0879 64.5748 98.0352 cv
64.5948 97.9542 64.6832 97.878 64.8404 97.8077 cv
65.3165 97.5948 65.7549 97.667 66.1553 98.0245 cv
66.4034 98.2461 66.6143 98.5518 66.7872 98.9376 cv
67.0782 99.5879 67.1597 100.08 67.0323 100.413 cv
66.9048 100.744 66.6617 100.99 66.3042 101.15 cv
66.1724 101.209 66.0752 101.222 66.0127 101.191 cv
65.9498 101.159 65.8907 101.087 65.8345 100.978 cv
64.629 98.2832 li
f
66.4883 101.292 mo
67.1783 100.984 67.6382 100.545 67.8682 99.9786 cv
68.0723 99.4747 68.0635 98.9747 67.8418 98.4786 cv
67.5948 97.9268 67.2198 97.5665 66.7173 97.3975 cv
66.1651 97.212 65.5162 97.2872 64.771 97.6202 cv
62.9253 98.4463 li
62.9874 98.585 li
63.1524 98.5264 63.274 98.4991 63.3536 98.501 cv
63.4903 98.5069 63.5899 98.5792 63.6529 98.7208 cv
64.8609 101.42 li
64.9263 101.567 64.9122 101.693 64.8189 101.801 cv
64.7657 101.862 64.6651 101.93 64.5181 102.007 cv
64.5801 102.146 li
66.4883 101.292 li
cp
64.629 98.2832 mo
64.5787 98.171 64.5606 98.0879 64.5748 98.0352 cv
64.5948 97.9542 64.6832 97.878 64.8404 97.8077 cv
65.3165 97.5948 65.7549 97.667 66.1553 98.0245 cv
66.4034 98.2461 66.6143 98.5518 66.7872 98.9376 cv
67.0782 99.5879 67.1597 100.08 67.0323 100.413 cv
66.9048 100.744 66.6617 100.99 66.3042 101.15 cv
66.1724 101.209 66.0752 101.222 66.0127 101.191 cv
65.9498 101.159 65.8907 101.087 65.8345 100.978 cv
64.629 98.2832 li
cp
@
72.6582 97.375 mo
69.4922 99.5958 li
69.4048 99.4708 li
69.5567 99.3575 69.6534 99.2618 69.6949 99.1817 cv
69.7598 99.0596 69.7427 98.9288 69.6441 98.7881 cv
67.9776 96.4122 li
67.877 96.2696 67.7569 96.209 67.6182 96.2325 cv
67.5372 96.2432 67.4151 96.3008 67.2525 96.4034 cv
67.1651 96.2784 li
70.2862 94.0889 li
70.9805 95.0792 li
70.8482 95.1719 li
70.5577 94.9034 70.2886 94.7696 70.042 94.7676 cv
69.7955 94.7666 69.4542 94.919 69.0186 95.2247 cv
68.8531 95.3409 68.7588 95.4297 68.7354 95.4932 cv
68.7124 95.5557 68.7334 95.6329 68.7984 95.7256 cv
69.5953 96.8624 li
69.9063 96.6495 70.0796 96.4522 70.1153 96.2706 cv
70.1514 96.0889 70.1011 95.8389 69.9644 95.5206 cv
70.1016 95.4239 li
71.2652 97.0831 li
71.1275 97.1788 li
70.8926 96.9268 70.6758 96.7852 70.4766 96.754 cv
70.2774 96.7237 70.0235 96.8165 69.7149 97.0332 cv
70.5489 98.2217 li
70.6216 98.3252 70.7007 98.375 70.7862 98.3711 cv
70.8716 98.3672 71.0059 98.3018 71.1895 98.1729 cv
71.5352 97.9307 71.7745 97.6719 71.9078 97.3965 cv
72.0416 97.1221 72.0757 96.7579 72.0108 96.3057 cv
72.1617 96.2002 li
72.6582 97.375 li
f
72.6582 97.375 mo
69.4922 99.5958 li
69.4048 99.4708 li
69.5567 99.3575 69.6534 99.2618 69.6949 99.1817 cv
69.7598 99.0596 69.7427 98.9288 69.6441 98.7881 cv
67.9776 96.4122 li
67.877 96.2696 67.7569 96.209 67.6182 96.2325 cv
67.5372 96.2432 67.4151 96.3008 67.2525 96.4034 cv
67.1651 96.2784 li
70.2862 94.0889 li
70.9805 95.0792 li
70.8482 95.1719 li
70.5577 94.9034 70.2886 94.7696 70.042 94.7676 cv
69.7955 94.7666 69.4542 94.919 69.0186 95.2247 cv
68.8531 95.3409 68.7588 95.4297 68.7354 95.4932 cv
68.7124 95.5557 68.7334 95.6329 68.7984 95.7256 cv
69.5953 96.8624 li
69.9063 96.6495 70.0796 96.4522 70.1153 96.2706 cv
70.1514 96.0889 70.1011 95.8389 69.9644 95.5206 cv
70.1016 95.4239 li
71.2652 97.0831 li
71.1275 97.1788 li
70.8926 96.9268 70.6758 96.7852 70.4766 96.754 cv
70.2774 96.7237 70.0235 96.8165 69.7149 97.0332 cv
70.5489 98.2217 li
70.6216 98.3252 70.7007 98.375 70.7862 98.3711 cv
70.8716 98.3672 71.0059 98.3018 71.1895 98.1729 cv
71.5352 97.9307 71.7745 97.6719 71.9078 97.3965 cv
72.0416 97.1221 72.0757 96.7579 72.0108 96.3057 cv
72.1617 96.2002 li
72.6582 97.375 li
cp
@
73.4693 96.754 mo
73.3785 96.6309 li
73.5796 96.4795 73.6866 96.3497 73.7002 96.2413 cv
73.7134 96.1329 73.6734 96.0147 73.5792 95.8877 cv
71.8829 93.6026 li
71.7852 93.4708 71.6861 93.4092 71.5865 93.42 cv
71.4864 93.4288 71.3433 93.4932 71.1578 93.6124 cv
71.0669 93.4893 li
72.4058 92.4961 li
75.1055 93.9493 li
75.1495 93.9161 li
74.5352 90.9151 li
75.8741 89.9219 li
75.9649 90.044 li
75.7945 90.1905 75.6939 90.3116 75.6636 90.4082 cv
75.6334 90.5049 75.6876 90.6465 75.8262 90.8331 cv
77.4053 92.96 li
77.5367 93.1377 77.6558 93.2295 77.7623 93.2354 cv
77.8687 93.2413 78.0142 93.1807 78.1983 93.0538 cv
78.2891 93.1768 li
76.525 94.4854 li
76.4346 94.3633 li
76.5884 94.2413 76.689 94.1299 76.7364 94.0274 cv
76.7842 93.9258 76.754 93.8018 76.6456 93.6553 cv
74.899 91.3018 li
74.8599 91.3301 li
75.6587 95.129 li
75.5162 95.2344 li
72.1416 93.4356 li
72.1182 93.4532 li
73.7359 95.6329 li
73.8545 95.793 73.9742 95.8858 74.0943 95.9102 cv
74.2149 95.9346 74.3902 95.8672 74.6211 95.709 cv
74.712 95.8311 li
73.4693 96.754 li
f
73.4693 96.754 mo
73.3785 96.6309 li
73.5796 96.4795 73.6866 96.3497 73.7002 96.2413 cv
73.7134 96.1329 73.6734 96.0147 73.5792 95.8877 cv
71.8829 93.6026 li
71.7852 93.4708 71.6861 93.4092 71.5865 93.42 cv
71.4864 93.4288 71.3433 93.4932 71.1578 93.6124 cv
71.0669 93.4893 li
72.4058 92.4961 li
75.1055 93.9493 li
75.1495 93.9161 li
74.5352 90.9151 li
75.8741 89.9219 li
75.9649 90.044 li
75.7945 90.1905 75.6939 90.3116 75.6636 90.4082 cv
75.6334 90.5049 75.6876 90.6465 75.8262 90.8331 cv
77.4053 92.96 li
77.5367 93.1377 77.6558 93.2295 77.7623 93.2354 cv
77.8687 93.2413 78.0142 93.1807 78.1983 93.0538 cv
78.2891 93.1768 li
76.525 94.4854 li
76.4346 94.3633 li
76.5884 94.2413 76.689 94.1299 76.7364 94.0274 cv
76.7842 93.9258 76.754 93.8018 76.6456 93.6553 cv
74.899 91.3018 li
74.8599 91.3301 li
75.6587 95.129 li
75.5162 95.2344 li
72.1416 93.4356 li
72.1182 93.4532 li
73.7359 95.6329 li
73.8545 95.793 73.9742 95.8858 74.0943 95.9102 cv
74.2149 95.9346 74.3902 95.8672 74.6211 95.709 cv
74.712 95.8311 li
73.4693 96.754 li
cp
@
81.0806 92.2461 mo
81.0684 92.0948 li
81.3199 92.0733 81.48 92.0206 81.5489 91.9356 cv
81.6177 91.8506 81.6465 91.7295 81.6343 91.5723 cv
81.4166 88.7344 li
81.4039 88.5704 81.3526 88.4668 81.2627 88.421 cv
81.1729 88.376 81.0181 88.3545 80.7979 88.3565 cv
80.7862 88.2042 li
82.4483 88.0772 li
83.959 90.7452 li
84.0137 90.7403 li
85.0928 87.8741 li
86.7549 87.7452 li
86.7666 87.8975 li
86.5445 87.9307 86.3951 87.9795 86.3179 88.045 cv
86.2408 88.1114 86.211 88.2588 86.2291 88.4913 cv
86.4317 91.1329 li
86.4488 91.3536 86.5005 91.4942 86.5874 91.5557 cv
86.6744 91.6172 86.8296 91.6446 87.0538 91.6348 cv
87.065 91.7872 li
84.8746 91.9542 li
84.8633 91.8028 li
85.0582 91.7823 85.2032 91.7413 85.2974 91.6797 cv
85.3921 91.6182 85.4327 91.4971 85.419 91.3165 cv
85.1944 88.3946 li
85.146 88.3975 li
83.7989 92.0372 li
83.6221 92.0508 li
81.7242 88.7315 li
81.6954 88.7334 li
81.9029 91.4405 li
81.9185 91.6377 81.9703 91.7803 82.0586 91.8653 cv
82.1475 91.9502 82.3316 91.9874 82.6114 91.9756 cv
82.6231 92.128 li
81.0806 92.2461 li
f
81.0806 92.2461 mo
81.0684 92.0948 li
81.3199 92.0733 81.48 92.0206 81.5489 91.9356 cv
81.6177 91.8506 81.6465 91.7295 81.6343 91.5723 cv
81.4166 88.7344 li
81.4039 88.5704 81.3526 88.4668 81.2627 88.421 cv
81.1729 88.376 81.0181 88.3545 80.7979 88.3565 cv
80.7862 88.2042 li
82.4483 88.0772 li
83.959 90.7452 li
84.0137 90.7403 li
85.0928 87.8741 li
86.7549 87.7452 li
86.7666 87.8975 li
86.5445 87.9307 86.3951 87.9795 86.3179 88.045 cv
86.2408 88.1114 86.211 88.2588 86.2291 88.4913 cv
86.4317 91.1329 li
86.4488 91.3536 86.5005 91.4942 86.5874 91.5557 cv
86.6744 91.6172 86.8296 91.6446 87.0538 91.6348 cv
87.065 91.7872 li
84.8746 91.9542 li
84.8633 91.8028 li
85.0582 91.7823 85.2032 91.7413 85.2974 91.6797 cv
85.3921 91.6182 85.4327 91.4971 85.419 91.3165 cv
85.1944 88.3946 li
85.146 88.3975 li
83.7989 92.0372 li
83.6221 92.0508 li
81.7242 88.7315 li
81.6954 88.7334 li
81.9029 91.4405 li
81.9185 91.6377 81.9703 91.7803 82.0586 91.8653 cv
82.1475 91.9502 82.3316 91.9874 82.6114 91.9756 cv
82.6231 92.128 li
81.0806 92.2461 li
cp
@
87.6905 87.8174 mo
89.9258 87.8116 li
89.9263 87.9629 li
89.67 87.9717 89.4991 88.0088 89.4131 88.0733 cv
89.3267 88.1377 89.2842 88.2852 89.2847 88.5157 cv
89.2906 90.5215 li
89.2911 90.8252 89.3316 91.0616 89.4117 91.2266 cv
89.5572 91.5342 89.834 91.6885 90.2432 91.6876 cv
90.7515 91.6856 91.0948 91.5137 91.2725 91.1719 cv
91.3711 90.9844 91.42 90.7217 91.419 90.3838 cv
91.4141 88.5508 li
91.4131 88.336 91.3692 88.1885 91.2818 88.1075 cv
91.1944 88.0264 91.0235 87.9786 90.7696 87.961 cv
90.7691 87.8086 li
92.2227 87.8047 li
92.2232 87.9571 li
92.0123 87.9952 91.8731 88.0411 91.8052 88.0948 cv
91.7374 88.1485 91.7037 88.2715 91.7042 88.4659 cv
91.7095 90.3829 li
91.711 90.8926 91.5767 91.2862 91.3057 91.5635 cv
91.0352 91.8418 90.6094 91.9825 90.0279 91.9834 cv
89.2676 91.9854 88.7466 91.7803 88.4654 91.3702 cv
88.3165 91.1514 88.2413 90.8702 88.2403 90.5245 cv
88.2349 88.5186 li
88.2344 88.292 88.2012 88.1495 88.1353 88.0918 cv
88.0694 88.0332 87.921 87.9922 87.691 87.9698 cv
87.6905 87.8174 li
f
87.6905 87.8174 mo
89.9258 87.8116 li
89.9263 87.9629 li
89.67 87.9717 89.4991 88.0088 89.4131 88.0733 cv
89.3267 88.1377 89.2842 88.2852 89.2847 88.5157 cv
89.2906 90.5215 li
89.2911 90.8252 89.3316 91.0616 89.4117 91.2266 cv
89.5572 91.5342 89.834 91.6885 90.2432 91.6876 cv
90.7515 91.6856 91.0948 91.5137 91.2725 91.1719 cv
91.3711 90.9844 91.42 90.7217 91.419 90.3838 cv
91.4141 88.5508 li
91.4131 88.336 91.3692 88.1885 91.2818 88.1075 cv
91.1944 88.0264 91.0235 87.9786 90.7696 87.961 cv
90.7691 87.8086 li
92.2227 87.8047 li
92.2232 87.9571 li
92.0123 87.9952 91.8731 88.0411 91.8052 88.0948 cv
91.7374 88.1485 91.7037 88.2715 91.7042 88.4659 cv
91.7095 90.3829 li
91.711 90.8926 91.5767 91.2862 91.3057 91.5635 cv
91.0352 91.8418 90.6094 91.9825 90.0279 91.9834 cv
89.2676 91.9854 88.7466 91.7803 88.4654 91.3702 cv
88.3165 91.1514 88.2413 90.8702 88.2403 90.5245 cv
88.2349 88.5186 li
88.2344 88.292 88.2012 88.1495 88.1353 88.0918 cv
88.0694 88.0332 87.921 87.9922 87.691 87.9698 cv
87.6905 87.8174 li
cp
@
93.0689 88.9844 mo
93.0035 87.7774 li
96.9795 87.5411 li
97.0582 88.7471 li
96.8677 88.7588 li
96.7798 88.3321 96.584 88.0518 96.2803 87.9161 cv
96.1099 87.8428 95.8599 87.8116 95.5308 87.8233 cv
95.7183 90.9747 li
95.731 91.1954 95.7823 91.3379 95.8716 91.4053 cv
95.9605 91.4717 96.1397 91.4971 96.4082 91.4825 cv
96.4175 91.6338 li
94.0635 91.7745 li
94.0542 91.6221 li
94.3121 91.6065 94.4815 91.5596 94.5621 91.4815 cv
94.6426 91.4044 94.6768 91.2549 94.6631 91.0372 cv
94.4761 87.8868 li
94.1539 87.9131 93.9092 87.9737 93.7422 88.0674 cv
93.4356 88.2422 93.2745 88.545 93.2593 88.9737 cv
93.0689 88.9844 li
f
93.0689 88.9844 mo
93.0035 87.7774 li
96.9795 87.5411 li
97.0582 88.7471 li
96.8677 88.7588 li
96.7798 88.3321 96.584 88.0518 96.2803 87.9161 cv
96.1099 87.8428 95.8599 87.8116 95.5308 87.8233 cv
95.7183 90.9747 li
95.731 91.1954 95.7823 91.3379 95.8716 91.4053 cv
95.9605 91.4717 96.1397 91.4971 96.4082 91.4825 cv
96.4175 91.6338 li
94.0635 91.7745 li
94.0542 91.6221 li
94.3121 91.6065 94.4815 91.5596 94.5621 91.4815 cv
94.6426 91.4044 94.6768 91.2549 94.6631 91.0372 cv
94.4761 87.8868 li
94.1539 87.9131 93.9092 87.9737 93.7422 88.0674 cv
93.4356 88.2422 93.2745 88.545 93.2593 88.9737 cv
93.0689 88.9844 li
cp
@
99.1802 91.1368 mo
99.1343 90.9913 li
98.9898 91.0342 98.8785 91.0577 98.8003 91.0596 cv
98.6675 91.0616 98.5879 91.0206 98.5621 90.9385 cv
98.5411 90.8721 98.5347 90.7569 98.5435 90.5918 cv
98.5484 90.5147 98.5611 90.3477 98.5816 90.0918 cv
99.9986 89.6426 li
100.269 89.9385 li
100.328 90.004 100.376 90.0596 100.414 90.1075 cv
100.476 90.1885 100.513 90.251 100.527 90.296 cv
100.559 90.3946 100.546 90.4659 100.489 90.5108 cv
100.432 90.5547 100.302 90.6133 100.099 90.6866 cv
100.145 90.8321 li
102.187 90.1846 li
102.141 90.0401 li
101.998 90.0889 101.873 90.0772 101.764 90.004 cv
101.654 89.9307 101.468 89.751 101.203 89.4639 cv
98.8448 86.9063 li
98.669 86.962 li
98.2579 90.5342 li
98.2256 90.8174 98.1905 91.004 98.1544 91.0958 cv
98.0982 91.2403 97.9957 91.3418 97.8467 91.3985 cv
97.8926 91.544 li
99.1802 91.1368 li
cp
98.7569 88.3321 mo
98.8091 88.3155 li
99.8316 89.4463 li
98.6055 89.835 li
98.7569 88.3321 li
f
99.1802 91.1368 mo
99.1343 90.9913 li
98.9898 91.0342 98.8785 91.0577 98.8003 91.0596 cv
98.6675 91.0616 98.5879 91.0206 98.5621 90.9385 cv
98.5411 90.8721 98.5347 90.7569 98.5435 90.5918 cv
98.5484 90.5147 98.5611 90.3477 98.5816 90.0918 cv
99.9986 89.6426 li
100.269 89.9385 li
100.328 90.004 100.376 90.0596 100.414 90.1075 cv
100.476 90.1885 100.513 90.251 100.527 90.296 cv
100.559 90.3946 100.546 90.4659 100.489 90.5108 cv
100.432 90.5547 100.302 90.6133 100.099 90.6866 cv
100.145 90.8321 li
102.187 90.1846 li
102.141 90.0401 li
101.998 90.0889 101.873 90.0772 101.764 90.004 cv
101.654 89.9307 101.468 89.751 101.203 89.4639 cv
98.8448 86.9063 li
98.669 86.962 li
98.2579 90.5342 li
98.2256 90.8174 98.1905 91.004 98.1544 91.0958 cv
98.0982 91.2403 97.9957 91.3418 97.8467 91.3985 cv
97.8926 91.544 li
99.1802 91.1368 li
cp
98.7569 88.3321 mo
98.8091 88.3155 li
99.8316 89.4463 li
98.6055 89.835 li
98.7569 88.3321 li
cp
@
101.106 87.546 mo
100.447 86.5323 li
103.776 84.3438 li
104.445 85.3506 li
104.286 85.4551 li
103.997 85.129 103.687 84.9834 103.357 85.0186 cv
103.172 85.0401 102.94 85.1368 102.661 85.3116 cv
104.395 87.9493 li
104.516 88.1338 104.632 88.2325 104.743 88.2461 cv
104.853 88.2598 105.021 88.1924 105.246 88.045 cv
105.33 88.1719 li
103.359 89.4668 li
103.275 89.3409 li
103.491 89.1983 103.615 89.0733 103.646 88.9659 cv
103.676 88.8575 103.632 88.712 103.512 88.5294 cv
101.778 85.8916 li
101.512 86.0762 101.331 86.25 101.232 86.4151 cv
101.054 86.7198 101.065 87.0616 101.265 87.4415 cv
101.106 87.546 li
f
101.106 87.546 mo
100.447 86.5323 li
103.776 84.3438 li
104.445 85.3506 li
104.286 85.4551 li
103.997 85.129 103.687 84.9834 103.357 85.0186 cv
103.172 85.0401 102.94 85.1368 102.661 85.3116 cv
104.395 87.9493 li
104.516 88.1338 104.632 88.2325 104.743 88.2461 cv
104.853 88.2598 105.021 88.1924 105.246 88.045 cv
105.33 88.1719 li
103.359 89.4668 li
103.275 89.3409 li
103.491 89.1983 103.615 89.0733 103.646 88.9659 cv
103.676 88.8575 103.632 88.712 103.512 88.5294 cv
101.778 85.8916 li
101.512 86.0762 101.331 86.25 101.232 86.4151 cv
101.054 86.7198 101.065 87.0616 101.265 87.4415 cv
101.106 87.546 li
cp
@
104.881 83.9825 mo
104.958 84.5704 105.253 85.0469 105.766 85.4112 cv
106.231 85.7413 106.748 85.8536 107.316 85.7461 cv
107.922 85.6309 108.43 85.2842 108.839 84.709 cv
109.225 84.1661 109.387 83.6006 109.325 83.0127 cv
109.262 82.4112 108.973 81.9278 108.459 81.5626 cv
107.945 81.1973 107.394 81.084 106.804 81.2227 cv
106.23 81.3575 105.75 81.6963 105.363 82.2403 cv
104.961 82.8057 104.801 83.3868 104.881 83.9825 cv
cp
107.43 84.9639 mo
107.139 84.879 106.803 84.7012 106.422 84.4307 cv
106.048 84.1651 105.772 83.9092 105.594 83.6651 cv
105.261 83.2002 105.239 82.7657 105.528 82.3575 cv
105.736 82.0635 106.033 81.9258 106.419 81.9424 cv
106.805 81.9581 107.258 82.1514 107.778 82.5206 cv
108.157 82.7901 108.436 83.0489 108.614 83.296 cv
108.941 83.7569 108.961 84.1876 108.675 84.5918 cv
108.385 84.9991 107.97 85.1241 107.43 84.9639 cv
f
104.881 83.9825 mo
104.958 84.5704 105.253 85.0469 105.766 85.4112 cv
106.231 85.7413 106.748 85.8536 107.316 85.7461 cv
107.922 85.6309 108.43 85.2842 108.839 84.709 cv
109.225 84.1661 109.387 83.6006 109.325 83.0127 cv
109.262 82.4112 108.973 81.9278 108.459 81.5626 cv
107.945 81.1973 107.394 81.084 106.804 81.2227 cv
106.23 81.3575 105.75 81.6963 105.363 82.2403 cv
104.961 82.8057 104.801 83.3868 104.881 83.9825 cv
cp
107.43 84.9639 mo
107.139 84.879 106.803 84.7012 106.422 84.4307 cv
106.048 84.1651 105.772 83.9092 105.594 83.6651 cv
105.261 83.2002 105.239 82.7657 105.528 82.3575 cv
105.736 82.0635 106.033 81.9258 106.419 81.9424 cv
106.805 81.9581 107.258 82.1514 107.778 82.5206 cv
108.157 82.7901 108.436 83.0489 108.614 83.296 cv
108.941 83.7569 108.961 84.1876 108.675 84.5918 cv
108.385 84.9991 107.97 85.1241 107.43 84.9639 cv
cp
@
44.3511 52.8047 mo
44.3511 52.8047 43.9361 52.7408 43.9361 52.275 cv
43.9361 51.8086 44.3497 51.669 44.3497 51.669 cv
46.2627 51.669 li
46.251 52.8047 li
44.3511 52.8047 li
1 /1 get_csd
sepcs
0.3 sep
f
53.8248 68.4864 mo
51.92 69.753 li
53.8033 71.0518 li
53.3462 73.3038 li
55.5904 72.8819 li
56.8487 74.7989 li
58.1397 72.9034 li
60.3765 73.3633 li
59.9644 71.0528 li
61.8682 69.7832 li
59.9795 68.5381 li
60.461 66.25 li
58.1924 66.709 li
56.8458 64.8292 li
55.6431 66.6866 li
53.4063 66.2266 li
53.8248 68.4864 li
1 /1 get_csd
sepcs
0.3 sep
f
33.251 55.0918 mo
31.3462 56.3584 li
33.2291 57.6578 li
32.7725 59.9092 li
35.0166 59.4878 li
36.275 61.4044 li
37.5655 59.5093 li
39.8028 59.9698 li
39.3902 57.6582 li
41.2945 56.3887 li
39.4058 55.1446 li
39.8868 52.856 li
37.6182 53.315 li
36.272 51.4351 li
35.0694 53.293 li
32.8321 52.8331 li
33.251 55.0918 li
1 /1 get_csd
sepcs
0.3 sep
f
74.3668 55.0596 mo
72.462 56.3262 li
74.3448 57.6255 li
73.8877 59.877 li
76.1324 59.4556 li
77.3907 61.3721 li
78.6812 59.4771 li
80.918 59.9376 li
80.5059 57.626 li
82.4102 56.3565 li
80.521 55.1124 li
81.0025 52.8238 li
78.7339 53.2828 li
77.3873 51.4029 li
76.1846 53.2608 li
73.9478 52.8008 li
74.3668 55.0596 li
1 /1 get_csd
sepcs
0.3 sep
f
64.8584 60.4415 mo
64.8584 50.2227 li
64.8584 50.2227 62.9327 49.7662 62.1055 49.7735 cv
61.0831 49.7828 58.3233 50.0772 57.3165 50.8834 cv
57.3165 51.5826 57.3165 60.0489 57.3165 60.0489 cv
57.3165 60.0489 59.0284 59.5708 60.4942 59.5708 cv
62.7388 59.5708 64.8584 60.4415 64.8584 60.4415 cv
0 0 0 0 cmyk
f
66.7544 61.3711 mo
66.7544 51.3477 li
66.7544 51.3477 66.2344 50.8501 65.7632 50.6656 cv
65.7632 51.171 65.7632 60.711 65.7632 60.711 cv
65.7632 60.711 66.668 61.1377 66.7544 61.3711 cv
f
0.4775 lw
62.4322 57.6202 mo
60.899 57.0684 59.0918 57.6387 59.0918 57.6387 cv
1 /2 get_csd
sepcs
1 sep
@
62.4444 55.8404 mo
60.899 55.3619 59.1006 55.9551 59.1006 55.9551 cv
1 /2 get_csd
sepcs
1 sep
@
62.4322 54.1934 mo
61.0601 53.8668 59.1006 54.4058 59.1006 54.4058 cv
1 /2 get_csd
sepcs
1 sep
@
62.4322 52.4903 mo
61.0601 52.1636 59.0918 52.8082 59.0918 52.8082 cv
1 /2 get_csd
sepcs
1 sep
@
48.1548 77.461 mo
47.8873 77.7823 47.9908 78.1475 47.9376 78.4698 cv
47.8838 78.7911 48.1958 79.5694 48.6773 79.9434 cv
49.1592 80.3174 50.2388 80.129 49.7569 80.2891 cv
49.2754 80.4493 47.3711 81.2139 47.3711 81.6416 cv
47.3711 82.0704 49.4361 81.3594 49.5962 81.5196 cv
49.7569 81.6797 49.9439 81.7208 49.461 82.0518 cv
48.9918 82.3731 45.9009 82.8653 45.9336 83.6016 cv
45.9654 84.3047 46.0816 86.1377 46.4566 86.084 cv
47.6324 83.7325 52.1656 82.3956 51.2554 83.0176 cv
51.0201 83.2657 49.1573 84.6866 49.7305 85.5538 cv
49.9424 85.875 51.1441 88.2139 51.358 88.2666 cv
51.5718 88.3204 51.0293 83.9932 54.0918 82.9639 cv
55.2124 82.5879 50.7442 86.0118 56.6363 90.4678 cv
56.6363 89.9034 56.6363 82.796 56.6363 82.796 cv
55.8082 81.5684 54.4361 80.3116 53.794 79.8292 cv
52.8003 79.084 51.2002 78.6749 50.4527 78.6299 cv
48.4161 78.5069 48.1548 77.461 48.1548 77.461 cv
1 /1 get_csd
sepcs
1 sep
f
0.4477 lw
48.1548 77.461 mo
47.8873 77.7823 47.9908 78.1475 47.9376 78.4698 cv
47.8838 78.7911 48.1958 79.5694 48.6773 79.9434 cv
49.1592 80.3174 50.2388 80.129 49.7569 80.2891 cv
49.2754 80.4493 47.3711 81.2139 47.3711 81.6416 cv
47.3711 82.0704 49.4361 81.3594 49.5962 81.5196 cv
49.7569 81.6797 49.9439 81.7208 49.461 82.0518 cv
48.9918 82.3731 45.9009 82.8653 45.9336 83.6016 cv
45.9654 84.3047 46.0816 86.1377 46.4566 86.084 cv
47.6324 83.7325 52.1656 82.3956 51.2554 83.0176 cv
51.0201 83.2657 49.1573 84.6866 49.7305 85.5538 cv
49.9424 85.875 51.1441 88.2139 51.358 88.2666 cv
51.5718 88.3204 51.0293 83.9932 54.0918 82.9639 cv
55.2124 82.5879 50.7442 86.0118 56.6363 90.4678 cv
56.6363 89.9034 56.6363 82.796 56.6363 82.796 cv
55.8082 81.5684 54.4361 80.3116 53.794 79.8292 cv
52.8003 79.084 51.2002 78.6749 50.4527 78.6299 cv
48.4161 78.5069 48.1548 77.461 48.1548 77.461 cv
cp
1 /1 get_csd
sepcs
1 sep
@
32.8384 10.5479 mo
32.8384 10.5479 33.9278 9.70752 34.4976 9.37061 cv
35.004 9.07129 35.9703 8.34229 36.3951 8.00294 cv
36.6626 7.78858 37.9302 6.79444 37.5708 6.79444 cv
37.5708 6.79444 35.9053 6.85987 35.3536 7.39063 cv
35.2999 7.06934 36.5313 5.08936 37.2266 4.71485 cv
37.0123 4.44727 36.9053 4.31543 36.3702 4.34034 cv
34.1412 4.44239 33.2666 6.42725 32.6778 6.85547 cv
32.357 6.74805 32.0333 4.91651 31.9854 4.70411 cv
31.3433 5.07862 30.9434 5.84082 30.8584 6.26661 cv
30.7828 6.64551 30.7496 8.67432 30.6978 9.15674 cv
30.667 9.44239 30.8296 10.711 29.7842 11.7193 cv
29.398 12.0918 29.1631 11.9815 29.0391 11.9395 cv
28.7183 11.8311 28.9317 11.7251 29.1456 11.5113 cv
29.3599 11.2969 29.8951 10.441 29.8414 10.0127 cv
29.7881 9.58448 29.4107 8.48487 27.9688 8.3003 cv
27.19 8.20069 26.7374 8.24659 26.2564 8.72852 cv
26.7374 9.04932 28.0752 9.63819 28.129 10.7618 cv
28.1827 11.8858 27.1124 12.9029 26.4166 13.2774 cv
25.7208 13.6519 24.4029 13.8941 23.3736 13.8941 cv
22.3282 13.8941 21.6431 13.8165 21.1089 13.4585 cv
20.6929 13.1792 20.5806 12.6163 20.9351 12.1519 cv
21.25 11.7388 21.2618 11.5274 21.4136 11.9781 cv
21.6983 12.8233 22.9376 12.5401 23.2862 12.5005 cv
23.9747 12.4229 24.9117 11.629 24.6646 10.7535 cv
24.5127 10.2149 24.3023 9.38331 22.3682 9.38331 cv
20.6026 9.38331 18.1475 10.4971 18.4087 13.6329 cv
18.4844 14.5396 19.4454 16.2745 22.6084 16.6451 cv
22.6084 16.6451 23.7999 16.8384 24.3887 16.8384 cv
24.3887 16.8384 25.1558 16.8609 26.6104 16.4659 cv
28.8458 15.8589 39.4708 8.54542 41.9151 10.4527 cv
42.6168 11.25 42.1753 11.8848 41.9805 12.1182 cv
41.8941 12.2217 41.772 11.4117 41.044 11.25 cv
40.4981 11.129 39.295 11.5494 39.3326 12.7403 cv
39.3877 14.4791 41.1885 14.5279 41.294 14.5298 cv
43.3521 14.5679 44.1548 12.3702 44.1548 10.8179 cv
44.1548 9.26612 43.2925 7.57813 41.0982 7.57813 cv
39.3467 7.57813 38.3116 8.07618 37.8155 8.35352 cv
37.23 8.68116 34.6001 10.1109 33.7486 10.5479 cv
32.9717 10.9463 32.8916 11.0298 32.8916 11.0298 cv
32.7315 10.8692 32.8384 10.5479 32.8384 10.5479 cv
1 /1 get_csd
sepcs
1 sep
f
32.8384 10.5479 mo
32.8384 10.5479 33.9278 9.70752 34.4976 9.37061 cv
35.004 9.07129 35.9703 8.34229 36.3951 8.00294 cv
36.6626 7.78858 37.9302 6.79444 37.5708 6.79444 cv
37.5708 6.79444 35.9053 6.85987 35.3536 7.39063 cv
35.2999 7.06934 36.5313 5.08936 37.2266 4.71485 cv
37.0123 4.44727 36.9053 4.31543 36.3702 4.34034 cv
34.1412 4.44239 33.2666 6.42725 32.6778 6.85547 cv
32.357 6.74805 32.0333 4.91651 31.9854 4.70411 cv
31.3433 5.07862 30.9434 5.84082 30.8584 6.26661 cv
30.7828 6.64551 30.7496 8.67432 30.6978 9.15674 cv
30.667 9.44239 30.8296 10.711 29.7842 11.7193 cv
29.398 12.0918 29.1631 11.9815 29.0391 11.9395 cv
28.7183 11.8311 28.9317 11.7251 29.1456 11.5113 cv
29.3599 11.2969 29.8951 10.441 29.8414 10.0127 cv
29.7881 9.58448 29.4107 8.48487 27.9688 8.3003 cv
27.19 8.20069 26.7374 8.24659 26.2564 8.72852 cv
26.7374 9.04932 28.0752 9.63819 28.129 10.7618 cv
28.1827 11.8858 27.1124 12.9029 26.4166 13.2774 cv
25.7208 13.6519 24.4029 13.8941 23.3736 13.8941 cv
22.3282 13.8941 21.6431 13.8165 21.1089 13.4585 cv
20.6929 13.1792 20.5806 12.6163 20.9351 12.1519 cv
21.25 11.7388 21.2618 11.5274 21.4136 11.9781 cv
21.6983 12.8233 22.9376 12.5401 23.2862 12.5005 cv
23.9747 12.4229 24.9117 11.629 24.6646 10.7535 cv
24.5127 10.2149 24.3023 9.38331 22.3682 9.38331 cv
20.6026 9.38331 18.1475 10.4971 18.4087 13.6329 cv
18.4844 14.5396 19.4454 16.2745 22.6084 16.6451 cv
22.6084 16.6451 23.7999 16.8384 24.3887 16.8384 cv
24.3887 16.8384 25.1558 16.8609 26.6104 16.4659 cv
28.8458 15.8589 39.4708 8.54542 41.9151 10.4527 cv
42.6168 11.25 42.1753 11.8848 41.9805 12.1182 cv
41.8941 12.2217 41.772 11.4117 41.044 11.25 cv
40.4981 11.129 39.295 11.5494 39.3326 12.7403 cv
39.3877 14.4791 41.1885 14.5279 41.294 14.5298 cv
43.3521 14.5679 44.1548 12.3702 44.1548 10.8179 cv
44.1548 9.26612 43.2925 7.57813 41.0982 7.57813 cv
39.3467 7.57813 38.3116 8.07618 37.8155 8.35352 cv
37.23 8.68116 34.6001 10.1109 33.7486 10.5479 cv
32.9717 10.9463 32.8916 11.0298 32.8916 11.0298 cv
32.7315 10.8692 32.8384 10.5479 32.8384 10.5479 cv
cp
1 /1 get_csd
sepcs
1 sep
@
13.667 56.9239 mo
13.7833 57.1514 14.108 57.3877 14.2876 57.5035 cv
14.4815 57.6275 17.2012 58.7051 17.4942 54.7876 cv
17.5997 53.3775 16.2984 49.3326 16.0567 48.1246 cv
15.7955 46.8179 15.6724 43.5767 17.771 42.4107 cv
19.4737 41.5948 21.045 42.7901 21.1524 44.0743 cv
21.2598 45.3589 20.5274 45.6207 20.107 45.773 cv
19.5318 45.9815 18.2066 45.6641 18.1475 44.7276 cv
18.1475 44.7276 17.6802 45.8575 18.3863 46.6021 cv
18.5044 46.7271 18.897 47.0162 19.4903 47.1265 cv
21.6983 47.3062 22.3111 46.2007 22.5811 45.7608 cv
23.064 44.9742 23.1744 44.105 23.1563 42.92 cv
23.1324 41.3589 21.9253 39.3345 19.6241 39.3345 cv
18.3541 39.4493 17.4834 39.8697 17.1094 40.6187 cv
16.6812 39.9229 16.6275 39.4415 16.9483 38.8526 cv
17.2696 38.2642 17.858 37.6753 19.0357 37.4615 cv
18.982 36.3375 16.7359 35.8155 16.1993 35.856 cv
15.3892 35.917 15.3926 35.9747 14.7012 36.2305 cv
14.5938 35.8023 14.5411 34.8194 15.7657 34.0694 cv
18.6358 32.3111 20.2027 35.8956 20.2662 34.5181 cv
20.3687 32.316 22.5899 32.1851 22.5899 32.1851 cv
22.5899 32.1851 22.2774 34.0694 22.4068 34.3038 cv
22.5645 34.9659 24.066 36.2837 24.5479 37.7823 cv
25.0293 39.2808 24.9224 40.1368 24.4942 41.2608 cv
24.5479 41.7427 24.6548 41.7427 24.6548 41.7427 cv
25.19 41.1006 25.5645 40.0298 25.7247 39.0132 cv
25.8858 37.9966 26.273 36.1216 25.2027 32.0547 cv
24.1324 27.9874 21.7115 27.2935 21.2295 27.2935 cv
20.5528 27.2935 20.0562 27.5464 19.7847 27.8287 cv
19.5474 28.0757 19.2803 28.6426 19.6133 29.0718 cv
19.8213 29.3404 20.107 29.188 20.3199 28.899 cv
20.6358 28.4708 21.1109 28.459 21.4322 28.5123 cv
21.753 28.566 22.3282 28.9834 22.3282 29.5723 cv
22.3282 30.1607 21.6529 31.2945 20.3687 31.4014 cv
19.0845 31.5084 17.9903 30.5352 17.8296 30.2144 cv
17.669 29.8931 17.2803 27.6836 17.3638 27.3511 cv
18.1475 24.2154 21.439 23.6031 21.3902 21.4605 cv
21.3624 20.2339 21.1524 20.2105 21.022 19.5118 cv
20.7251 17.9263 21.8057 16.7686 21.8057 16.7686 cv
22.1802 16.8218 24.3687 17.0674 25.0645 17.0674 cv
25.0645 17.0674 25.6275 18.3765 27.4849 19.1866 cv
28.691 19.7125 29.2193 19.6583 29.9683 19.4439 cv
30.022 19.8184 29.8565 20.0342 29.4869 20.2295 cv
28.5699 20.7134 28.7305 21.0499 28.7305 21.2105 cv
28.7305 21.3711 30.0752 22.2095 30.0752 24.2432 cv
29.7012 24.1358 27.9239 22.3326 26.6397 22.3863 cv
26.3189 22.6539 26.7491 22.9952 26.9185 23.3868 cv
27.085 23.7725 27.3462 24.4571 27.3462 25.0992 cv
26.7574 24.7784 26.0084 24.2964 25.2593 24.2964 cv
24.5103 24.2964 23.3863 24.9922 23.3863 25.3668 cv
24.2427 26.1158 27.7208 27.8287 28.6309 31.3072 cv
29.5401 34.7857 29.1656 39.4947 28.3633 41.7427 cv
27.5606 43.9903 26.0621 47.0406 22.9043 48.2178 cv
21.8057 48.5909 21.0826 48.4742 20.8707 48.4322 cv
20.1807 48.2945 19.4263 47.8433 19.212 47.7364 cv
19.0518 47.9502 19.4205 48.876 20.0567 49.9898 cv
20.4698 50.7144 21.2012 51.8873 23.0499 52.0806 cv
24.3609 52.108 25.0235 50.4561 23.9507 50.1065 cv
23.961 50.6041 23.8365 50.7837 23.4229 51.0044 cv
23.0733 51.1905 22.646 50.9571 22.4854 50.6895 cv
22.3248 50.4219 22.3331 49.6861 22.7188 49.3604 cv
23.022 49.1036 23.2256 48.8599 24.0816 48.9136 cv
24.938 48.9673 26.1929 50.6148 25.2027 52.1749 cv
24.982 52.522 24.4263 53.397 23.1744 53.5015 cv
22.2662 53.5777 20.7408 52.9834 20.1387 52.4532 cv
19.5591 51.9424 19.5591 51.6666 18.8907 51.6426 cv
18.5162 52.0708 20.126 53.4063 20.4561 53.6124 cv
21.7447 54.4151 22.3028 54.5376 23.6348 54.9185 cv
25.0918 55.335 25.2056 56.0313 25.6338 57.0479 cv
24.9918 57.0479 24.7706 57.1021 24.2427 57.2085 cv
23.7544 57.3067 23.4883 57.5923 23.44 57.7437 cv
22.9947 59.1866 23.5333 61.0909 23.6851 62.167 cv
23.481 62.6602 21.3941 63.4639 20.815 62.4385 cv
21.417 61.6485 22.0845 60.4004 21.6016 58.7588 cv
20.939 57.0479 19.9454 56.7305 19.9454 56.7305 cv
19.9454 56.7305 19.4625 57.876 18.8692 58.4141 cv
18.4556 58.8692 17.1695 59.9703 14.7901 59.5508 cv
13.8189 59.3799 12.793 58.5191 12.3565 57.7105 cv
true sop
1 /1 get_csd
sepcs
1 sep
f
13.667 56.9239 mo
13.7833 57.1514 14.108 57.3877 14.2876 57.5035 cv
14.4815 57.6275 17.2012 58.7051 17.4942 54.7876 cv
17.5997 53.3775 16.2984 49.3326 16.0567 48.1246 cv
15.7955 46.8179 15.6724 43.5767 17.771 42.4107 cv
19.4737 41.5948 21.045 42.7901 21.1524 44.0743 cv
21.2598 45.3589 20.5274 45.6207 20.107 45.773 cv
19.5318 45.9815 18.2066 45.6641 18.1475 44.7276 cv
18.1475 44.7276 17.6802 45.8575 18.3863 46.6021 cv
18.5044 46.7271 18.897 47.0162 19.4903 47.1265 cv
21.6983 47.3062 22.3111 46.2007 22.5811 45.7608 cv
23.064 44.9742 23.1744 44.105 23.1563 42.92 cv
23.1324 41.3589 21.9253 39.3345 19.6241 39.3345 cv
18.3541 39.4493 17.4834 39.8697 17.1094 40.6187 cv
16.6812 39.9229 16.6275 39.4415 16.9483 38.8526 cv
17.2696 38.2642 17.858 37.6753 19.0357 37.4615 cv
18.982 36.3375 16.7359 35.8155 16.1993 35.856 cv
15.3892 35.917 15.3926 35.9747 14.7012 36.2305 cv
14.5938 35.8023 14.5411 34.8194 15.7657 34.0694 cv
18.6358 32.3111 20.2027 35.8956 20.2662 34.5181 cv
20.3687 32.316 22.5899 32.1851 22.5899 32.1851 cv
22.5899 32.1851 22.2774 34.0694 22.4068 34.3038 cv
22.5645 34.9659 24.066 36.2837 24.5479 37.7823 cv
25.0293 39.2808 24.9224 40.1368 24.4942 41.2608 cv
24.5479 41.7427 24.6548 41.7427 24.6548 41.7427 cv
25.19 41.1006 25.5645 40.0298 25.7247 39.0132 cv
25.8858 37.9966 26.273 36.1216 25.2027 32.0547 cv
24.1324 27.9874 21.7115 27.2935 21.2295 27.2935 cv
20.5528 27.2935 20.0562 27.5464 19.7847 27.8287 cv
19.5474 28.0757 19.2803 28.6426 19.6133 29.0718 cv
19.8213 29.3404 20.107 29.188 20.3199 28.899 cv
20.6358 28.4708 21.1109 28.459 21.4322 28.5123 cv
21.753 28.566 22.3282 28.9834 22.3282 29.5723 cv
22.3282 30.1607 21.6529 31.2945 20.3687 31.4014 cv
19.0845 31.5084 17.9903 30.5352 17.8296 30.2144 cv
17.669 29.8931 17.2803 27.6836 17.3638 27.3511 cv
18.1475 24.2154 21.439 23.6031 21.3902 21.4605 cv
21.3624 20.2339 21.1524 20.2105 21.022 19.5118 cv
20.7251 17.9263 21.8057 16.7686 21.8057 16.7686 cv
22.1802 16.8218 24.3687 17.0674 25.0645 17.0674 cv
25.0645 17.0674 25.6275 18.3765 27.4849 19.1866 cv
28.691 19.7125 29.2193 19.6583 29.9683 19.4439 cv
30.022 19.8184 29.8565 20.0342 29.4869 20.2295 cv
28.5699 20.7134 28.7305 21.0499 28.7305 21.2105 cv
28.7305 21.3711 30.0752 22.2095 30.0752 24.2432 cv
29.7012 24.1358 27.9239 22.3326 26.6397 22.3863 cv
26.3189 22.6539 26.7491 22.9952 26.9185 23.3868 cv
27.085 23.7725 27.3462 24.4571 27.3462 25.0992 cv
26.7574 24.7784 26.0084 24.2964 25.2593 24.2964 cv
24.5103 24.2964 23.3863 24.9922 23.3863 25.3668 cv
24.2427 26.1158 27.7208 27.8287 28.6309 31.3072 cv
29.5401 34.7857 29.1656 39.4947 28.3633 41.7427 cv
27.5606 43.9903 26.0621 47.0406 22.9043 48.2178 cv
21.8057 48.5909 21.0826 48.4742 20.8707 48.4322 cv
20.1807 48.2945 19.4263 47.8433 19.212 47.7364 cv
19.0518 47.9502 19.4205 48.876 20.0567 49.9898 cv
20.4698 50.7144 21.2012 51.8873 23.0499 52.0806 cv
24.3609 52.108 25.0235 50.4561 23.9507 50.1065 cv
23.961 50.6041 23.8365 50.7837 23.4229 51.0044 cv
23.0733 51.1905 22.646 50.9571 22.4854 50.6895 cv
22.3248 50.4219 22.3331 49.6861 22.7188 49.3604 cv
23.022 49.1036 23.2256 48.8599 24.0816 48.9136 cv
24.938 48.9673 26.1929 50.6148 25.2027 52.1749 cv
24.982 52.522 24.4263 53.397 23.1744 53.5015 cv
22.2662 53.5777 20.7408 52.9834 20.1387 52.4532 cv
19.5591 51.9424 19.5591 51.6666 18.8907 51.6426 cv
18.5162 52.0708 20.126 53.4063 20.4561 53.6124 cv
21.7447 54.4151 22.3028 54.5376 23.6348 54.9185 cv
25.0918 55.335 25.2056 56.0313 25.6338 57.0479 cv
24.9918 57.0479 24.7706 57.1021 24.2427 57.2085 cv
23.7544 57.3067 23.4883 57.5923 23.44 57.7437 cv
22.9947 59.1866 23.5333 61.0909 23.6851 62.167 cv
23.481 62.6602 21.3941 63.4639 20.815 62.4385 cv
21.417 61.6485 22.0845 60.4004 21.6016 58.7588 cv
20.939 57.0479 19.9454 56.7305 19.9454 56.7305 cv
19.9454 56.7305 19.4625 57.876 18.8692 58.4141 cv
18.4556 58.8692 17.1695 59.9703 14.7901 59.5508 cv
13.8189 59.3799 12.793 58.5191 12.3565 57.7105 cv
1 /1 get_csd
sepcs
1 sep
@
12.4249 57.8345 mo
12.2735 57.6275 12.1114 57.1026 12.0943 56.7584 cv
12.0645 56.1758 12.2042 54.1363 14.1387 53.938 cv
15.2403 53.8252 16.0127 54.4976 16.0127 55.461 cv
16.0127 56.4244 15.0333 56.689 14.4678 56.5235 cv
14.3018 56.4752 13.8003 56.0088 13.9898 55.4698 cv
14.0948 55.1714 13.543 55.4888 13.5015 56.0542 cv
13.4742 56.4273 13.543 56.6202 13.667 56.9239 cv
1 /1 get_csd
sepcs
1 sep
f
12.4249 57.8345 mo
12.2735 57.6275 12.1114 57.1026 12.0943 56.7584 cv
12.0645 56.1758 12.2042 54.1363 14.1387 53.938 cv
15.2403 53.8252 16.0127 54.4976 16.0127 55.461 cv
16.0127 56.4244 15.0333 56.689 14.4678 56.5235 cv
14.3018 56.4752 13.8003 56.0088 13.9898 55.4698 cv
14.0948 55.1714 13.543 55.4888 13.5015 56.0542 cv
13.4742 56.4273 13.543 56.6202 13.667 56.9239 cv
1 /1 get_csd
sepcs
1 sep
@
17.9859 30.4302 mo
17.9859 30.4302 16.7022 27.6958 16.5894 27.607 cv
16.2042 26.6919 15.8189 26.2584 15.9629 25.4395 cv
16.1075 24.6211 16.8702 24.2876 17.3033 23.8057 cv
16.9664 23.4205 16.3106 23.3443 16.189 23.4053 cv
16.0489 23.4751 14.4815 23.8057 14.9522 26.2105 cv
13.7759 24.8643 13.3653 24.8834 12.7178 24.9815 cv
12.5044 25.0142 11.6417 25.084 11.0718 26.0401 cv
11.8902 26.2325 13.17 26.5958 13.17 27.0772 cv
12.8326 27.4146 11.6597 28.377 11.5806 29.0518 cv
11.4551 30.1211 11.9683 30.4244 12.2544 30.545 cv
12.4952 29.1963 13.1109 28.6055 13.7481 28.522 cv
14.3218 28.4468 15.0127 28.4376 15.9629 28.9556 cv
17.023 29.5337 17.9859 30.4302 17.9859 30.4302 cv
false sop
1 /1 get_csd
sepcs
1 sep
f
17.9859 30.4302 mo
17.9859 30.4302 16.7022 27.6958 16.5894 27.607 cv
16.2042 26.6919 15.8189 26.2584 15.9629 25.4395 cv
16.1075 24.6211 16.8702 24.2876 17.3033 23.8057 cv
16.9664 23.4205 16.3106 23.3443 16.189 23.4053 cv
16.0489 23.4751 14.4815 23.8057 14.9522 26.2105 cv
13.7759 24.8643 13.3653 24.8834 12.7178 24.9815 cv
12.5044 25.0142 11.6417 25.084 11.0718 26.0401 cv
11.8902 26.2325 13.17 26.5958 13.17 27.0772 cv
12.8326 27.4146 11.6597 28.377 11.5806 29.0518 cv
11.4551 30.1211 11.9683 30.4244 12.2544 30.545 cv
12.4952 29.1963 13.1109 28.6055 13.7481 28.522 cv
14.3218 28.4468 15.0127 28.4376 15.9629 28.9556 cv
17.023 29.5337 17.9859 30.4302 17.9859 30.4302 cv
cp
1 /1 get_csd
sepcs
1 sep
@
55.2286 2.37745 mo
55.2286 2.37745 55.6978 0.928711 56.6744 0.382813 cv
56.6744 0.382813 57.0958 6.32081 55.3697 8.18018 cv
53.6544 10.0269 51.9073 10.2046 51.0162 10.4229 cv
47.2842 11.3365 45.7164 11.9029 44.4195 12.9297 cv
44.7164 7.8169 44.2876 6.33252 48.5201 4.36377 cv
48.5533 4.4629 47.4898 6.74366 47.3487 8.0376 cv
47.2945 8.53174 47.2945 8.53174 47.2945 8.53174 cv
47.4463 8.66944 47.7916 8.60059 47.9429 8.36182 cv
48.0723 8.15821 50.1363 5.15528 51.3897 4.95752 cv
51.4888 5.05665 50.8619 5.68311 50.6314 6.21094 cv
50.4751 6.56788 50.3516 7.21534 50.5723 7.3711 cv
50.9366 7.62794 51.4722 7.45313 51.8785 7.22754 cv
52.0909 7.10987 53.4551 6.41651 53.3472 3.87647 cv
53.2832 3.67969 53.0953 2.95752 52.1583 2.7959 cv
52.3414 2.26661 52.8394 2.0669 53.4092 2.23536 cv
54.0308 2.41895 54.5899 3.01221 54.9141 3.06592 cv
55.2286 2.37745 li
1 /1 get_csd
sepcs
1 sep
f
0.4521 lw
55.2286 2.37745 mo
55.2286 2.37745 55.6978 0.928711 56.6744 0.382813 cv
56.6744 0.382813 57.0958 6.32081 55.3697 8.18018 cv
53.6544 10.0269 51.9073 10.2046 51.0162 10.4229 cv
47.2842 11.3365 45.7164 11.9029 44.4195 12.9297 cv
44.7164 7.8169 44.2876 6.33252 48.5201 4.36377 cv
48.5533 4.4629 47.4898 6.74366 47.3487 8.0376 cv
47.2945 8.53174 47.2945 8.53174 47.2945 8.53174 cv
47.4463 8.66944 47.7916 8.60059 47.9429 8.36182 cv
48.0723 8.15821 50.1363 5.15528 51.3897 4.95752 cv
51.4888 5.05665 50.8619 5.68311 50.6314 6.21094 cv
50.4751 6.56788 50.3516 7.21534 50.5723 7.3711 cv
50.9366 7.62794 51.4722 7.45313 51.8785 7.22754 cv
52.0909 7.10987 53.4551 6.41651 53.3472 3.87647 cv
53.2832 3.67969 53.0953 2.95752 52.1583 2.7959 cv
52.3414 2.26661 52.8394 2.0669 53.4092 2.23536 cv
54.0308 2.41895 54.5899 3.01221 54.9141 3.06592 cv
55.2286 2.37745 li
cp
1 /1 get_csd
sepcs
1 sep
@
65.5416 77.4795 mo
65.8091 77.7999 65.7056 78.1661 65.7593 78.4874 cv
65.8126 78.8086 65.5005 79.587 65.0191 79.962 cv
64.5372 80.337 63.4581 80.1465 63.9395 80.3077 cv
64.421 80.4678 66.3252 81.2325 66.3252 81.6602 cv
66.3252 82.0879 64.2608 81.378 64.1002 81.5381 cv
63.9395 81.6993 63.7525 81.7383 64.2354 82.0704 cv
64.7046 82.3916 67.7955 82.8838 67.7627 83.6202 cv
67.731 84.3233 67.6148 86.1553 67.2398 86.1026 cv
66.064 83.75 61.5308 82.4151 62.441 83.0372 cv
62.6763 83.2842 64.5391 84.7051 63.9659 85.5713 cv
63.754 85.8926 62.5528 88.2325 62.3384 88.2862 cv
62.1246 88.3389 62.667 84.0118 59.6045 82.9834 cv
58.4839 82.6065 62.9522 86.0294 57.0601 90.4874 cv
57.0601 89.921 57.0601 82.8155 57.0601 82.8155 cv
57.8882 81.587 59.2603 80.3292 59.9029 79.8487 cv
60.896 79.1036 62.4957 78.6934 63.2437 78.6485 cv
65.2803 78.5245 65.5416 77.4795 65.5416 77.4795 cv
1 /1 get_csd
sepcs
1 sep
f
0.4477 lw
65.5416 77.4795 mo
65.8091 77.7999 65.7056 78.1661 65.7593 78.4874 cv
65.8126 78.8086 65.5005 79.587 65.0191 79.962 cv
64.5372 80.337 63.4581 80.1465 63.9395 80.3077 cv
64.421 80.4678 66.3252 81.2325 66.3252 81.6602 cv
66.3252 82.0879 64.2608 81.378 64.1002 81.5381 cv
63.9395 81.6993 63.7525 81.7383 64.2354 82.0704 cv
64.7046 82.3916 67.7955 82.8838 67.7627 83.6202 cv
67.731 84.3233 67.6148 86.1553 67.2398 86.1026 cv
66.064 83.75 61.5308 82.4151 62.441 83.0372 cv
62.6763 83.2842 64.5391 84.7051 63.9659 85.5713 cv
63.754 85.8926 62.5528 88.2325 62.3384 88.2862 cv
62.1246 88.3389 62.667 84.0118 59.6045 82.9834 cv
58.4839 82.6065 62.9522 86.0294 57.0601 90.4874 cv
57.0601 89.921 57.0601 82.8155 57.0601 82.8155 cv
57.8882 81.587 59.2603 80.3292 59.9029 79.8487 cv
60.896 79.1036 62.4957 78.6934 63.2437 78.6485 cv
65.2803 78.5245 65.5416 77.4795 65.5416 77.4795 cv
cp
1 /1 get_csd
sepcs
1 sep
@
80.858 10.5665 mo
80.858 10.5665 79.7691 9.72559 79.1988 9.38916 cv
78.6924 9.08985 77.7261 8.36084 77.3013 8.021 cv
77.0342 7.80713 75.7666 6.81299 76.1255 6.81299 cv
76.1255 6.81299 77.7916 6.87794 78.3428 7.40918 cv
78.3965 7.0879 77.1656 5.10792 76.4698 4.7334 cv
76.6836 4.46534 76.7916 4.33399 77.3262 4.3584 cv
79.5552 4.46094 80.4297 6.44581 81.0186 6.87354 cv
81.3394 6.76661 81.6631 4.93506 81.711 4.72217 cv
82.3531 5.09717 82.7535 5.85938 82.8379 6.28516 cv
82.9136 6.66407 82.9468 8.69288 82.9986 9.17481 cv
83.0294 9.46094 82.8668 10.7295 83.9126 11.7378 cv
84.2989 12.1104 84.5332 12 84.6578 11.9576 cv
84.9781 11.8492 84.7647 11.7437 84.5508 11.5298 cv
84.3365 11.3155 83.8013 10.4595 83.855 10.0313 cv
83.9082 9.60303 84.2857 8.50342 85.7281 8.31885 cv
86.5064 8.21876 86.959 8.26514 87.4405 8.74708 cv
86.959 9.06788 85.6207 9.65674 85.5674 10.7803 cv
85.5137 11.9043 86.584 12.9209 87.2798 13.2959 cv
87.9756 13.6705 89.2935 13.9126 90.3228 13.9126 cv
91.3682 13.9126 92.0538 13.835 92.5874 13.4771 cv
93.004 13.1978 93.1163 12.6343 92.7618 12.1705 cv
92.4463 11.7574 92.4346 11.5455 92.2828 11.9961 cv
91.9986 12.8414 90.7588 12.5582 90.4102 12.5191 cv
89.7217 12.4415 88.7847 11.647 89.0318 10.7715 cv
89.1836 10.2334 89.3946 9.40137 91.3282 9.40137 cv
93.0943 9.40137 95.5489 10.5157 95.2876 13.6514 cv
95.212 14.5577 94.251 16.2925 91.0879 16.6636 cv
91.0879 16.6636 89.8965 16.857 89.3077 16.857 cv
89.3077 16.857 88.5406 16.8794 87.086 16.4844 cv
84.8506 15.877 74.2256 8.56397 71.7813 10.4712 cv
71.0796 11.2686 71.521 11.9034 71.7164 12.1368 cv
71.8023 12.2403 71.9244 11.4302 72.6529 11.2686 cv
73.1983 11.1475 74.4014 11.5679 74.3638 12.7588 cv
74.3086 14.4971 72.5084 14.5464 72.4024 14.5484 cv
70.3443 14.5865 69.5416 12.3882 69.5416 10.8365 cv
69.5416 9.28467 70.4039 7.59668 72.5982 7.59668 cv
74.3497 7.59668 75.3848 8.09473 75.8809 8.37208 cv
76.4664 8.69922 79.0962 10.1294 79.9483 10.5665 cv
80.7252 10.9649 80.8042 11.0479 80.8042 11.0479 cv
80.9649 10.8873 80.858 10.5665 80.858 10.5665 cv
1 /1 get_csd
sepcs
1 sep
f
80.858 10.5665 mo
80.858 10.5665 79.7691 9.72559 79.1988 9.38916 cv
78.6924 9.08985 77.7261 8.36084 77.3013 8.021 cv
77.0342 7.80713 75.7666 6.81299 76.1255 6.81299 cv
76.1255 6.81299 77.7916 6.87794 78.3428 7.40918 cv
78.3965 7.0879 77.1656 5.10792 76.4698 4.7334 cv
76.6836 4.46534 76.7916 4.33399 77.3262 4.3584 cv
79.5552 4.46094 80.4297 6.44581 81.0186 6.87354 cv
81.3394 6.76661 81.6631 4.93506 81.711 4.72217 cv
82.3531 5.09717 82.7535 5.85938 82.8379 6.28516 cv
82.9136 6.66407 82.9468 8.69288 82.9986 9.17481 cv
83.0294 9.46094 82.8668 10.7295 83.9126 11.7378 cv
84.2989 12.1104 84.5332 12 84.6578 11.9576 cv
84.9781 11.8492 84.7647 11.7437 84.5508 11.5298 cv
84.3365 11.3155 83.8013 10.4595 83.855 10.0313 cv
83.9082 9.60303 84.2857 8.50342 85.7281 8.31885 cv
86.5064 8.21876 86.959 8.26514 87.4405 8.74708 cv
86.959 9.06788 85.6207 9.65674 85.5674 10.7803 cv
85.5137 11.9043 86.584 12.9209 87.2798 13.2959 cv
87.9756 13.6705 89.2935 13.9126 90.3228 13.9126 cv
91.3682 13.9126 92.0538 13.835 92.5874 13.4771 cv
93.004 13.1978 93.1163 12.6343 92.7618 12.1705 cv
92.4463 11.7574 92.4346 11.5455 92.2828 11.9961 cv
91.9986 12.8414 90.7588 12.5582 90.4102 12.5191 cv
89.7217 12.4415 88.7847 11.647 89.0318 10.7715 cv
89.1836 10.2334 89.3946 9.40137 91.3282 9.40137 cv
93.0943 9.40137 95.5489 10.5157 95.2876 13.6514 cv
95.212 14.5577 94.251 16.2925 91.0879 16.6636 cv
91.0879 16.6636 89.8965 16.857 89.3077 16.857 cv
89.3077 16.857 88.5406 16.8794 87.086 16.4844 cv
84.8506 15.877 74.2256 8.56397 71.7813 10.4712 cv
71.0796 11.2686 71.521 11.9034 71.7164 12.1368 cv
71.8023 12.2403 71.9244 11.4302 72.6529 11.2686 cv
73.1983 11.1475 74.4014 11.5679 74.3638 12.7588 cv
74.3086 14.4971 72.5084 14.5464 72.4024 14.5484 cv
70.3443 14.5865 69.5416 12.3882 69.5416 10.8365 cv
69.5416 9.28467 70.4039 7.59668 72.5982 7.59668 cv
74.3497 7.59668 75.3848 8.09473 75.8809 8.37208 cv
76.4664 8.69922 79.0962 10.1294 79.9483 10.5665 cv
80.7252 10.9649 80.8042 11.0479 80.8042 11.0479 cv
80.9649 10.8873 80.858 10.5665 80.858 10.5665 cv
cp
1 /1 get_csd
sepcs
1 sep
@
93.8926 59.7559 mo
93.8926 59.7559 96.7588 62.4483 96.1104 64.7794 cv
96.0586 64.9659 95.6553 66.629 93.375 67.1084 cv
93 66.9473 92.6817 66.3702 92.3614 66.3458 cv
91.6656 66.292 90.0469 69.0127 89.6802 69.5674 cv
89.3008 70.1553 88.5489 71.2549 88.5489 71.7911 cv
88.5489 72.3252 90.8018 70.7139 91.6846 69.8311 cv
92.5679 68.9483 92.3072 68.002 93.0567 68.002 cv
93.2168 68.6983 93.0918 69.2549 93.2525 69.3086 cv
93.4131 69.3624 94.9834 67.7374 96.0538 67.9522 cv
97.1241 68.1661 98.5084 69.7403 98.3477 70.8106 cv
97.9961 71.0645 96.3194 70.1163 95.8916 70.0596 cv
95.5113 70.0108 95.0308 70.1319 95.212 70.6153 cv
95.6402 70.8292 97.0723 72.5157 96.6495 72.7706 cv
96.2266 73.0254 96.0967 72.1348 92.9913 72.1827 cv
91.0738 72.3282 90.4444 73.2295 90.4654 73.9249 cv
90.4781 74.3565 90.5586 74.7579 90.8135 74.8389 cv
91.2754 74.9874 91.8951 75.003 93.6119 74.6651 cv
95.0831 74.375 95.1075 74.0557 95.0489 74.6983 cv
95.0162 75.0577 93.775 75.5137 93.775 76.1026 cv
93.775 76.6915 96.9244 77.4561 94.5591 80.6749 cv
93.3394 81.9815 90.7212 82.0499 90.0733 81.7208 cv
89.9126 81.3995 91.9415 80.4346 91.6846 79.1504 cv
91.6412 78.9327 91.2056 77.9307 89.9864 77.8448 cv
89.2491 77.7911 89.899 79.2813 88.3311 79.4122 cv
88.3311 77.42 87.3077 77.5069 87.3077 77.5069 cv
87.3077 77.5069 86.7525 77.4082 85.3887 77.9024 cv
84.3809 78.2666 83.6226 78.4376 83.3013 79.1329 cv
82.9805 79.8292 83.2476 79.5079 83.7295 79.5079 cv
84.211 79.5079 84.771 79.1309 85.4136 79.2374 cv
86.0557 79.3448 86.69 80.0557 86.8506 80.8057 cv
87.0113 81.5547 87.1309 83.2042 86.3282 83.419 cv
86.3282 83.419 85.9361 81.8506 83.7149 80.9366 cv
83.0699 80.671 82.1187 80.6924 81.1021 81.0665 cv
80.085 81.4415 76.398 83.2198 72.7056 83.2198 cv
69.0127 83.2198 66.544 80.4922 66.0694 79.4737 cv
64.379 75.8409 66.9258 73.6768 68.69 73.75 cv
71.8257 73.8809 72.0762 76.2295 71.9566 76.7549 cv
71.8243 77.334 71.6221 78.5499 70.1368 78.2803 cv
69.1841 78.1075 69.1109 76.7911 69.1109 76.7911 cv
68.2369 76.9385 68.2252 77.8155 68.2637 78.0538 cv
68.4761 79.3702 69.9498 79.7374 70.754 79.8663 cv
71.3521 79.962 72.4044 79.9864 73.1334 79.8321 cv
73.1334 79.8321 78.1168 79.2588 81.2325 77.2784 cv
85.0762 74.834 86.1021 73.004 87.504 69.962 cv
89.3399 66.1963 90.1631 61.3584 90.1631 61.3584 cv
90.1631 61.3584 91.9571 62.8331 91.8638 62.8575 cv
94.1236 62.2549 93.8926 59.7559 93.8926 59.7559 cv
1 /1 get_csd
sepcs
1 sep
f
93.8926 59.7559 mo
93.8926 59.7559 96.7588 62.4483 96.1104 64.7794 cv
96.0586 64.9659 95.6553 66.629 93.375 67.1084 cv
93 66.9473 92.6817 66.3702 92.3614 66.3458 cv
91.6656 66.292 90.0469 69.0127 89.6802 69.5674 cv
89.3008 70.1553 88.5489 71.2549 88.5489 71.7911 cv
88.5489 72.3252 90.8018 70.7139 91.6846 69.8311 cv
92.5679 68.9483 92.3072 68.002 93.0567 68.002 cv
93.2168 68.6983 93.0918 69.2549 93.2525 69.3086 cv
93.4131 69.3624 94.9834 67.7374 96.0538 67.9522 cv
97.1241 68.1661 98.5084 69.7403 98.3477 70.8106 cv
97.9961 71.0645 96.3194 70.1163 95.8916 70.0596 cv
95.5113 70.0108 95.0308 70.1319 95.212 70.6153 cv
95.6402 70.8292 97.0723 72.5157 96.6495 72.7706 cv
96.2266 73.0254 96.0967 72.1348 92.9913 72.1827 cv
91.0738 72.3282 90.4444 73.2295 90.4654 73.9249 cv
90.4781 74.3565 90.5586 74.7579 90.8135 74.8389 cv
91.2754 74.9874 91.8951 75.003 93.6119 74.6651 cv
95.0831 74.375 95.1075 74.0557 95.0489 74.6983 cv
95.0162 75.0577 93.775 75.5137 93.775 76.1026 cv
93.775 76.6915 96.9244 77.4561 94.5591 80.6749 cv
93.3394 81.9815 90.7212 82.0499 90.0733 81.7208 cv
89.9126 81.3995 91.9415 80.4346 91.6846 79.1504 cv
91.6412 78.9327 91.2056 77.9307 89.9864 77.8448 cv
89.2491 77.7911 89.899 79.2813 88.3311 79.4122 cv
88.3311 77.42 87.3077 77.5069 87.3077 77.5069 cv
87.3077 77.5069 86.7525 77.4082 85.3887 77.9024 cv
84.3809 78.2666 83.6226 78.4376 83.3013 79.1329 cv
82.9805 79.8292 83.2476 79.5079 83.7295 79.5079 cv
84.211 79.5079 84.771 79.1309 85.4136 79.2374 cv
86.0557 79.3448 86.69 80.0557 86.8506 80.8057 cv
87.0113 81.5547 87.1309 83.2042 86.3282 83.419 cv
86.3282 83.419 85.9361 81.8506 83.7149 80.9366 cv
83.0699 80.671 82.1187 80.6924 81.1021 81.0665 cv
80.085 81.4415 76.398 83.2198 72.7056 83.2198 cv
69.0127 83.2198 66.544 80.4922 66.0694 79.4737 cv
64.379 75.8409 66.9258 73.6768 68.69 73.75 cv
71.8257 73.8809 72.0762 76.2295 71.9566 76.7549 cv
71.8243 77.334 71.6221 78.5499 70.1368 78.2803 cv
69.1841 78.1075 69.1109 76.7911 69.1109 76.7911 cv
68.2369 76.9385 68.2252 77.8155 68.2637 78.0538 cv
68.4761 79.3702 69.9498 79.7374 70.754 79.8663 cv
71.3521 79.962 72.4044 79.9864 73.1334 79.8321 cv
73.1334 79.8321 78.1168 79.2588 81.2325 77.2784 cv
85.0762 74.834 86.1021 73.004 87.504 69.962 cv
89.3399 66.1963 90.1631 61.3584 90.1631 61.3584 cv
90.1631 61.3584 91.9571 62.8331 91.8638 62.8575 cv
94.1236 62.2549 93.8926 59.7559 93.8926 59.7559 cv
cp
1 /1 get_csd
sepcs
1 sep
@
19.8033 59.7378 mo
19.8033 59.7378 16.9371 62.4297 17.586 64.7618 cv
17.6373 64.9473 18.0411 66.6104 20.3213 67.0889 cv
20.6958 66.9288 21.0152 66.3526 21.335 66.3282 cv
22.0308 66.2745 23.6495 68.9942 24.0162 69.5499 cv
24.3956 70.1368 25.1475 71.2374 25.1475 71.7725 cv
25.1475 72.3077 22.8946 70.6954 22.0118 69.8126 cv
21.1285 68.9297 21.3892 67.9834 20.6402 67.9834 cv
20.4795 68.6788 20.6045 69.2364 20.4439 69.2901 cv
20.2833 69.3428 18.7129 67.7198 17.6426 67.9327 cv
16.5723 68.1475 15.188 69.7217 15.3487 70.792 cv
15.6998 71.046 17.377 70.0977 17.8047 70.0411 cv
18.1851 69.9922 18.6656 70.1133 18.4844 70.5967 cv
18.0562 70.8106 16.6241 72.4971 17.0474 72.752 cv
17.4698 73.0079 17.5997 72.1163 20.7056 72.1641 cv
22.6226 72.3086 23.252 73.211 23.2315 73.9063 cv
23.2183 74.337 23.1373 74.7393 22.8829 74.8204 cv
22.4209 74.9688 21.8013 74.9844 20.085 74.6465 cv
18.6138 74.3575 18.5894 74.0372 18.6475 74.6788 cv
18.6802 75.0381 19.9214 75.4952 19.9214 76.0831 cv
19.9214 76.6719 16.772 77.4376 19.1373 80.6573 cv
20.357 81.9629 22.9751 82.0313 23.6231 81.7022 cv
23.7837 81.3799 21.7554 80.4161 22.0118 79.1329 cv
22.0552 78.9151 22.4908 77.9122 23.7105 77.8252 cv
24.4478 77.7725 23.7974 79.2627 25.3653 79.3936 cv
25.3653 77.4004 26.3887 77.4883 26.3887 77.4883 cv
26.3887 77.4883 26.9439 77.3907 28.3077 77.8838 cv
29.3155 78.2491 30.0738 78.42 30.3951 79.1153 cv
30.7159 79.8106 30.4488 79.4893 29.9668 79.4893 cv
29.4854 79.4893 28.9249 79.1124 28.2828 79.2198 cv
27.6407 79.3262 27.0064 80.0381 26.8458 80.7872 cv
26.6856 81.5372 26.5655 83.1866 27.3687 83.4004 cv
27.3687 83.4004 27.7603 81.8321 29.9815 80.918 cv
30.627 80.6514 31.5777 80.6739 32.5943 81.0489 cv
33.6114 81.4229 37.2984 83.2002 40.9913 83.2002 cv
44.6836 83.2002 47.1529 80.4737 47.627 79.4551 cv
49.3179 75.8223 46.7706 73.6582 45.0064 73.7325 cv
41.8707 73.8624 41.6202 76.212 41.7403 76.7374 cv
41.8721 77.3165 42.0743 78.5323 43.5596 78.2618 cv
44.5123 78.0879 44.5855 76.7725 44.5855 76.7725 cv
45.4595 76.92 45.4712 77.7969 45.4327 78.0352 cv
45.2203 79.3506 43.7466 79.7198 42.9424 79.8477 cv
42.3443 79.9434 41.292 79.9668 40.563 79.8135 cv
40.563 79.8135 35.5792 79.2413 32.4639 77.2598 cv
28.6202 74.8155 27.5943 72.9854 26.1929 69.9434 cv
24.3565 66.1788 23.5333 61.3389 23.5333 61.3389 cv
23.5333 61.3389 21.7398 62.8145 21.8326 62.8389 cv
19.5733 62.2364 19.8033 59.7378 19.8033 59.7378 cv
1 /1 get_csd
sepcs
1 sep
f
19.8033 59.7378 mo
19.8033 59.7378 16.9371 62.4297 17.586 64.7618 cv
17.6373 64.9473 18.0411 66.6104 20.3213 67.0889 cv
20.6958 66.9288 21.0152 66.3526 21.335 66.3282 cv
22.0308 66.2745 23.6495 68.9942 24.0162 69.5499 cv
24.3956 70.1368 25.1475 71.2374 25.1475 71.7725 cv
25.1475 72.3077 22.8946 70.6954 22.0118 69.8126 cv
21.1285 68.9297 21.3892 67.9834 20.6402 67.9834 cv
20.4795 68.6788 20.6045 69.2364 20.4439 69.2901 cv
20.2833 69.3428 18.7129 67.7198 17.6426 67.9327 cv
16.5723 68.1475 15.188 69.7217 15.3487 70.792 cv
15.6998 71.046 17.377 70.0977 17.8047 70.0411 cv
18.1851 69.9922 18.6656 70.1133 18.4844 70.5967 cv
18.0562 70.8106 16.6241 72.4971 17.0474 72.752 cv
17.4698 73.0079 17.5997 72.1163 20.7056 72.1641 cv
22.6226 72.3086 23.252 73.211 23.2315 73.9063 cv
23.2183 74.337 23.1373 74.7393 22.8829 74.8204 cv
22.4209 74.9688 21.8013 74.9844 20.085 74.6465 cv
18.6138 74.3575 18.5894 74.0372 18.6475 74.6788 cv
18.6802 75.0381 19.9214 75.4952 19.9214 76.0831 cv
19.9214 76.6719 16.772 77.4376 19.1373 80.6573 cv
20.357 81.9629 22.9751 82.0313 23.6231 81.7022 cv
23.7837 81.3799 21.7554 80.4161 22.0118 79.1329 cv
22.0552 78.9151 22.4908 77.9122 23.7105 77.8252 cv
24.4478 77.7725 23.7974 79.2627 25.3653 79.3936 cv
25.3653 77.4004 26.3887 77.4883 26.3887 77.4883 cv
26.3887 77.4883 26.9439 77.3907 28.3077 77.8838 cv
29.3155 78.2491 30.0738 78.42 30.3951 79.1153 cv
30.7159 79.8106 30.4488 79.4893 29.9668 79.4893 cv
29.4854 79.4893 28.9249 79.1124 28.2828 79.2198 cv
27.6407 79.3262 27.0064 80.0381 26.8458 80.7872 cv
26.6856 81.5372 26.5655 83.1866 27.3687 83.4004 cv
27.3687 83.4004 27.7603 81.8321 29.9815 80.918 cv
30.627 80.6514 31.5777 80.6739 32.5943 81.0489 cv
33.6114 81.4229 37.2984 83.2002 40.9913 83.2002 cv
44.6836 83.2002 47.1529 80.4737 47.627 79.4551 cv
49.3179 75.8223 46.7706 73.6582 45.0064 73.7325 cv
41.8707 73.8624 41.6202 76.212 41.7403 76.7374 cv
41.8721 77.3165 42.0743 78.5323 43.5596 78.2618 cv
44.5123 78.0879 44.5855 76.7725 44.5855 76.7725 cv
45.4595 76.92 45.4712 77.7969 45.4327 78.0352 cv
45.2203 79.3506 43.7466 79.7198 42.9424 79.8477 cv
42.3443 79.9434 41.292 79.9668 40.563 79.8135 cv
40.563 79.8135 35.5792 79.2413 32.4639 77.2598 cv
28.6202 74.8155 27.5943 72.9854 26.1929 69.9434 cv
24.3565 66.1788 23.5333 61.3389 23.5333 61.3389 cv
23.5333 61.3389 21.7398 62.8145 21.8326 62.8389 cv
19.5733 62.2364 19.8033 59.7378 19.8033 59.7378 cv
cp
1 /1 get_csd
sepcs
1 sep
@
58.4678 2.396 mo
58.4678 2.396 58.0318 0.915528 57.0552 0.369629 cv
57.0552 0.369629 56.6002 6.33936 58.3267 8.19825 cv
60.0416 10.0455 61.7891 10.2227 62.6807 10.4415 cv
66.4122 11.355 67.98 11.9214 69.2769 12.9478 cv
68.9805 7.83545 69.4092 6.35108 65.1763 4.38233 cv
65.1431 4.48096 66.2066 6.76172 66.3477 8.05616 cv
66.4019 8.5503 66.4019 8.5503 66.4019 8.5503 cv
66.25 8.68799 65.9053 8.61915 65.7535 8.38038 cv
65.6241 8.17627 63.5601 5.17383 62.3067 4.97608 cv
62.2076 5.07471 62.8345 5.70166 63.0655 6.22901 cv
63.2217 6.58643 63.3448 7.2334 63.1241 7.38916 cv
62.7598 7.646 62.2242 7.47168 61.8179 7.2461 cv
61.606 7.12794 60.2413 6.43506 60.3497 3.89502 cv
60.4131 3.69776 60.6016 2.97559 61.5386 2.81446 cv
61.355 2.28516 60.857 2.08497 60.2872 2.25342 cv
59.6656 2.4375 59.1065 3.03028 58.7823 3.08448 cv
58.4678 2.396 li
1 /1 get_csd
sepcs
1 sep
f
0.4521 lw
58.4678 2.396 mo
58.4678 2.396 58.0318 0.915528 57.0552 0.369629 cv
57.0552 0.369629 56.6002 6.33936 58.3267 8.19825 cv
60.0416 10.0455 61.7891 10.2227 62.6807 10.4415 cv
66.4122 11.355 67.98 11.9214 69.2769 12.9478 cv
68.9805 7.83545 69.4092 6.35108 65.1763 4.38233 cv
65.1431 4.48096 66.2066 6.76172 66.3477 8.05616 cv
66.4019 8.5503 66.4019 8.5503 66.4019 8.5503 cv
66.25 8.68799 65.9053 8.61915 65.7535 8.38038 cv
65.6241 8.17627 63.5601 5.17383 62.3067 4.97608 cv
62.2076 5.07471 62.8345 5.70166 63.0655 6.22901 cv
63.2217 6.58643 63.3448 7.2334 63.1241 7.38916 cv
62.7598 7.646 62.2242 7.47168 61.8179 7.2461 cv
61.606 7.12794 60.2413 6.43506 60.3497 3.89502 cv
60.4131 3.69776 60.6016 2.97559 61.5386 2.81446 cv
61.355 2.28516 60.857 2.08497 60.2872 2.25342 cv
59.6656 2.4375 59.1065 3.03028 58.7823 3.08448 cv
58.4678 2.396 li
cp
1 /1 get_csd
sepcs
1 sep
@
41.5811 28.8912 mo
41.8536 28.9834 42.5928 29.6529 42.7691 29.8458 cv
43.4756 29.6529 49.6812 26.6265 50.1168 26.1041 cv
50.4698 25.5743 50.4756 25.0567 50.6392 25.146 cv
51.5972 25.6685 52.0328 24.9717 52.7295 24.275 cv
53.6338 23.3711 54.3663 22.6211 54.4839 22.4766 cv
55.7198 22.4766 68.4161 22.4708 68.4161 22.4708 cv
68.4161 22.4708 71.3741 22.5533 71.6094 21.3975 cv
71.7281 20.2764 70.2608 20.0909 69.084 20.0909 cv
67.9063 20.0909 64.6216 20.5386 63.3726 20.9424 cv
62.254 21.2315 61.1734 21.7803 59.8194 21.7803 cv
58.4654 21.7803 56.2496 21.376 56.0142 19.8829 cv
55.7789 18.3897 56.7208 17.8121 58.0157 17.4747 cv
59.3111 17.1377 59.0752 17.4747 58.8399 17.2339 cv
58.6045 16.9932 58.6436 17.002 58.6636 16.7042 cv
58.7398 15.565 60.272 14.8682 60.7427 14.8682 cv
61.2139 14.8682 59.6109 16.2618 60.1348 17.1861 cv
60.2535 17.3951 60.3077 15.7393 63.7042 15.9131 cv
64.1846 15.938 60.7979 18.0743 61.1944 18.0044 cv
63.1817 17.6553 63.2418 18.6895 61.6656 19.2569 cv
61.3936 19.355 59.3443 19.626 59.6978 19.4844 cv
60.1334 19.3101 60.5562 18.9654 60.5923 18.587 cv
60.6558 17.9166 59.2676 18.1792 58.9781 18.2344 cv
58.6739 18.292 57.4639 18.5406 57.4048 19.504 cv
57.4478 20.0894 58.15 20.4971 59.1436 20.5801 cv
61.1309 20.5157 61.586 20.1939 62.2759 19.9869 cv
63.1016 19.7388 66.3145 18.7227 68.7295 18.6719 cv
71.1622 18.6207 72.7286 19.0674 73.3516 19.9166 cv
74.3096 21.2232 74.025 22.2613 73.6128 22.7911 cv
73.2012 23.3204 71.4961 23.6807 71.4961 23.6807 cv
71.4961 24.355 71.8497 24.8365 72.1441 25.0777 cv
72.4385 25.3184 73.8697 25.8394 74.2227 25.8394 cv
74.5757 25.8394 75.8111 25.7374 75.8111 25.9297 cv
75.8111 26.1226 75.2886 26.6265 74.5049 27.0621 cv
74.2881 27.1827 73.8951 28.6299 73.8951 28.6299 cv
74.6582 29.7588 li
74.6582 29.7588 71.3482 31.2398 72.9161 31.501 cv
74.2164 31.7178 74.1705 32.4332 74.1456 32.7837 cv
74.1011 33.0816 73.6177 33.5044 73.2647 33.5044 cv
72.9112 33.5044 72.0757 33.1744 71.9581 32.9815 cv
71.5621 33.4405 71.1895 34.2134 70.5645 34.2012 cv
69.9737 34.1895 69.106 33.5923 69.084 32.9815 cv
69.0669 32.5259 69.6168 31.9224 70.042 31.7623 cv
69.8511 31.5777 68.0713 31.7295 68.9966 30.3687 cv
69.3697 29.8199 70.3067 30.0738 70.6514 30.543 cv
70.9449 30.9424 71.2818 29.501 71.2818 29.501 cv
71.6968 27.9297 li
71.6968 27.9297 69.1475 28.0264 68.7354 27.9297 cv
68.3233 27.8335 67.3843 27.7012 66.3834 26.4493 cv
65.3829 25.1968 65.4068 25.0074 64.6416 25.0557 cv
63.8765 25.1036 61.9654 25.5084 60.1993 27.146 cv
58.918 28.9908 56.4542 28.4527 55.4258 27.8711 cv
54.6558 27.4356 54.896 27.919 54.7193 27.5821 cv
54.5425 27.2447 54.2481 26.3296 54.0127 26.3296 cv
53.7774 26.3296 53.6006 26.667 53.6597 26.9078 cv
53.7183 27.1485 54.0079 27.5572 53.9493 27.8462 cv
53.8902 28.1353 54.0127 28.6416 53.542 28.834 cv
53.0708 29.0269 53.1416 30.459 52.7295 30.459 cv
52.3174 30.459 51.1124 29.5401 50.4649 29.5879 cv
49.8174 29.6363 48.815 29.92 48.462 30.5464 cv
47.461 30.5464 45.4131 30.3721 45.5875 31.8526 cv
44.3682 31.2427 43.7701 31.0977 43.5347 31.772 cv
43.2989 32.4468 44.1919 33.3331 42.7129 33.5074 cv
42.3135 33.5547 41.8433 33.1412 41.7686 32.9283 cv
41.6192 32.502 41.8477 31.9893 41.5811 32.1138 cv
40.4322 32.6509 39.752 32.4625 39.752 32.4625 cv
39.2183 32.5162 38.1119 31.1675 39.752 30.7203 cv
40.4581 30.5279 40.8853 30.5201 40.8853 30.5201 cv
40.8853 30.5201 39.9908 30.129 40.1001 29.501 cv
40.3208 28.2339 41.5811 28.8912 41.5811 28.8912 cv
1 /1 get_csd
sepcs
0.3 sep
f
0.1137 lw
41.5811 28.8912 mo
41.8536 28.9834 42.5928 29.6529 42.7691 29.8458 cv
43.4756 29.6529 49.6812 26.6265 50.1168 26.1041 cv
50.4698 25.5743 50.4756 25.0567 50.6392 25.146 cv
51.5972 25.6685 52.0328 24.9717 52.7295 24.275 cv
53.6338 23.3711 54.3663 22.6211 54.4839 22.4766 cv
55.7198 22.4766 68.4161 22.4708 68.4161 22.4708 cv
68.4161 22.4708 71.3741 22.5533 71.6094 21.3975 cv
71.7281 20.2764 70.2608 20.0909 69.084 20.0909 cv
67.9063 20.0909 64.6216 20.5386 63.3726 20.9424 cv
62.254 21.2315 61.1734 21.7803 59.8194 21.7803 cv
58.4654 21.7803 56.2496 21.376 56.0142 19.8829 cv
55.7789 18.3897 56.7208 17.8121 58.0157 17.4747 cv
59.3111 17.1377 59.0752 17.4747 58.8399 17.2339 cv
58.6045 16.9932 58.6436 17.002 58.6636 16.7042 cv
58.7398 15.565 60.272 14.8682 60.7427 14.8682 cv
61.2139 14.8682 59.6109 16.2618 60.1348 17.1861 cv
60.2535 17.3951 60.3077 15.7393 63.7042 15.9131 cv
64.1846 15.938 60.7979 18.0743 61.1944 18.0044 cv
63.1817 17.6553 63.2418 18.6895 61.6656 19.2569 cv
61.3936 19.355 59.3443 19.626 59.6978 19.4844 cv
60.1334 19.3101 60.5562 18.9654 60.5923 18.587 cv
60.6558 17.9166 59.2676 18.1792 58.9781 18.2344 cv
58.6739 18.292 57.4639 18.5406 57.4048 19.504 cv
57.4478 20.0894 58.15 20.4971 59.1436 20.5801 cv
61.1309 20.5157 61.586 20.1939 62.2759 19.9869 cv
63.1016 19.7388 66.3145 18.7227 68.7295 18.6719 cv
71.1622 18.6207 72.7286 19.0674 73.3516 19.9166 cv
74.3096 21.2232 74.025 22.2613 73.6128 22.7911 cv
73.2012 23.3204 71.4961 23.6807 71.4961 23.6807 cv
71.4961 24.355 71.8497 24.8365 72.1441 25.0777 cv
72.4385 25.3184 73.8697 25.8394 74.2227 25.8394 cv
74.5757 25.8394 75.8111 25.7374 75.8111 25.9297 cv
75.8111 26.1226 75.2886 26.6265 74.5049 27.0621 cv
74.2881 27.1827 73.8951 28.6299 73.8951 28.6299 cv
74.6582 29.7588 li
74.6582 29.7588 71.3482 31.2398 72.9161 31.501 cv
74.2164 31.7178 74.1705 32.4332 74.1456 32.7837 cv
74.1011 33.0816 73.6177 33.5044 73.2647 33.5044 cv
72.9112 33.5044 72.0757 33.1744 71.9581 32.9815 cv
71.5621 33.4405 71.1895 34.2134 70.5645 34.2012 cv
69.9737 34.1895 69.106 33.5923 69.084 32.9815 cv
69.0669 32.5259 69.6168 31.9224 70.042 31.7623 cv
69.8511 31.5777 68.0713 31.7295 68.9966 30.3687 cv
69.3697 29.8199 70.3067 30.0738 70.6514 30.543 cv
70.9449 30.9424 71.2818 29.501 71.2818 29.501 cv
71.6968 27.9297 li
71.6968 27.9297 69.1475 28.0264 68.7354 27.9297 cv
68.3233 27.8335 67.3843 27.7012 66.3834 26.4493 cv
65.3829 25.1968 65.4068 25.0074 64.6416 25.0557 cv
63.8765 25.1036 61.9654 25.5084 60.1993 27.146 cv
58.918 28.9908 56.4542 28.4527 55.4258 27.8711 cv
54.6558 27.4356 54.896 27.919 54.7193 27.5821 cv
54.5425 27.2447 54.2481 26.3296 54.0127 26.3296 cv
53.7774 26.3296 53.6006 26.667 53.6597 26.9078 cv
53.7183 27.1485 54.0079 27.5572 53.9493 27.8462 cv
53.8902 28.1353 54.0127 28.6416 53.542 28.834 cv
53.0708 29.0269 53.1416 30.459 52.7295 30.459 cv
52.3174 30.459 51.1124 29.5401 50.4649 29.5879 cv
49.8174 29.6363 48.815 29.92 48.462 30.5464 cv
47.461 30.5464 45.4131 30.3721 45.5875 31.8526 cv
44.3682 31.2427 43.7701 31.0977 43.5347 31.772 cv
43.2989 32.4468 44.1919 33.3331 42.7129 33.5074 cv
42.3135 33.5547 41.8433 33.1412 41.7686 32.9283 cv
41.6192 32.502 41.8477 31.9893 41.5811 32.1138 cv
40.4322 32.6509 39.752 32.4625 39.752 32.4625 cv
39.2183 32.5162 38.1119 31.1675 39.752 30.7203 cv
40.4581 30.5279 40.8853 30.5201 40.8853 30.5201 cv
40.8853 30.5201 39.9908 30.129 40.1001 29.501 cv
40.3208 28.2339 41.5811 28.8912 41.5811 28.8912 cv
cp
1 /0 get_csd
sepcs
1 sep
@
45.8487 25.0586 mo
47.4219 26.3384 li
43.938 28.2544 li
43.938 28.2544 44.0503 27.9644 42.8926 27.1221 cv
41.9727 26.4522 40.1436 26.4522 40.1436 26.4522 cv
40.1436 26.4522 41.5088 25.8648 41.1641 25.7139 cv
40.6089 25.4708 39.9502 24.8208 39.9317 25.1187 cv
39.9356 25.0508 38.0728 27.2588 37.4869 24.8848 cv
37.1885 23.6739 38.8248 23.918 39.0606 23.7251 cv
38.9429 23.2916 38.271 24.0137 37.7486 22.9683 cv
37.1143 21.7002 38.4449 21.0523 39.1421 21.1392 cv
40.0948 21.2584 39.9278 22.398 40.1631 22.5425 cv
40.399 22.6871 40.2251 21.8912 40.9703 21.7803 cv
41.4395 21.7667 41.6299 21.9073 41.8687 22.1558 cv
41.9122 22.2007 41.9517 22.25 41.9883 22.3018 cv
42.2237 22.6387 42.1646 22.8316 42.0469 23.313 cv
41.9292 23.7945 41.5762 23.6983 41.6348 23.8428 cv
41.6939 23.9874 42.2823 24.6133 42.6358 24.8062 cv
42.9888 24.9986 44.4551 25.4942 44.4551 25.4942 cv
45.8487 25.0586 li
1 /1 get_csd
sepcs
0.3 sep
f
45.8487 25.0586 mo
47.4219 26.3384 li
43.938 28.2544 li
43.938 28.2544 44.0503 27.9644 42.8926 27.1221 cv
41.9727 26.4522 40.1436 26.4522 40.1436 26.4522 cv
40.1436 26.4522 41.5088 25.8648 41.1641 25.7139 cv
40.6089 25.4708 39.9502 24.8208 39.9317 25.1187 cv
39.9356 25.0508 38.0728 27.2588 37.4869 24.8848 cv
37.1885 23.6739 38.8248 23.918 39.0606 23.7251 cv
38.9429 23.2916 38.271 24.0137 37.7486 22.9683 cv
37.1143 21.7002 38.4449 21.0523 39.1421 21.1392 cv
40.0948 21.2584 39.9278 22.398 40.1631 22.5425 cv
40.399 22.6871 40.2251 21.8912 40.9703 21.7803 cv
41.4395 21.7667 41.6299 21.9073 41.8687 22.1558 cv
41.9122 22.2007 41.9517 22.25 41.9883 22.3018 cv
42.2237 22.6387 42.1646 22.8316 42.0469 23.313 cv
41.9292 23.7945 41.5762 23.6983 41.6348 23.8428 cv
41.6939 23.9874 42.2823 24.6133 42.6358 24.8062 cv
42.9888 24.9986 44.4551 25.4942 44.4551 25.4942 cv
45.8487 25.0586 li
cp
1 /0 get_csd
sepcs
1 sep
@
63.5303 26.4522 mo
63.8511 26.4522 64.6626 26.2784 64.6626 26.2784 cv
64.6626 26.2784 65.3594 27.4107 66.2305 27.8462 cv
66.4029 27.9322 65.7076 28.8912 66.5787 29.501 cv
66.7593 29.6275 65.1929 29.3331 64.6626 29.5879 cv
63.9175 29.9458 63.4488 30.8741 62.5718 31.4175 cv
61.378 32.1573 62.7725 33.1055 62.398 33.1592 cv
62.023 33.2125 60.8848 32.5093 60.6705 32.5093 cv
60.4566 32.5093 59.6002 32.7769 59.6002 33.1514 cv
59.6002 33.5264 60.3028 34.4478 59.065 34.7569 cv
58.4336 34.9151 57.8741 34.5582 57.8326 33.8267 cv
57.3204 33.7393 57.046 34.1583 57.046 34.1583 cv
56.5767 34.6832 55.794 34.5777 55.6041 33.6817 cv
55.5557 33.4542 55.4297 32.4625 56.8711 32.4024 cv
57.3023 32.3843 57.2989 32.563 57.4063 32.4024 cv
57.5132 32.2418 56.4014 31.879 56.5621 31.5044 cv
56.7227 31.1299 56.9107 30.3721 57.9947 30.8506 cv
58.5845 31.1104 58.7017 31.2466 58.7974 31.3321 cv
58.917 31.4395 62.2237 28.9786 62.2237 28.9786 cv
62.2237 28.9786 61.8736 28.774 61.4395 28.6299 cv
61.0484 28.5 60.4283 28.7969 60.4815 28.3687 cv
60.5352 27.9405 63.209 26.4522 63.5303 26.4522 cv
1 /1 get_csd
sepcs
0.3 sep
f
63.5303 26.4522 mo
63.8511 26.4522 64.6626 26.2784 64.6626 26.2784 cv
64.6626 26.2784 65.3594 27.4107 66.2305 27.8462 cv
66.4029 27.9322 65.7076 28.8912 66.5787 29.501 cv
66.7593 29.6275 65.1929 29.3331 64.6626 29.5879 cv
63.9175 29.9458 63.4488 30.8741 62.5718 31.4175 cv
61.378 32.1573 62.7725 33.1055 62.398 33.1592 cv
62.023 33.2125 60.8848 32.5093 60.6705 32.5093 cv
60.4566 32.5093 59.6002 32.7769 59.6002 33.1514 cv
59.6002 33.5264 60.3028 34.4478 59.065 34.7569 cv
58.4336 34.9151 57.8741 34.5582 57.8326 33.8267 cv
57.3204 33.7393 57.046 34.1583 57.046 34.1583 cv
56.5767 34.6832 55.794 34.5777 55.6041 33.6817 cv
55.5557 33.4542 55.4297 32.4625 56.8711 32.4024 cv
57.3023 32.3843 57.2989 32.563 57.4063 32.4024 cv
57.5132 32.2418 56.4014 31.879 56.5621 31.5044 cv
56.7227 31.1299 56.9107 30.3721 57.9947 30.8506 cv
58.5845 31.1104 58.7017 31.2466 58.7974 31.3321 cv
58.917 31.4395 62.2237 28.9786 62.2237 28.9786 cv
62.2237 28.9786 61.8736 28.774 61.4395 28.6299 cv
61.0484 28.5 60.4283 28.7969 60.4815 28.3687 cv
60.5352 27.9405 63.209 26.4522 63.5303 26.4522 cv
cp
1 /0 get_csd
sepcs
1 sep
@
48.3511 23.4585 mo
48.4356 23.6436 49.4708 24.1675 50.004 24.0137 cv
50.147 23.9722 49.878 25.5489 48.2432 25.4834 cv
46.6084 25.418 46.4029 23.6436 46.6265 23.8174 cv
46.981 24.0938 48.3511 23.4585 48.3511 23.4585 cv
1 /1 get_csd
sepcs
0.3 sep
f
48.3511 23.4585 mo
48.4356 23.6436 49.4708 24.1675 50.004 24.0137 cv
50.147 23.9722 49.878 25.5489 48.2432 25.4834 cv
46.6084 25.418 46.4029 23.6436 46.6265 23.8174 cv
46.981 24.0938 48.3511 23.4585 48.3511 23.4585 cv
cp
1 /0 get_csd
sepcs
1 sep
@
45.2242 23.1558 mo
45.6832 23.5757 46.1465 23.7994 46.1387 23.7046 cv
46.1583 23.9395 45.8082 24.4542 45.4781 24.5611 cv
45.1475 24.668 44.6856 24.3472 44.6856 23.9722 cv
44.6856 23.5977 45.2242 23.1558 45.2242 23.1558 cv
1 /1 get_csd
sepcs
0.3 sep
f
45.2242 23.1558 mo
45.6832 23.5757 46.1465 23.7994 46.1387 23.7046 cv
46.1583 23.9395 45.8082 24.4542 45.4781 24.5611 cv
45.1475 24.668 44.6856 24.3472 44.6856 23.9722 cv
44.6856 23.5977 45.2242 23.1558 45.2242 23.1558 cv
cp
1 /0 get_csd
sepcs
1 sep
@
51.252 23.2681 mo
50.7925 23.6876 50.3296 23.9112 50.3375 23.8169 cv
50.3174 24.0518 50.668 24.566 50.9981 24.6729 cv
51.3282 24.7803 51.7906 24.459 51.7906 24.0845 cv
51.7906 23.71 51.252 23.2681 51.252 23.2681 cv
1 /1 get_csd
sepcs
0.3 sep
f
51.252 23.2681 mo
50.7925 23.6876 50.3296 23.9112 50.3375 23.8169 cv
50.3174 24.0518 50.668 24.566 50.9981 24.6729 cv
51.3282 24.7803 51.7906 24.459 51.7906 24.0845 cv
51.7906 23.71 51.252 23.2681 51.252 23.2681 cv
cp
1 /0 get_csd
sepcs
1 sep
@
43.3028 20.0757 mo
43.2764 20.6973 43.4029 21.1954 43.4698 21.129 cv
43.3028 21.295 42.6836 21.3575 42.3892 21.1734 cv
42.0953 20.9893 42.044 20.4283 42.3311 20.1876 cv
42.6177 19.9468 43.3028 20.0757 43.3028 20.0757 cv
1 /1 get_csd
sepcs
0.3 sep
f
43.3028 20.0757 mo
43.2764 20.6973 43.4029 21.1954 43.4698 21.129 cv
43.3028 21.295 42.6836 21.3575 42.3892 21.1734 cv
42.0953 20.9893 42.044 20.4283 42.3311 20.1876 cv
42.6177 19.9468 43.3028 20.0757 43.3028 20.0757 cv
cp
1 /0 get_csd
sepcs
1 sep
@
53.5313 20.0757 mo
53.5577 20.6973 53.4317 21.1954 53.3643 21.129 cv
53.5313 21.295 54.1504 21.3575 54.4449 21.1734 cv
54.7393 20.9893 54.7906 20.4283 54.5035 20.1876 cv
54.2164 19.9468 53.5313 20.0757 53.5313 20.0757 cv
1 /1 get_csd
sepcs
0.3 sep
f
53.5313 20.0757 mo
53.5577 20.6973 53.4317 21.1954 53.3643 21.129 cv
53.5313 21.295 54.1504 21.3575 54.4449 21.1734 cv
54.7393 20.9893 54.7906 20.4283 54.5035 20.1876 cv
54.2164 19.9468 53.5313 20.0757 53.5313 20.0757 cv
cp
1 /0 get_csd
sepcs
1 sep
@
48.2701 21.6915 mo
48.7735 21.6929 49.2349 21.5821 49.3448 21.4717 cv
49.668 21.1446 49.6065 20.7642 49.5962 20.4263 cv
49.584 20.0342 49.4522 19.4791 49.4522 19.4791 cv
49.8086 19.3345 51.0137 19.1075 51.3907 18.9244 cv
51.9297 18.6631 51.7139 19.8062 51.7139 19.8062 cv
51.358 19.9991 50.1646 20.2466 50.1646 20.2466 cv
50.1666 20.4419 50.2007 20.7793 50.1646 21.6182 cv
50.1539 21.8677 49.7759 22.1412 49.5113 22.337 cv
49.2769 22.5103 48.4693 22.4678 48.4693 22.4678 cv
48.4693 22.4678 48.7149 23.1597 49.6192 23.0557 cv
50.0079 23.0108 50.7901 23.0186 51.2491 22.6309 cv
51.5337 22.3902 51.6802 22.1412 51.6802 22.1412 cv
51.8936 22.2857 51.9556 22.5313 52.2549 22.7291 cv
52.65 22.9903 52.6861 22.9576 53.1661 22.8208 cv
53.3697 22.7627 53.5816 22.1207 53.2969 21.8799 cv
53.0118 21.6387 53.0948 21.6646 52.8096 21.5201 cv
52.525 21.376 52.5069 21.3057 52.5782 21.1612 cv
52.6495 21.0167 52.837 20.792 52.8809 20.6534 cv
53.0093 20.2466 52.7706 19.5215 53.1172 19.5279 cv
54.4327 19.5528 54.4825 17.8624 53.6202 17.6988 cv
52.2198 17.4336 52.3609 18.5132 52.147 18.3687 cv
51.9336 18.2237 52.9737 17.2637 51.8238 16.5557 cv
51.0987 16.1094 50.2159 16.4542 50.2159 16.4542 cv
50.2159 16.4542 50.0914 16.4268 49.5962 17.189 cv
49.4258 17.4512 49.5381 16.3565 49.0572 16.0787 cv
48.8028 15.9317 48.5572 15.8472 48.3262 15.8126 cv
1 /1 get_csd
sepcs
0.3 sep
f
48.2701 21.6915 mo
48.7735 21.6929 49.2349 21.5821 49.3448 21.4717 cv
49.668 21.1446 49.6065 20.7642 49.5962 20.4263 cv
49.584 20.0342 49.4522 19.4791 49.4522 19.4791 cv
49.8086 19.3345 51.0137 19.1075 51.3907 18.9244 cv
51.9297 18.6631 51.7139 19.8062 51.7139 19.8062 cv
51.358 19.9991 50.1646 20.2466 50.1646 20.2466 cv
50.1666 20.4419 50.2007 20.7793 50.1646 21.6182 cv
50.1539 21.8677 49.7759 22.1412 49.5113 22.337 cv
49.2769 22.5103 48.4693 22.4678 48.4693 22.4678 cv
48.4693 22.4678 48.7149 23.1597 49.6192 23.0557 cv
50.0079 23.0108 50.7901 23.0186 51.2491 22.6309 cv
51.5337 22.3902 51.6802 22.1412 51.6802 22.1412 cv
51.8936 22.2857 51.9556 22.5313 52.2549 22.7291 cv
52.65 22.9903 52.6861 22.9576 53.1661 22.8208 cv
53.3697 22.7627 53.5816 22.1207 53.2969 21.8799 cv
53.0118 21.6387 53.0948 21.6646 52.8096 21.5201 cv
52.525 21.376 52.5069 21.3057 52.5782 21.1612 cv
52.6495 21.0167 52.837 20.792 52.8809 20.6534 cv
53.0093 20.2466 52.7706 19.5215 53.1172 19.5279 cv
54.4327 19.5528 54.4825 17.8624 53.6202 17.6988 cv
52.2198 17.4336 52.3609 18.5132 52.147 18.3687 cv
51.9336 18.2237 52.9737 17.2637 51.8238 16.5557 cv
51.0987 16.1094 50.2159 16.4542 50.2159 16.4542 cv
50.2159 16.4542 50.0914 16.4268 49.5962 17.189 cv
49.4258 17.4512 49.5381 16.3565 49.0572 16.0787 cv
48.8028 15.9317 48.5572 15.8472 48.3262 15.8126 cv
1 /0 get_csd
sepcs
1 sep
@
48.3926 21.6915 mo
47.8887 21.6929 47.4273 21.5821 47.3179 21.4717 cv
46.9947 21.1446 47.0557 20.7642 47.0665 20.4263 cv
47.0782 20.0342 47.21 19.4791 47.21 19.4791 cv
46.8541 19.3345 45.649 19.1075 45.272 18.9244 cv
44.733 18.6631 44.9483 19.8062 44.9483 19.8062 cv
45.3047 19.9991 46.4981 20.2466 46.4981 20.2466 cv
46.4961 20.4419 46.4615 20.7793 46.4981 21.6182 cv
46.5088 21.8677 46.8868 22.1412 47.1514 22.337 cv
47.3853 22.5103 48.1934 22.4678 48.1934 22.4678 cv
48.1934 22.4678 47.9473 23.1597 47.0435 23.0557 cv
46.6548 23.0108 45.8721 23.0186 45.4136 22.6309 cv
45.1285 22.3902 44.9825 22.1412 44.9825 22.1412 cv
44.7686 22.2857 44.7066 22.5313 44.4073 22.7291 cv
44.0123 22.9903 43.9766 22.9576 43.4966 22.8208 cv
43.293 22.7627 43.0806 22.1207 43.3658 21.8799 cv
43.6504 21.6387 43.5679 21.6646 43.8526 21.5201 cv
44.1377 21.376 44.1553 21.3057 44.084 21.1612 cv
44.0127 21.0167 43.8252 20.792 43.7813 20.6534 cv
43.6529 20.2466 43.8916 19.5215 43.5455 19.5279 cv
42.23 19.5528 42.1797 17.8624 43.042 17.6988 cv
44.4424 17.4336 44.3018 18.5132 44.5152 18.3687 cv
44.7291 18.2237 43.689 17.2637 44.8389 16.5557 cv
45.5635 16.1094 46.4468 16.4542 46.4468 16.4542 cv
46.4468 16.4542 46.5708 16.4268 47.0665 17.189 cv
47.2364 17.4512 47.1246 16.3565 47.6055 16.0787 cv
47.8594 15.9317 48.105 15.8472 48.336 15.8126 cv
1 /1 get_csd
sepcs
0.3 sep
f
48.3926 21.6915 mo
47.8887 21.6929 47.4273 21.5821 47.3179 21.4717 cv
46.9947 21.1446 47.0557 20.7642 47.0665 20.4263 cv
47.0782 20.0342 47.21 19.4791 47.21 19.4791 cv
46.8541 19.3345 45.649 19.1075 45.272 18.9244 cv
44.733 18.6631 44.9483 19.8062 44.9483 19.8062 cv
45.3047 19.9991 46.4981 20.2466 46.4981 20.2466 cv
46.4961 20.4419 46.4615 20.7793 46.4981 21.6182 cv
46.5088 21.8677 46.8868 22.1412 47.1514 22.337 cv
47.3853 22.5103 48.1934 22.4678 48.1934 22.4678 cv
48.1934 22.4678 47.9473 23.1597 47.0435 23.0557 cv
46.6548 23.0108 45.8721 23.0186 45.4136 22.6309 cv
45.1285 22.3902 44.9825 22.1412 44.9825 22.1412 cv
44.7686 22.2857 44.7066 22.5313 44.4073 22.7291 cv
44.0123 22.9903 43.9766 22.9576 43.4966 22.8208 cv
43.293 22.7627 43.0806 22.1207 43.3658 21.8799 cv
43.6504 21.6387 43.5679 21.6646 43.8526 21.5201 cv
44.1377 21.376 44.1553 21.3057 44.084 21.1612 cv
44.0127 21.0167 43.8252 20.792 43.7813 20.6534 cv
43.6529 20.2466 43.8916 19.5215 43.5455 19.5279 cv
42.23 19.5528 42.1797 17.8624 43.042 17.6988 cv
44.4424 17.4336 44.3018 18.5132 44.5152 18.3687 cv
44.7291 18.2237 43.689 17.2637 44.8389 16.5557 cv
45.5635 16.1094 46.4468 16.4542 46.4468 16.4542 cv
46.4468 16.4542 46.5708 16.4268 47.0665 17.189 cv
47.2364 17.4512 47.1246 16.3565 47.6055 16.0787 cv
47.8594 15.9317 48.105 15.8472 48.336 15.8126 cv
1 /0 get_csd
sepcs
1 sep
@
44.3433 54.7432 mo
44.3433 54.7432 43.9283 54.6797 43.9283 54.2134 cv
43.9283 53.7471 44.3418 53.6075 44.3418 53.6075 cv
46.2554 53.6075 li
46.2603 54.7457 li
44.3433 54.7432 li
1 /1 get_csd
sepcs
0.3 sep
f
44.3501 56.7613 mo
44.3501 56.7613 43.9351 56.6978 43.9351 56.2315 cv
43.9351 55.7652 44.3487 55.6255 44.3487 55.6255 cv
46.2623 55.6255 li
46.2666 56.7637 li
44.3501 56.7613 li
1 /1 get_csd
sepcs
0.3 sep
f
44.3501 58.7115 mo
44.3501 58.7115 43.9351 58.648 43.9351 58.1817 cv
43.9351 57.7154 44.3487 57.5757 44.3487 57.5757 cv
46.2623 57.5757 li
46.2666 58.7139 li
44.3501 58.7115 li
1 /1 get_csd
sepcs
0.3 sep
f
44.3501 60.6797 mo
44.3501 60.6797 43.9351 60.6163 43.9351 60.1504 cv
43.9351 59.6841 44.3487 59.5445 44.3487 59.5445 cv
46.2623 59.5445 li
46.2666 60.6827 li
44.3501 60.6797 li
1 /1 get_csd
sepcs
0.3 sep
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 11.0
%%AI8_CreatorVersion: 11.0.0
%%For: (roberth) ()
%%Title: (Col_Landscape\(outline\).eps)
%%CreationDate: 20/6/05 12:40 PM
%AI9_DataStream
%Gb"-6H!C-fdO9FV!8dfV'P&oh!"L8"EC**6Ss`!28VXqQHN,ssrDn+T1.+;hBA`TVjg4kVVs1@eY.:Son[RAHoG[+'9CDg-(T#eu
%L?-<%bJ>8_'oBtlg/lO]X%udW3=^0GZ6Vr&d$r/*![4;AA1<PsiHn2353XtPj79E]DiR<+I]#CMje?dn>5sW$V.93nCNl4NJ(Ul`
%UO8@mD=ee8Fu-/,R^jjG>Al^neN8saZOC2Y2NGE=G_@.-DtrcnF$'Zb@!'gTEH*`PpUfS#$+Y/Q7L>YY6C1Y.;3oM20@&)r8MTWK
%JO;$.Z\MK6&289la9#rZpi-`I9j*?dE=[Zm)&m]0d8RiLX,Aj'*DpK.r?q,WeSMW`j'd)cme:%N3^0^9h*Ir"DX.*b&?ls-2>tGV
%"6d_M1F0eJ"^2V7)2;\-Jg`BO*h%<hRRiagndJrSa4do_^Y6q^kFuV>HFl-(O$<6-.C\X>hFYV)V>WW_8ZW3`k$_-"_!@&a-Cs;g
%VUlmTq]Qu<qKL9^NFjOSV5=?.SLW>L!rnA%^[S"B\?6<Gbq[RO^GA/KcUA#SG]Z.6QE'sALXlSEK4aS`Iu?V<O=[#8#r5*Z,5rCP
%S`?Iha[LIf<\.Xsnkk,sAg['7UcpaV$4UOkJ7uJ%7!:;$\(\M8%4Duo6)VH7@Coqm4siqnYRMl:p_3,1@/F:fs4:Za1lTK"Skcq5
%Y>OY1d1u_5a(<p"*md?RhpS,ks2IiBlH);H)Lm2tmmD$G07YEjNh6Sqjj!uM*=ht1_/\q=+%]"_I]XJ>UIg6SM]Vfd)3ou@d:`*_
%hsVhcc47i=I2)<m34ARQ3=#0c*o@lLWNhB3:8cnd<X58a]&3!@c_p@;I<Xh,YYE$42$X%>rHIB_.s6eC5:E(`VM"bnA+g?2FDLhM
%HdoG-[^B4ec_CcuW(s\N(eoe55?`T&gA`oIB+Ljr5<uO/[MH?P]mhn$rIGE;e!=aP&\Y4T#=66OkW[_6#%48_Boeb77eaLsUn+6F
%cftKfH[=rs!o.;KO%a-ij3UZ6B7#"cX>\eJP":KRobH;AhL4CG?(Z\uWMnU.4@OE<R\m'QU(oOgP;H,M1g]3!<b!siUGPjn<)$@m
%74kOF.]K-lW4^9PXNIKK8u\UY.%6k[MGdDa78cNBLa]pQ.BLB7ZpH4;656i%>#^BuU0Nq?@SnQE7BX]IR3Gq4MI_j22-H1Z\L>Y,
%,`ArNo.h]"1*b7'-'L(rOYfXp'WEM&OsGmI+Rp'lYnA;/&g`YQ+_m`$.Ul8>77e1^60(I0A48t`77ngo6I5j8:kYPc$^)V>6:B`8
%%V-e/ciPMT!l8Zbat%k%Q[+E(5sb!&a0RnGdlbU%dblrWjV4l=adg;+SA9\U_1=2Sd2^,f*"cU:<b3#SaNCReMFM!!YY/)a@;2$:
%8X<a@7V*:2aN0=YLlB.=%*,R\_pAeqWfE`0>,;tF8B\A.MmO%hH((L2R\=GaU.LfH1eOSYW^t6r7#@-nnJ"Ku'LU7^7?J9MC8=HO
%A<E*JM%iO4j@Kh<-:?3,7?So.+^cN$fF("m!+?#3RG\>NN.A/>&eroGKS[Y*j<;kQ;Dp'S"9Q&3,4RTrM`clYqPWT,l">5f.oRoU
%WR7>'YF5nCa+n9)e,MARVrOO@ScfTQ5lcEL!6P;W@']n'+tQ'8`@.r=N?hnc'WdOM'm$U"!AGVs-Am<cQ..2`0LPr=(r-tYnI\$Y
%#\]G'SI2#iUBs1?"fQ#5jW'p7C_55()>6FKIF/l5p5"=6@URMAfK0--:kHA3_Odcd(1@O%A-t5aJPG<8o*$6<$&G8\7%pn)7f\fN
%5V3C@%B+NE+;$"n#)Z</Z8A-Q.\hOJ(n`pMk9E6D,*8N-,cLcXC'"EH8ccIX5dhYoY5iYq!Bh6MY#Rb$$(u>Hka_ackCEQJFol!3
%JL;/i%4rb9^aKmN$j2I+!<WYD8.mUU&K"0+1mn>=UO_AAi&hK/:]O7TJ0TufRB!>'$/ebi30jTjjbeEgfN89"Q@Z.Q?uJa_JCQ)V
%Gm7BC!tcZ+/<E+D'L=XUMP_"/.k$Js%*/ngA;C5k6ircS"PKNL>"""&"G$[-#2oY4!C7u_5_>t$32r>N"H$b*P#b+[.9L1*W?l&r
%Kk-O+jVO(f4I0GINj2]P+_aDUM2#OZqEYO`7F5/:M?TN%KcC_H1)>"'fSN_g+d'fTZ%iH(MhN5cIl%pl8-kq3`*Z[N"/]OaW*lT\
%jJ%TE,Ee)N#IY'1_dbEX"=8t[,ncP$(7@^,U*%=V=p1r>JQ9Wu'oQ1Sb#jrRBe!SKMI\2tjXQFp/=*G0^=$-'+t8G!&GKrPN%c!)
%>Qp$k,^<lOI$+1=Ym<fcR)adqM..6Y@jI.M/<l9!7R'G2BLk61!KBLSK#KPZe1qfj86h'TA0[emA&4-m2iGX6'&YS^i^f$'+!d>_
%#i8)ebB*p2oqDp3*Xhs7Z3l93<*E_R)&pY7WTAC,'$<&j8V[^q[4WZFFJ/ld9C>KBd48n6Jf3Y,%-(+un,JYgs&Z?@E\1s_]pij)
%EUYU@I?+)=FRW>kc1]h+gMTMdgE!NWhCYAf\80D8dnLA0p7RDc>OUGE#i>ENbn&Z[(BI5(?]G8P5S+M1P5u5H7RVV0_+P,6\LABd
%Ou5p=g5qJN+W_B9jOK5rh<`Z$?etA)NF+Gmm9eZNenngN$3iR/&?d%i\ga^"_n%k0)oT<ZX;f-i=U^%)"?';iNHOPh[uYY>=gsN9
%.p9?F9hSWuQ*I_*G,L)FW.J$7*5VJ:_utk^B&.LYD.dZJ)tpUU60gG9DFNl7Zu/J$[PYFi,DJLdS(,#HNQl55iA$65b?DBWZ#sp9
%f=H[<gXs*&XkVN6"In,BZ)sMM]"tM<gq(n8S)([7Xde1YnI=V>Tc*R5DLotCCkV+d\8I,gVRUN&)s4Y9`=Z5S7:\B,Wlu<Lk43eR
%c#hBi)`cHCVgXl:>JqK"OZ>Q=UrR!sj]EB2gOlB"'ogO:+j2R6(hGs*$\\L<cXf+eEagM;r,_lKrceKoIR3#/UJ1;2qXd*B)n>kG
%$N@;ie[7T8iM%XjR0[J6bg4Rq4Zr;#JRJb8EXJFPGlDX:SHQ*R)ZOpP!BF?t)PghbUaQm1UDn)iFe\[_1(,*#bViO(QH[eFRE[Wk
%=,tN4NdeLSeVRhMj-acPV22;EE.b2)_g!nG[^h_K\57es>b-,nM]/qHm!9=BFXfd&8=]sO,3+Bl+R2a![!DRFV`BY$SG)gZmbn](
%>U8j81dA"(cM/\'h)VZ^S'c=gVpauC3_cpg&\X!fOlc$;,!7[<Hl@"oJNjrY*^H6Dhh^W`WrQB]+,TF$[.#^Q&6<=m2g:8CC8VC5
%_a'H%Oe=*e!biA=[$L%INE.<E\jtZhK`2"*NUbD$B;2n+7*jfk#P`f&43Ou,(F[jJ0KugT#Kg`<=hjLg>(gpO^o$(;;tscW^BIu0
%AP[QpSAPOXI.G/=keRJ)`7BY:%RSmA,AHKb!s)jtA&/5]4MYK1(HAK<4=3l?83H3iM0-XgIbVKu.!A*tAmj9E<@7jgU'RAK3EP:N
%+P1?6mpZS"@f2O$!hr'BKEZh8JB>)<E*+bU3`&S5Gh)m/l%KHB[NX:6'DW=#g>ANmM0&^#Qji1^0B$':Ha2G8H59,_f1@sRl!C2X
%!]F/XN+N;a-Na_redigS&o8[bq99*WBnsf>3'1)W/&dNXrTD:Wn!E7Ro*pUr8IsjEZk)1pDU.pZ2^U'/_n*55(+49kdF[QD!i/>^
%!)Pk#;D+AhiV/:#H\;_+jlOB2CZe+:T,$1._N%#3CBDFletfskl!e$>&tR5Q&3C#LPO`iU?$oED#S"GUXuWCNFMdJbNV3r'G].l:
%#U2EiFE#_lh+DuQ%e%)dj!Y_e:&0tFm(EL?]_?;(J;5;CDXR04"f.21Y]"^9%6s/+^._s#qa^hDAs:M/>4TH\k[pO<U/;HjQlt22
%]@@AVX)Dgml<+:f%-KC9b/qZuXKO57J^hS:k(%>74a^gT4:ds"hBJN'A[a6,5re,@$ql=8Q9ffJ@EC7E3b[E)=Mi97,]lLtBdE.>
%m%F2@l<u^92HkWW\^#&*=E(i2O*#B5f@U@cE4<d'bOC<M)iaYiR*RhKU(8oq,PqnfOBu,_8eDT0(,*8$$5]A:YC+Xl_J+"ae%DnP
%C#d)7&H9GHdA:g\s7B#6K+J!=fKPbH/g.i$n*XjD^(HlRk5#R&Ja\ibWV:-gWJe:K-1Fk#rj^!/`Z:A%!K`!685E_]_u)_g1CW>Z
%$lIcMe]_o0WoIh>rjH<cNooi/Fre-He_rahkPMU6H,%bF*tmlKUMhp!K8e2a/"66/\'os>)>'t2m=KVPL9CO%s&B5(615pcGE-*,
%a5c\S"68X+1`TQp+Qt`(eHQ$QHN;.K!;KW<fWNdd.,/e7hZ1UpE>\\!@Nf[_WIM?<NFB/+oPp"qX^cJ^PLh-k"DA]<8pf0Q)c]bF
%%'dbNk)Bh`,U^Oo47g9^D"^>:Fe$18&*Rh^RJPgQ%H\SAgOUI-rY9<r5_l-7f#==?Ur/;SP#MEs#BDuJ#apIK=rZY-PQ-'0ZEM,<
%%%VkG]@iRd^0\PjKSBGYCGV[a9.F%/(Ap*I91U<gf09'+p\urW39mm:s1_B[GTi@OA6<d0&srX@2*!u%B.f!@?-^_qZeG5YU%Nn_
%2;[-MR,pg;?&SN>hdSd=mFLHJ_iuES8Hd05QS$=4hRfq?[i=AR\]\G2+j1E*rElua"*j:7CAflSLSa.R=Kh+[^MhL?\_mGU=daI7
%s!>f'FOU91Fm\H.cAI.]"X$VL@GjmA-HYI.Ne%STU8;V.26"$Qd;j^j)7W3RJ"\u@Ngdk825AdJs,<^fUHPd2g7@riOO+ujdd2&W
%0j5TXC]3P&&Zqfh^*jj>RYKYRSulGM>jpI^[4,[[ZnNZ5.qJ`8\#0[c\UA67-1:0_,[L%i4KS6GK.?5'r?%E0h2%*Fs3mKUPDOH;
%3iEOW6[77SFDsR%U#$'l'UYiJ`FM)uN2'J)dC;2Qrt"N7[Ak>Yn6!_TcC1NS3Str!qesn\Zjj^Kj!Lk?M1)1fS\KMZde<dP(+RK_
%f_t'9fk=0m[L$;WSF8t>7_L%>!gDS&C@cp[/7F\L@,=.2DdpF8BP1Vt<]f]2X/T;DI2cjk)A%O9_fADGj/=dPpSZZ5C1nQ=&^cXg
%a@"`9o<2bS$m\cPG,i6eGHW#o!K;0T]k2?p]G@[5BKYX2S%MN$FKTiA"!C/L]_N*-6OV7!k8OMelhg]s%L4CI3Ya;uRX0J9BK!NX
%&D]A8Nu*(XmJ`+la**2si@(`3ADDpHVd$R\l]7rZd<Ejaa^!G2jHPJWNg!dt:)D8a^]BEk,]3SPIg0%KoD+@U*VtE.A57p-]FjFW
%Vc[t^5bp*G6b`k151\t5k$1AOMcR*]n`pL5eL=s@,,",Gh32LM4$)$9GNT5-^<bYYkQGA6g!;!Vh-E7GNTRH*Hb9iF33>65fa2UV
%`hAcfICb4D7s;`8f<<eBJKY!Em(mFR`.LgEj9E9mY@]/,OH86X4.=Yg1DY_V1cg9J7t3!Ar2<<XeckBYd.Y3;DKW_#h<OKVeGo<b
%lK2mGmR,/Z$.4+T+,'(:!=O42J:Pof+.<Wte02EXTFT@r$?_0=%]I'fO8<=DV,eV^,&YnKBM1.PdrbYFA\7]aT/ZAg[M&TmGTfNu
%FBTZki(!;?BgnL1k:_d6kHB>Og`CZ%_&=tW=;?7k40r#tFW@*mb;jtjqSTL<IFuW$_88)^/3aV2I7EmUD\b.oI0Q8=5;kUBM`8=R
%[F<A!.qHE@).\MKonP,?XI4KqEVor%l8%Rag9ZVEon*,`I.i?q@n8LAW*b%1$7b17D7qaL:(<d5b"&&Zf@6(<rceY%TUqIRo;=C;
%`B!&]l;;>X]@DI:70`G)X/M'N088WDT2":nIPiAH3NHYb3GQ$Lo?]W;%("S4RRJg,djGF+;0/%>`81D5Y+%S!2.J=5La45m^oBaB
%XaLj24tA>$dL#cXdJZEBS\PS#<q'0Oe,D8%5VcJWcKJ3'JGN0MqcZTX?imsoEJ<iL$0YtgQETA%/e'u"@s4dG<rZjg0mX95NF3'L
%\f!;!qZRK9>nDd7r*oDl^5*#_6V"(nk4EtLdp]I\U%lk4C:Ma2/sGD^k,4mi<)Y!/SYO98no9DtDH7=8U<0Fq3BTM/ZZ%m=U="_3
%$V!9LhsCG8c//1W8V[]V@/H8YqG-lEFH)2qF]O/!3iV45oYT^S3oV>QT+^^Td4IZJ[MU!rRMctt^1C@%iG[tcOs#NjqAh^?Y]HlB
%q/VRhDh)a#mFRZU'\K;rjP0"VMTDhO)IEB-h5_&"BgEuf#d9?`BN20R`;u_#*Y'J=m6'2h&&hZT:X2?X1pro_Kb.WUMsR*[HOHQW
%WDYiB(0Ca[D4kXGG\WkoC_T@\q_dL-V#I&60.Emi,JPRmK8]JPrf/<Dq.;89_]SKj@'=A7V9,#=90Eli[a`-1D24cF@og1PeufCk
%_2HAtEo"c,HoLZ"p$lED?[a8#-8u71=)3eSn*L'rV:.MKI5p#cp's0n?T%ZXlr'"p4n9nK5i)jjH=N[!`M;T44B-'FD\-PNoYtJ-
%i,_S%5U,_0TI^)a?;4$&c;+eFib2[Yg:b[ErC?!.&m'k7O+d)&4^;cLdU(`?T)CrqG5r9rAW#!WhRerA'Q,2qq<``[(m&<GoCBV*
%bZC,hQ&e4oPcdg%'<<\tf3;&>P@GHmA>3Tf5'McL7VNMM[l,YiDH/UemNbZ4C<?!X<DC5un&Sb&=u40Dmh^_rr9,'W9ck$Zjst'f
%.kb6ES!!J:d)NQEC]AaF]52A_fN9kR_<bLjY#B[Kgun0\)!tr"P";GC%qD*QL`2fb1q,epB-\HP_GC.=4slI]A+N!+:AR)#3IAKY
%P6-_(VhOU1YAEY%2=!?glc+3!E)NieH5QCG1_Ll?G@QKgLl;lCeiFGdj>4,3jgP+7*GqY!1'*TET8DjaK8M%9`'%mIP0^+5WcdPf
%l'h=gXPXFI-,3"X9g10(9cAl+[+tLIDj]>O7kjQ(8n]=0(&pi9A%S5kakO5lUk_Ii24bNP^)+W8j8S^5Ss8#rC8u>VmtT/Pr=YPU
%n(lI2"9$^mP;$\tD+tADkbM0%A7Mb'XY&/#/DGRl"AS_NI/3,7#>A="EkJhH7cLRb%8o63^C$G%BS0(@TD^.nNP1;%5FY`W8O:5W
%dp<fRq`c%UP2E(7HmcBF0Icn0IIL@Kn=PqjGT\i*3!UAn>O.a/i]"$Oe:leUK_Fu2"\d(@a1lt67G"=hM`GX>3)%*EqG2E.86a=A
%s58glnTt&IR.MPcE2!$aSCr7Lke'Nfcek1$XcL(^M9h8sdTt1p8'O5A<R">o.?SVR[.NumF\Ra+1"OKs2mh208JU6$qaL.Lo_9e8
%p_o`2q+b,8Dpc@crbLWH:R`)f#ak656WDp*C]9Nh*];99*g6nGdR`.OmHmrX'f]phoCBR12!H0'HTKgPT<q#,,Ol_TYe0)1f%\$_
%>2Z3cDhi,gTLgem]7X&$RM==^S+^Z*I=&YTH1@Htjl6.sE71op[\3juq@(f8GStWZrbF[s)K[W#JbGZ,m5WQ&S9,UOUghoN8;l/H
%onH;th%S[;L%EMlXRMBM@8]/PAt$g\s(4r.UQ[=-M8YU=V<Tt1QJ1%g*')VS,2TeM&t3q"2(8t2oj\>WDT=p)W5#lU9KG@._7hn\
%)LJVN-1sjk#P-Lr$Ico?c$g'q>4B\1j,COs?.(SZ?n?f7`p(qnOJ`t_-qk/=F'[8A)nFt-F4-',YZg@d8S.WgLJkHs;QgKck#UU1
%=3f/L#J&$Z$c-WWk52Qh;k);rc3_qHc/re+kP#[+AG56GP3h$0IJ]3fHB1i'T7Z9,2?TPf%W&#"EC3nBc*&J_HHliXRgJiQ>Augo
%IBMB2539u.\S(6-BD2REqs$?6gVRUrFXus\6u>-=rLOoc9I\LRTE;l6Wa1#5".ro$eS@YU:PGRgUYVE%M6W,D+49cKRoJ-!:Huq.
%SGR$fUs]WuHE3jULXoB7`pVioSQOgZn",g"?Js<,paa,<pXI"2f=3q&$N0Vl/L=a.54*f7ql`:]!EGJ3G)A$Co+R#7^CP]qn'rna
%TVn9ac/\!S@#Ss&dTN[iq!Aa[@#YS@.`J?GA1eF'lk,rZD4@TO-1W[[:0h4e%ZI=)m&o[=p&!^VA:MatYE2#[e=F-ZB"J>Wj`p:k
%;J^bf^WE%D['q\0D'7!49,QOV5s6%Bp5SJJ[i[ODl2!GiLIIGLIF_fUlL66oP5D"qWt#!LlL8d$bIJTA`6PVAMf#*Ka]M`W\r3D'
%?RrDR>N7c1GY1`X?Y(@rmp[hhqSmiP_M=G!8QQ%F\sNQf[/\BfnDX]D`4)_5kuYS)g=uD5>0%5q2<?*kcC.D\lq2]f(!(K&>beb$
%b54eP>E*.,6gi0^M+.Gn&\TR_[`$i^EPMHWn`aJ"5B+MT)ctot^IUJkkB;53et5#J[iT]Ei/@,,ad3P`DY3/j>DRauMtU:2`*0Zn
%Ut"]R7bg&-AQrc]or_?n3"^>Z:7=:mgg6?B`t#6Ka@T3g+1jS)&0n2">t[>?3+84lSSV-t"2&32Z4nt$p;!2tO7f-+Sb?AAaZX[@
%,K"H^2ht<8>a5(L2b>9']N^Om*'A@UK84j=QS?4WC"9:JWXoFWTq1V;?/YPH#'6r[qZ2JKV$5_n>:AtN2n1QW*F>m5g2-a2n:W"k
%Yls(SiG(8i5\'ZAStFko!Dc^6ZmkDWWKR8;J,q8EG1u8mZt"^;Y+*FO2GhIHp/Upu<bMUkK9ir]XcuN:O;Vi^iIifr+XRA^h`39s
%NgH7mQ0XK22!G"8KqKcHcf->DB']nmRem1UXd?4O1T]5tW:br.^#!ADnPePZYm6SX2X0`,bDS-5/Q1&q=6M;V_S='"J3*Y2'b>="
%]^7W'@[,U(=181`au4i+Mc[SV82Ne*W5]]_e5t@]GGL`$4_,9=CJpuB)euBl[:9Vk?N3UaQT+dq$W:Tl3'eT(?ef<C]%ILRaZH+h
%-*I7L3k0gYb+.F-_0j]`_95YOO?mq?6a9&pn1s"3?YJTWqbK4b;lpQ!IMMtpF6-*bC@mW1GWro[#6K\3@XpBE"!4=99U3VR-UQ1#
%-e<P)mKY?]IU23]eRLO%b6@(/1jccq7<W0VD+RV[A?oi,%a/-G`%AnulakU):9YU_/*r1L2eDKK2WOQK[<4_S,=%9e6X?.DYKT;q
%-O'2I*2M>Nq\t.^qW,*_V%KNEIMM(`,I65c'@YUQ2:6q[NQ9:NbdP?L3+Ur,J]PM87lAqrHmUBG,N60"nG26+#dg[Q",4fkIf)'U
%=9t_`8+?`$/KH6E#_>/PmE/5!9tBg<4`Fo!(q^WNP@uFtk0Uu$Too:nEd50PB"milIJ*DFm+Nt5YToH>H\KFc,T\Al*@'F\6B#UU
%Wno635t?L<s/OKdq9tL:YL^11pSqBADArE3K<^'ajk4B&VPHQHjCZ>lL]4U<<CMIj4-tD%*2H+F!L4*%e/XRcB797Oa[]FX_\4a8
%Ujd()1*NkMd.ud6#'e,RdnG^;>,I+HHZAQ'">^\biSVcdMkigf<;q:5`V\Z<^RCd'jg4KCD=rQP1_/(Vj$hu(L^+7Z1__ClPg#QZ
%0-ao9\mV+M*O]B]I$YEB9g8l_D%oiQ4/6Ct&b1d3-EO&]\&X9QV%9Z4L$R!cZbu+lY6I;8cRgGiFd'7oqshlaeBQ@'8VXD?dn-mj
%=N?6lUY.[\&pFoHHopXu(b]d97H-*nS?0^CS8,<I0c"NB^"Tp6#C]X13Zk*[reXi+]/4jOpVO0gTBiQ7(NEs8q]^dcDALnA@ArM?
%GpWu@68;@IZg0;1dP_ReX#1N^Bm,1B;T<l%hY%%1#A!B\Cj>8C1,DcFM9fhP+^*XR3r0:8>rE*61RnW\#V'U7UrDJ"faBn(2_HsI
%p%L1a`quI"bA_([O_)PXTeX`tpGFiWq>Si[FS[.*@WOU.GCOuOb+"pCRP'O>KG#BcSED-?H2]D8*nE5NK<bAP370PTVS!\UDSlH7
%**.@nH&dFu/aO_Z]+#%ALVZ;"kpO.C5_Y@O+[C>mL>mWZLE0o)[uPipl5B,sWJ=d$4-,u9b[G]/')rln;D4f6>l<ZD#0Q2pO),lg
%i(:\DM8iRr`Q3kR_`Qg:>KDSi?Uh^h![&-M_9#OS:;2`)gaa&JLc`l1"E-EC/6PO47H2h?3$+Lkr7l,?EkP4kR$^e0DN%Lu@=a>i
%faX0uE3j3\aR7kDAF`#Q)>a_rjb`GiR\%2FU)*p-r:0+bRb^jK9?rHNd'*Zmi#j3HiZQrn&;UMF1nJMc+*YOrp]5["EG%Umd!R(O
%-a"TGP0k(l,F@&uHNeG+ILn(6GJf5>[r/XooBcH]md?Yt*^U7MQnsQ,1rdHU_TOUU`2gHs+[Tk)YX$UN$)&674??;)6*u@9`4A28
%/J`s#*O-4^`IlnV+ugO0ANCYW-Ps3Y`.M<?*-@!]MWe:S),ZnG^BY*N?YGpFPjG3:_5Ss)'u1TY>\;3F0]L8D4q5DCkgsXQ66G"D
%'!AnLgX8<NT%q7^+:)K!<FO*A%kg<&#<-YVHc!CR!!&*E[XRWH6#rJ@c3;A8D.,_Nq>1FGO1GdZ`qnH=Nr=n3SQH%nQ@I-5a43]@
%Z^uADka!4#Y6;0!1'_`QjY!OHN"0,Ort:)I7=^kIgIM6`/?I,cKY8&Q\o@N1^:Frn\/4:@D%?:a[*],ff4X&cIid=,M>7bY0RSXi
%_\:9&]09k\"BILOM8QVQg;KfK\G_l9P+I;G+,Yl-e\6:HYbuU2nSC&EF8#/#1ZRieYgNo[kT]O.WXeFqol#k[VEV9f`^N:-I#c99
%irQp=4Y*$]U/+SffpbRVeqq>9ekQf&67sNfKLd2q^VNYPQH?o'NR@J?!B6k9YU:Y<!#@M<crpKE*X(Mn'>fjZkm$\$.XVs6;T]s9
%1_totlkU-].+]fZq"gj"72KBW,EkdbQeO]I=&q_!.BfhX`s$E/V"<MhY1uEYRsW<<3&ZeMG?kaq!tUES=pj+?SbEp]nL28,j5E>:
%()0OK\6&(4gu#7kMZ=lA"WmTI#f:SAqY][iTE_,B&t_V\Yh^gL@ZZ$>lL;e*QX$/4!fpJk\Ua%YonskD9k-iXhYF3`>euCh$oi,!
%buk,]@4A:D,B:IlAe6SkO>mQAQ>o[g.\_\(DDI`8$*TYeIhkr*OZAO0"=*MR[B*#g]+q;V!%Hs+Q35D`Ai!e:m;0&o\\JIWXD_*R
%q=t7eQrV':0sUl2Z=Up)Wg<VS\Ur<dd`?$\?T>Ik2OpJ,F,BD715oB@i1B'klcntENj"c`FKg(@muuEh1L&8dm7KQ=-GL!kY4qBd
%X7tM+$g@P^Ga3?^\WqL#-uUMmDf6RJ.+X/3H%$lH8ipG_Ierm>I,5Btl09)XUZD:W#tOq<EUV$IrPNBFIOJ"6MYdPgm"244aFnMj
%*hSXY:oU76ZB4Oif4OKIEAA.fX9a?2%4^,LML_s^UL=;cfR<6RhiR@C;*+/1K\+:R8@LKtRFa5Nm:W7D+l)J/26RJ3R7;Mco=fVP
%2E/_89h`T0FR"9AD-8cNS85m:n"iYQ^+WdbC8Z)Ak[/T(1qc9"I9RIEC;hsAbI:"^<DT[#N'tG#1+/f2'Mb9V&$bcif/<Di7;Wqm
%[4^HbCNP3IY#P5bI]2qOK0!1oMCLA'P\OdEUa:dd.(m-rV((;i2,m#h(m^=k?sPt-/utr`]kM1aDXXWLXO]-1DmA^*_3ME01]!A\
%#Y3]dE6l^43CLX@j?9"&lPGD)HfiC'1TtMr^*@t$20Qj=APN%/3V.b2[2*jM()q#,_i/9p(K;hF*9C'CgH?guKtPY.B5)ZV5u8`n
%mTLg=O;FHjfX?IWL&`m7S*s\."cceos5><Nf#`8XSafXg)XZs_!cm=50LG)4?\\W"ZdenhbV+Qc\psnOe[N9kr:3#SmKiL`kqL&q
%7cKHFs'Y=KQS+6RhV5<_=Qk'I</mGUB[TH,[XN>Ucn^e?ag++0&R$U=(NN]lC;?L7-#pUaV6J\qhkRGpeC8Xd.p\5AGL/6NF.$,d
%NaoH<E3?ro\HBY`]V!YPhWtHC@47FA2^`Zk4(K5*Vk2<#qq4^Wm0BN)<MQ.)8f6K<]VP+q#Ku]H<<@_='#mkSopZ)5`Q-q8gm.O?
%\6S-tcuhA-C3[EMiF8VB4Q.l1p;?!JK?t!-ZCG)@h_GW1Krn$g)MGq,h`_;!EtF0!/SA(3LIt+/LHm\SJO7[si%GqcPuor>_JTPZ
%r?U)a\ecX><;f;5&>!VrM>!&)(!MS+i*Y$R"#P<M=3u4SN4>%h13<3?kD)'HDQ"E66cM&"D]+KcIO=*IBo`a%_FA_2<^HlrYM`@o
%JJ@\94Ub0YZ6Y$s6GXKH5(T*g&,U@M^AB8Weu4$/s(]=-?Cr4#)AO_b4S1@#NF!!`UDT_I9>ba45HZg1KCt'8cAs\][BLD9&YGoG
%Xl'5,]+@fTdl=]aG\5QdKWdD,>EiP)AXk*#.[1?Q<r1Ne^3P-^+`HZQ?-4&=[WM(+E,Dju!M`"/LN+seqr6-i^YY=QQN/VK0B#UU
%L%ZhJ9gFV9/%^kE:k[mgQSY=MjnY08Oi>s,V"*_>jn-!,5Gea2-Vt(J)E&!jk1nG+78[dL1sN0p>hCbQn,N0^6*'G(XU(8;bfBTu
%2&J_k;q'Tq%U)@1\K''[<BRmC'N2`CFmJ%XH@6<79bV##mdnlPoD$,'k*O()cI?/,`kmQRb8q$8L(WE;YF_?E3<k,CY`Bb0PkREs
%'M,ZgiY8=fE[:iZQHqIYpRN@K^]>`BAFcP?prCE[*qm6^D?_3!fA+#t>4*Yj8:8,b5,/BEj>KFnQHB-9^!;=^F.Ksn*R@J<?.Ae*
%nW9.Pp0P7Soioqh3"^PU6?#V47ZI*c_I[&V2(Dd9-3E8gh<6WiGd`-)I(:j[`:nEt+2'Y/A3#<,Mg/BP"p3tlGT['9/_FRJlHBDD
%kcd2oEMGRY4;e;_i?uAMTfFXha]"8tZ!:RQM#54.ibfTQIL%M<^,g<[8%Pl`=K;3(0K,gS.srXbpq2N1A]LLF0P93]Lao*";:lV?
%,G9LXK5,oN&40UZ[M/Q;SP6[t+jA#MRqCF#bL=$55"%dbTcn2s6H/ChQV;#"B1/+UZt,QjUsN0d*8L$fT"AkU\kggUR2^Ac_IBo8
%Vb?/,qdD$>2uFT"&pej=K'e58an"dP]G:fTT)HhHB#ELr5_Vc2%@I9Dl@39N?m_F_ic;RKBVD35TW<")Wq!t]/ugAF\rEkhD@&RI
%06D#AX0E!_'<V0nYLlc&]TV$"&_[SUYe*+1D.1bn,,*/GIp5^E>N<6G3:oAQF"=pe:A3*m[a<8)Onj^FBZ0CO^:r<+T>b$uqpe@C
%^);K8D!m"Vj0KHU<::(K5k*<oHXZL#j!NUIS&.^MY;`p[%'3fknTI7VgClQ@?iBiJcdnN@DMh%c4Y\KP[Kr-^K%-U`LtIqGbLIJc
%]uW5+aU"ni/PVNfGQK@K]k8oi(AH7X\[;_[072]JrgEIgb*V9u!>W+.6h4ICbB$;k6<AJG=%?a$#KNuWA(rHYr&fC,of]Jgdl3Nl
%BsG2p-=F%DmfsgPir[bV0o*gO-Q\$RK-b`d*D\:?oKIq)ocIC&e1.d1MLi<"N\#cYSF\H(7MM3#(Tt9p9+g;%0AlK@H@5>8\#R'6
%oLa$toPeL_S,[)Rn=C%0O'Lsu8TWGQ3&U"SBWqhFWKt@t$u]FqVP:[6C3a"%),`%ffA8jVbh:P;X@hI%W+A45]:-@]E:NK-[HtJM
%EaJS4P%rY`+i39`.oOR@[BgV(4Gf1X:G!f@J$I-l5hj.j3HRZo4=d$3(UD=_b7V?&'hU'm%2Z5FoO!N_(3m*#7DHE0O%b;"[4lMN
%$Es2F$"g#[+!CL<#cm\eh"m"F^)*aF%,m&X%DsR`#1S&>Ys)FM+1C_rFPZ-2hCUa[pD:nmF[Z1C,?NC@iE;gOeeL[Q./CS3R=",d
%JuPQEn2oR>!o(gfn:_#HA5O;"%4d1III:Oo\'NSoTu2arXt(o4q#u"->flQRpK[o?ntO_NK]%9Ornh$`@-E#ED-=/QT=^nqX+$`l
%GPKYTDMh7sIFr$*U2'-IW=r>P4K=dOTShu3,Tb,7R5a"><Gu5;gla=jG.jb6'*".3<P)R9N@"Vi?W?FX(Q&16MlL'dWLgehV-d1B
%\<`DoW7pp5C31-.+2"Q+mnM]?Io3T]\4HNn?<!J9^8;h"neWsZFodA.YcE7N[Hf^#B'n?1?W?E=9f:'kqh#\b]-]sba8U]-<?i>s
%YGn*_'it4+C8^d18)RJEU?Y0'LZan!#/$ngk9SGeg&1D0eNq!]]qhkcWX`5u4pkB/]A/=E?/p5!lC@0\Km?Pg68cF7?;s([<:mSO
%ISk7OP%EflWe9mp_\/U1MlPt'>Q4=beNO6II+.hAalB]>M!jU:F]i<Y#3l#uA&kdi/i3VmTp'c2"O(k4B9d,5plm/!4?GsdcLXNi
%(#GQq'k`;M42\_Tdb2UmMo9!*b-RGNfP7S5FVSQhk#BhYcX&og9o/B,&0Tq[q-A8hLuRbDN%GpS$7O1Xh^H1\b8%\/f`?"H>,48B
%FH5@ab-OH'e,iEk_O"nj.*f92Ep</]&5k-"/`FmZ6bg&,=68+!S*2KM%^od](iaH\U7W3*YWUZ0[6_db1\N,2H1h=:nr*'T?S"7a
%)HO-sF04='n*9Nqci3k^fY`qdLG1Wf[k]O@SfOObgO>U\gIh4uip>cE20Y9tLHoEIIe!R%fcc6Z(HrT,Q=kt$2>55Z>Hg4O6uhpj
%Hf;i+B87n\G%TP]<M$l\`YPYKS6MLHO'b5<*J`"iOcVg[=FKE8BprnNI!N.:,bMa>?^GD\XK;G5H1q0qCjW<B>&2TX3#Ht<IQ-^h
%hjs.Y8%8Hag#6_sB>$AgeGI0OQ]24V-<H1,=R[)RGP8[Cqpi>@gX=1BDpMa92]V;3%XjPtYMPi;B>MlnUCLk`Ga9<DDY27o(V.aA
%7)r<Wf\^$[Y.*&qZ[M<-%#r&AL.qAh'g=dGEM9Qh!HZ<tk<JpWMXc4d>$"r`*[1s#Jr4PdXls+kN!Ej/Pni=0\D],0`H^#S%Y%P7
%DU5li]8H,4D`%6;`HYog_U3*J`k<6XIo.paXg%CK2I9D&\5b!%LLdc'.`Rg'LYZDSj0LJKWete\T=fR=<7m(JpY"li</g]Teuu_q
%4T&If^Sr&o<i,ap`V?OidFD6U06HsHdM:enDp)<u`V=35P3,c'02S#-Mi)LM%fDquN3@cO6<&n6_JA%9</`nPm*@0$(O9ZlneL0c
%n#Tl9`AkRDPR;cK\no?1,jp*Dq<BKM=&`ZeVdeFNal,nA(9SM+@spWic`/J7FmFWc("r^]dh]-6?)D)d5Ba<sMXf6ER.i/dHhZHM
%V.g<<N(4Y(?'_T0GMh*H2\kAh2mofo@XMAXZk`H:[3[<BIrj49pknT4L_jCthUjO>=rsE6jVJZl61<o<D8l9d)Y7!g03[9#\/iZb
%V%9W-(e=&Qp</e/D8j$aNmutLDU#=$G>"=<W>L]?O$p(B@XKY6aL/6j-!d6SI*'!o(9A@F&Kt:c`Agu[e!fekW>NZj3VX%+X/m/I
%h>jjs]7Lj%(_:UAZ@[sR+"ujh.`V#H#F6%,Waaaaoc,kt]gTj7E]4sj=u!aQ-ba]A\Bc0-Io%k[.u%qCq/.HJeBb'1O2V!(EPL4b
%EELDkB)M*I`dLWP<aILuSW&43.kX[RNq<)K?ZEi\MX`.a(UO%s<K,8GZsQ\Lpd4_9/R:(PE<"SWMK(;@AlO_ag2QZom_>b3[q`g3
%p]%<Uh!0YKp/ff'<kh3'n#F9<Y@U_aiE!]ar9pZ'X^YN'S%_s**H'D^>?(d+Y7A$lF1d3P`RWr+.dMRg*U]r/s.elK\Wuh<W=HD[
%[)(o)Zg)M12Vce8Io.5(W.[o]!Z:g@l>Xp#1q]VKW=BH]JR<8:\BBX&UZufB9^-Jq_cQT0]NNeD9@SkO;&qjlmA2>6%_$2jQcSD#
%>odf7fCuBb/#j*Ralr_Vl>YX>mZgk/>K>B;l7@Ba*U`):XfOS=`1:8+`?/'7>KDWEV5NFU_`]liIo7:./q<5se`$3QK"n>rpJsHW
%7<SC,*6$H.LX/'@>toIO<?"+Lg\+_!iB\;bD0<?g)]g>IGhMBOJF()e=,1"khPfT3PNm)pdB7g2<a$M],pPk<IodX3\<`C\LKh1F
%DAl_jFa1,"Zc_QP5:s>?lL5\gZGPmGX#>@5q\&PdmU,>(!jD$`iUQlX3o&G*+.Iake`#(kUGMGTWXbY&`OVH&E/-+?B@Yt7mStAn
%9$Hm#<8-=9`kq-+aL25.8DHn$kVe'#i%*^"0)bq!j$;I>*Nc?'2rq(ZQF?Oqn6g\%U##eI:;*CC<P*WSc64M0rl9F;p-PUG*fM[Q
%ar,l;YkMGIa-cV`hZ`H7E\&fhKjP*2I$47?.NN7&qpGS#<H)8O+J'?",'A.6/teN?`@^;H$bq6UCqXHeRiec^PIlHJlEL)44S<)T
%rue!DK.Qt2Q_49C[kOkS1:.&'+0O=AWM!bZ:#H#Ca!q!^ck49U0CWS>\O"9r^nB`S4P8TJfNO)Fk'0J<b?[\"X0US0-1#iZ!1taZ
%8:2.2-[^6ggRSTYGRs6O"O9Qn%Ra]t%>0Pik9Yn;7Ne-''sGsT-Oef+BLnbSd8=[Km2N_^%`21'KT!Zi:],BcM6+LVQ,!"\A@6>4
%!%Hl8m,^j3XaKTp@VkH?s2)`,;>'R=hN<,91VS@22i^2p8bMehWAOgMk/NgZ.=6@m:Jcoa.UN/:lVXS-;+Il1I;h>M!hr>?dj;?5
%rF<)(_+i(#"3`OTPe/bJ7H`d^KiRTPb@!54il:63`=old0t*ER$-$Fd^"=tOWD>l,ObJ/B-N`Ql\_X\M^/Mf!`fbReSJoa:jdBcB
%UXJfhl%"o8$T&&D&f+;XX:O>DIH*.F(CFI/'8b&9.1W7sB5:bmqiQrrF7+"jneX`fdWLb#D'uth]kOtP(?U4(8B=]q:l72n`3$L&
%UUp+ug_QSbXZK[1fip=QeTuOa1q'@Vp!^U?s+3bBKr2*YP/f(9,a/>iLa^U`Wf2;=U9f$XdL3\tC%5\L"Q?d81?[AW[Ln/74Re._
%YLSKJ6]C55S%:2VHU1(S2nflejj-7Z9nlJ_OYFEKE,/m<0/.A6Xg8!.&GGO[:pm:W;V?Eki)8ZH\,G!fWK,f,>Dg,-V#051-Y)FD
%9l2@0^G^_@^XY!9C41PJC02CtHP.UZ6)7X$#QaCqpQ:s55Y-\t\`ppiQHA8P*Iu2t^gp;?I4g7o$N4ED^2(8bkc1_P'u_?R>oWXi
%%,Ba*hJn<Y>jT1[i:eJR/p(IOlp>Np](XaB1^'X'q0IG[hfQS+oYL"pQ)JSKWCsSqOQC\IU0i^5jNB7)LdB''IPeLKPnDQS_h0)>
%HtTG?3RT[Y>(6I=Xd0dM0@dK-0MtP/[2a,r$1*+C^'g^%ESYDI"YggH[Qq7eh>Ol;mga4!>HI!<PODPLQ;RH8W9"cLU8_4rcW&'q
%dFd.-$Q]B!nuR&dY>-Zr,)YU:2'&W]!QLT_Y*hp7#I!6<^02"P\S?C]Do9,?Q04_$oBY#-<U9UmiJR;W/eReDM7DRkECP5%n!@*-
%3^*$1"TfjeLk3'WKgA%)4jR2nW.'.Ymt[lMpPJa[`F_R;C:9H?bkAum7K#E-ff;5?MSfR%\M1([q/bDH$dK198;K>:*e#,1o\?5*
%Q]q'"Yi::R^?*eP&*)+2n/==Blcs]@S(D7(:Oq0i9eBQ._?D=U5D4mb0B,]08dj`bQC)Kmg3OXEk$/F//7[7X+e7ET9l;=t^(;[S
%Jb)TSe1i/-#`kft[C0$&9"fPJ0<q(iR7deCWT6g<,7;'?(XLh/k(P6hlI)R#0h@JUl.oi`]$K:\=dA^c(V./mT3L-Rc?cUYJWnN9
%g_""+nbhg\WU6_3=]jQe6;(W_;W1,p9q]WCh&Vlk*n3&(@_%T8^7:kmkT_5agRP3dnm0J]>\0b'X#AK(]366cWK@nLD@J7C1@a-H
%I<W\'/=.9'*q/_KeOY)RW%!PW#>Z;"CU)o>1+$^:4)5A1>]-<W\$!ZaH^3#[o5g#P.]&arrju$B'u&SO5>Ra`;*9=lqRN_iK@>n(
%k@M8HF1?9L\U?P5-JmU:WT;Y5qfU:<Vt(plp`T63(_>Yl`7AluDoC6'c2LJ.f_EZ<+%u:]PaFL)m/LmD90);9C/6$sGLqSeK3UFF
%rGm,uUZ@>..UQfqKLQsJ'AE,M7NAT*c\]Pto?ZC"I?5=A55.?HNjdC![4GSrF&HS_[=q8p@=?I:L+dCm$2d*Z<:97B.9sLp/%rY$
%(n-GKc\2`jGn0[G7cM-`/gT0l0p_)YQY:^!,2F5=h7>0(Ar[_ATRBK4\amd\LL_m,2]G!!6B=3h`++#SVl;[)R_38l[Q!7@jUEBj
%OlPQGiQ9Ytj`lgu2pXHcPoQ!jGA7A]5lNgP\!+?i_"!-VbA0U.8L+f8gT_hQ$2'U6)ie)LlNDA+]Ir_-Kr/nG4h*0+"u!Tk83Y,9
%ZQD%VN3ZpgjK^r1?5oGf?76UAVMN/b[Wjg=e2os=`k02cmc"9@C@j!l?JIQ\H&DKYmDf%sM`-Eg5JQX6I2BArC+OdVG99IgWb^ga
%M\G_5+3R2s3L8@OHpues+3X:/T4=jH<^c.ZV5rqF/[\(/Gs"!77hZ>Zo*,+Dhg@#*K(Q`L^oGt0d;?Zh+"p6-3)!!$IVAqc])+d1
%%BV&!ed>dM;Q&0MmZ7Q+HJ_\:(N8K"O<4$mlL"N^FM;+7q,6YerQ!FB;'SesYNp2=Hgr:n7;5XO$q=dPI,jBR=&5miqYG@YJ+=%b
%IsO/q:(oof`p8?;H=J@9K[)SDDC&LbV7ngL0"6O=WSc$fOJ08%4e24@$b;2TQhm:fN=3?'9O*]Q[ro%n4qcK(h_#,][IQih\Yo1d
%&)mUqlQMF9Xm"el@@)l]&R-NYD;F#YTi@.9]r_\]liui&.t@T[iprqQ_9'n\oqWo1n"fN:H+LeSs.'1bC5gP"&'Dr9*A;UD*?'on
%c\#]Gc_pUbGF"tq&079Mi.8Nr-^o@).ql3[Q);5@T2)rei3`u?FcZem@Yr"mgRnbO\n@*u5+/2Rq,.XWX1Q'JS=UelnEonMA":K'
%\N.eD/UX?/S!bXl@=(R>!p6*2a,?RXj2TJm2U5P(N-PC$GR]2lOsq[tT4j(Vj5\q*4F'hbNshFX>J<NhI*5#=]cVYdC@[I;75i_u
%0&.]God!gk["c`DcGl>W?iN=*;o)W;J>B(A4Qj*=A3.]3kO'j84h[>)/Fo<_8`_!'*Eb)=he-"P5R5V&F;I4Tb;SHL^(W>WIADCT
%*_Mkn-,G>@Tn?Nuq_$7dcBnNmD"2q([^^3Zd-9S!hZj"Mp2bn2%CY?^Z7qe^><iT-[fd^U'9qk&Vh-i>m'2UhIRC]*4g\T7r/#Ib
%52$-f\+`3cl"3HJ$?n^:^Ck)WT`_%RIOncdR>S70NPQpt?_`NaCDLePDXKc_DO';+LI2+f"4Pm-m,1mQU-0T`RaOW%IS`e#A%/$7
%/`HnSpKf&-IchbE2[/TV\ac=4G>dVH7t8%P$SFJIfp#^%QacdO8\'W_pDJ2t0rJnp@1bEb[$R.Vmt\N-6reS0jqMpmG%&2][/I,(
%g5f`]]m0)0!JtTN@:'L&@-$>hig3l^QKOUJQW&#sBk7o78`9BFVEA+]!H%`J6&kK!=H9lYo-\SW:-0:5QF6JA#76?gCBh&./6+GE
%B>q3j?I=iMp!QCF]Y(b:lb1E@YqJGIoh;EobBmb-Sn>M8mf'Gh?85rB"AU%"`Pu3[:AMC>]cePHUT*<n6V1@/cjCgMb"d)'1Y:o/
%h#L\r6>;Gi(^"t:7`7b-fTn?o)Ja9UgDhtY0C<Y0?YkTLh#VNX"gid@YVUo\nX4a_RC2$%IqhAbO[K:3X^*.\-uq7nkZ0t5Ai'II
%4/'8Sma-/QjA,XL]%CbW@K?.jJA;iJ3r>N0D`ad_MdQ86bGT.NeZESuLJN\-R,PL/Gq7dt[9nUuGX0,L%#+lbP\.Q-F;R5ir_dO`
%.VfIt&l$+!m]1tE]\SB'.n]Cs8P_RbbMUfUbZ#cV>Nk@=L>9mWV8*Ib8R`T:2hC*/<D,.Z?DRS``O=`V=UuEX:MR;[MYlBfe^lO&
%G'*Ue(`mk:IRq1Z.bUj`KqCDCrZ[NS0<gbnkOfeHf$^.N/Xs)#`Bd%sJS;aM.-19]#Phh6*T`d$GYe(LN^s$YmCb@0ZEaV7[cqXg
%q`eA6<=Ke*r)R^A:GH5os4eB5`nO*XA=6`uC\OX/1E%7KK<l5&;Cu7kK=q@]gph)5?V]15Y^sdNB%G87pTmTN#W`G@n<0;XH3#-e
%'=IhLLR$m7BX-A:im0O:K4D+hBH"oD&BA-fQK.T0qi%SJRbHmf\@o*"Z!,<bNqMb!NVpiEcF%a[%*fEX*UB_Qd\U``k<ISnVAO\2
%(J',S+uX+cc^=nAe=Sc[2KgnF>2Qp)9+^t^+&ZZ4Qq4-98HICoaNrF`ebaerCRa's7siSSSSepEr$:V!`FLKMK\;LYn[eFB[!m.b
%"Y'J!LFrf-d1Rg6#s_.U0SZ$$@L<7X-.4l;3!ig'%tf]Q#f,"PaRQAGf\`;q0Ou4;dT'qaXk(7:7'M3;%%=2U<>7,Sq@UYq@1?-A
%^0YJ+H'`8U[,C%T0+bf<.;NJKP)$5D<:HWbBr[?W>s7#[$M(d!!0E"40TFXIj\/G&cirP'(H@,n(^tAk-=*3%^OZ'Heth^Z!H_\!
%crWuNT/L)5k.kU%eRd+]#lPt=p2m^3IT2mr--`9&qX`W[pJ+@t^9lEoj`I5o8m/i*=H4o0niNs:2`=iapJDk9![']3,PWH0G-q*e
%^3PoYbOqL8Tcl!Gej`iKgs2biq:h\(qmX5?1uB[Ag=uD/;oi\ClL_nr,Ru$[ARCcIO'Lugm'0KY2$;\Ga(n9pXXc`VfJ5BL*Ud]\
%SXik+Vrl0cQp8i_]:85@mEqA9;E'q#Da.uB32>&_\./.In1kr:;=]013B_Y809S9MOVZ]SA?6%"c&sFr/_G-1QanquO%)6o^WC4r
%d@SZfC?kE`&TQ_jN]7d.?ec.D9Qq/!80>8$dUW:uGVSq$MYqMtAE5aLaIRg=njRiN#*UCC.=M_9:Q`.Q9"G<*+QQ:AOO74_19_kd
%9k$*;gHf,r_/f?2,r*ACKBWlh-JQ#4a*I_;GI=:o+3J)dZ&<('*ugS\j!EcrB97m8=E&WM)lB]Mem>)7DZ`1-Z,2R/?7>0;)\%2Z
%(QK63s)=1.8DIfNHKQg5DVtl=M152!ET9:n>Uf$R^=Gg>`,DbA1U#,1Bn+mF;B1J^>:]LBEHsp>\^J[*.g<\N5(;eN4bcGldY1n'
%]0@R=@4+'*eTTZfB<*3]iX>'./.]r0[8WF#6bErUo;u-m9<CFk;f_&3V[ID$5)UVF14$Jr8UJeV)(d"P8Mu^s%kJf<Vk)*V?@3Fp
%GF.hWhs\:.TLpgJ,c?$m>uX"mX@4U'JV7Yss,e?d()s`,B84I=YGRHB-A!af#["/?)p64A,sCp2P=d`[SB_cQ+#2ubo4mOP86ig;
%D-^hYc[B(*jj&_.)`P=%n%dgFDSS5C(.Ua=I>_Kc&"[+(Mpfut1@6a&G=l=e)V`M\Y6aFW@\Oj&q52@cR9Su+?n>["3!2lSmXli!
%X!!8b,97hA##*lFgMMF`O?e:"KCgu'4Z`fRCjn<>b,>pY<%?e93F<aO[/8t0D?*N04d+uZG]MYAGRcpegNk#%b4O*$+/u72r\ZYn
%kMYl%j_gok($epi'_cl@/4UH0HZI8Qd]5"nC'KT]O`HW=?C.'A8k,s2+]V"F$4tb5`3I#XNO;l/!a=^H*`)*h2#1tJ41bUI^=8:F
%8P7eTjZ6;#X7pj:n13nTk",NC*q0,^h.b32<9qtU11EU$HF%V56E><YJOkJd$[:?*$kfdIq@u4`nM0Vq\uYI+#O6=ks6N6^INX1n
%oR.JXdOPM.Gnr\2+\]CrZC[dP3+'OS"T2^0F`9K-T+0;5+@Y8t!G-h8c97A"`K:]"cOrcAMBa,,HPe;%r@XBl(il]@qbE%$&^f7S
%8P;!V*?4M[^lU5"=aU\fkJQC0:WXFh?-"M`UYW-N9R:XEILsVDHpl9]\e4-/[+OZ209GkBl3g6a+2r&.8ML=Zrtc"G8Et8*O]6iH
%RmC##PlIuLk?pn>f.pjg+?<_Vq[(FG5\&cHD2n[Q,rD%%#_Y&J+0B6/,%0&PCjC1-=JtMCDU/f#fL=Kd]bSVkBJ#!0ngq3HcjL]!
%rY@IE+R$uq"d"E-$u9+kN']l/YYC@?B8*7N@:5*+;CI3!!L&aM#FkbO<r'7Sfd_I;+)V&h-'%Z6n+Fft(,=SV3dTH!rk<ginY9<u
%c#Ec<h5IJWc*6*Ecd_!d)'Ht:Ve_"al2?C^olc'bbda4T<lj)Eg2]Y"[Z!2)+LKJPNqOF<7JHTc9g'c<J7a/IO1ijpEdRIupMP;O
%gu1]ed?eR34Q!g>geHfm\rQksM7efFl,H)=C5jJ(Bk'e7^-:E(qKAqA+6cMhEk.'rM.LSKO7\^'3$mS,n^ih:[QRsM%=@/1I!"DA
%?](\PRgldN-!C'1rO-9!\=o,"Fms*_2O*7IrL;nE3)=AYV;BVncP1V,r[rU.p%Xp5%,CN<O5+CoV<_?)%$$CP.,Rr>*&T3p]^0@9
%0?GTr37d4o5$Rj@j4km\j3Rn_QKMt=D,bral0fSR:=Deq.e\BDDYL4W*4<6.NMA+oBj:/4Y^^AF_sF6Z%_j\<9M\K2Lm!UiKRTel
%<Q[1Qf_D8eW?)64kpR/2rjh-ng<WZWD?8JWWufD^b"ZSi,'+B`dSE6W@0Xla]6qo&l0J0e3Xm#ES'NI#^^M/R>GRV-^E-N"L$NCI
%:B"#:e$I*l"E:3Fk.C'R]^AJ]4OjZrDMcF8Hlh;\s1?<A4[uFM4EL>Ia6t3Kkf"Gm_np;IbBjo6PG_pP\D(;u44LIh52KT#,nfCW
%pjmFpVd'+-j0"\@lKFV,OVeZXI_2I!s#;+i58shEXu#\)KGt[V`R?@%Jg;u<WJXQlkrlPUhWh2!;KK)B4meubhc)MqJ+V1A(]bR6
%<+Y7lP.*[X8k)&PK/>HK^Qkoso@3F0)'?QY*[M<G6g<^oY"8"emi,pB,j]E.R]kr=j]2:D95SW`g=rI4SJ4U7!lbjBl4<S<p^kH(
%oGU4ZcN)YpmQ+O$6#P47:NF.@//-Na<`WutNs"!"!r'bn*nA<N8Qn>tJ1a2PCOtbMibDXj^)$:X/Ul:O\%N7Ud=)Scc3Oh'@]4a'
%1m)aJ(oIM.q\c8.39*COE)K*GNbMQLl/l*J9K"g$?pD`;Drb&#`at7Xm/]:$D_qu3*ebBpe-;Sg"QluKkN(p2O;khZouOFaN,jW5
%BP`I"kh&Am4H$bL#fCL43'-=bE'XItMPWVA-=%F+53.a./ke9E%<5UOORMTRc,14^611uIA+O4)*Cie__`2OH'1K']`t-><>*:7K
%V;igeAJ/M;icK8dTA?b`OR7gtSo/.'-tOGA$bPe_I_d3t.e1&5DCa!!X#6<>3b9><Aq!S\7sgc+FfkQM-L8o($B1:AqR(td&bi)-
%XnlpL&H0O>aqPdmH)#hc+#3&"FiL(QWZ;cmk?f:]:#/6S8BgC0ajIFP.Jsl,]>c?LoR;i\fZ"kslg&DU/`f@R.O.B+CT>3o'rtp(
%b)F\s6"^deO[,$KoPrO=m.p3.4_E>%Q+HAHiEJN60PlgK+*>`2CHKq:/h?.MVssO>S0!%<5nVm`$DV,jEu<Nm2BGPMD.apsqCY8_
%ql$Ju$J&A&L"t5>::IJ4k/kHZPe9K^<6*&R)b@a1a;q7C0(f6@Ytq-LKDXTS+j>`/<8rSebF#1?]P^5rjiuTl+J78OURsWu)>9p%
%,u7X`;$]>i7H^9)i?r*i:#p=W"+a"h*YJH8=]n[%p??8ZDrhGrmeaZ"T39+.C\">O1QTIB\sE3IVUF3kW7C20=D$4:^cIYlfc@>p
%1quf"@C]B$n0rC5_Ip,QCAc07,5G?:2K#)dUbZl3LkloTF#VWBj^bhr!%UWVo&k:p0"4X%cB&bflOV'Gr'tVbp:J+fjH[#L<I"gS
%0:R[]XOKXk<lN)op`'BJd8)ME:\X'<^F:71-U7:Q2ral`42G*AH8;3:H2b#G#VV!EQAl4S/&FM4=-HC#GVO$Dg:_/\P)ns#a!>rZ
%C\5#CZ[(C)cWKG`-f&BQ*6gorUe24u434CI^X7`&EQ?0krPQbaZkAV?SrWXgB0UFma%.1gLlq)Cj[U^81BDj[)L9V,pT)!FcL"\-
%IQtH/Ui_ZFaWHVRK!O7#W(QUDq8M.DJ\/?<&e>#c!eBXfV"EUCUi7fDp4]9t]<'S5A8X][%A+^Kj\^B7f(PoQ\fX&s5r5t,N0sN0
%=@?nAp),YbgQ>M$W.9qq$Qh=ZkL't:INId5q=K#mdlUCZ)Z!\'o[ZhQk"S'%^3S8/h#?6rgh$kc2T$`o'ZMJ:gSLd;alda?Yh/Gi
%aE4JjO(h9]J:;2#.]92V>P[Cs=%;dE+WI3[:-gguZ<bUBb);i^nA9h%8Mj<8)A9ZOD8Q\E<5Fr'NX/nnObE:W%pQ9,HYR:a=kqTS
%.53D`s,20K]]efH5oX_^Cn""?QJZ5\j\Epg*J]Q)Clmu=F_'L/?Wc]4?`F=nQ8q+'h8@P;K3IR_JXc2^5BH,EmaUP6NUplSlj#Od
%p$=$6e?N]Wk)A+>s5Ph\q!srr'q:KZNQZZg*g]n)gn.,"G?2C>d"RFdds#GW@gp$!bs3Z+#=%pjDIQ73e=X'G6'p,do&GbtHlBP'
%TR`'7HROlUo7.5Od:);#2rm_4-4AXf_52/0ol2>4]IIk#2YG:2]2`%G#E+]=`Yih'q&4S4%GM[qrZ[,6O;i-K8*Rmp>u-pI8OMTA
%HX&?kmUi`)DI66=-[n&-Gg.)@:\,PZ9&(`<SO:OVo7W:Ep",@0jp=X4/N"8[1O1FU\!LUR!O0NVd@&ZOQjqeo5?d(ArbB#)B1>d4
%VJqK2)VBI[MJi8*f<m%g18_YrHc+"GS,\0allE&EREmse['C@os*2gMdb%l>[=^UeP;OF(WNH-;OhJr/pn>&mVc>lu%Jam?cY$=]
%n%YsAlI5J[OMI*lHlTLjAmna>:0dHG^S!rR9CAs`B"?$Kf^sJCcS'XkkJ]SYWjh7ARI&_jrns"tDOi'@G0VSpqD$?&>%T,PV(EFA
%m/J&6]oGWO;5tuk2hh1GA8Jfu@)=#C=j@,XrCtK8.j]DFX_k%Bs!T&#.eoiGQ<3X_O"<VNU3`Qd*po-#U;0nklFK5L2Ji9ipI4#9
%.(J6'p=GLKq_ua07-mZ<Q7iC[)7skKcMD35Fd!p4SbSO@!e86]+[]sTdkb)N=mkr^[Bhhfh&E45;(]\J+i7&[Zd40<VS3KX?a,JH
%ed?,!#LAZmAoJmd5JX-R2Alcukb"e,ejn1g>(8tf>"$IE@)KdT"-d%flqWbm^pE444i&E8_9)>O=FCj^<NtAPY()PeH9`(-OoEjM
%<Q3ss,uj+IS_ejJMAiSZS(I+1TPUZ7G7b)RV+eR@Q$2Ap5WkI-'\D1"O;`&WP.TmN/@2[*Miu>MfS1U::34_ld"@NaqIabu*ZUhP
%oL:B[G(14\r`L>[^7;mp3!r9ueT4q)#T%:9LaR@HFn@cEb46XF_j4>:'qT8+(Fds"4oN/.5Y3<^kQ&BVbi,*%GB#BjnSPNO;n%(B
%QN.ZojA'4j>9I@4QVq0n,CrqbQd0c*?Z7o)Z!PP_1VAUi8JV%>9cUjCjSO^q>0AgmfX9.'_*M(^%#8SBHY?r2bAn$(Nr=QtQ^68\
%;C;)r/%Kh<s.Q&RGhP+4XLeeE.8Fh[rmBTg/`CgYRCI;4:oHt!K303$NEb$#"6nVE,I*6GS&3KAX(Paqd(UT7ot'L53gW/S<aWGP
%gXoQa\Nq81$n,$:2?5!3.2hO]),<Q:R%"$&$Y.EpWMbJSM`5BgkmVf7bdrdE_J\[fV[rOi5)KMq>6"RuPHWLPkh59aqUcd+RTf;-
%?J&i(:r!q_^^IraQUf,[bR,W'LW'[>",hi,$b:#O-\&k&4j.^,q-C+.5"of#1ILQtI30HP[@W+Od_LE,ektj;=a/F2r.s7Dj5*Uu
%IN)kj?E38UNu]0Mk`'jQ^HY1o(XB!,7HqLiHW84`_=C&:X0K8sn<jZt@_7%ONl83!J].5LA`W1=-/d",[,f+9f*CrT?*-E(%=6hh
%Ya:1e.F$KfNHhC.\@k)/C8u7+e-fcol(]$Jo.5@PWEu/G:cB<frG*.TaUNVcTpM"u6D^g-f4cG_NF)`)Z7\tJe(aQj788d*c)Cu<
%SMO95Rkn(%[/4==o>Aqu/2(Yu9\kHER5.^U@cPC?G0UeAr1)'$LV0sVl6`q0O)(SbpZL^p"g2raD?&O5k"9P3085pa+%E3@([@NU
%2V6TP^m1A#Y:i9"3Lc@#GdMa,0;CQf9I\XGpSc.(Ys-Y&"H3S0=PMf_'iX#Scb!uNS1%`j:=qDhCRa2)5EX5ZZnInUFi%b^<^rMC
%]90W&D(okB^gG6$C=6[;1d,iYPD?=n!d)`R&=IgaC@^M3Umnf#IU8]mmO"s!CZ=qbX6^';VnHlo',^oN+hrW3[$?/'X%7igAZ=6l
%fQ12C.dK\]b%?r#Q[Ll`I8l1'rEn]1KE)>30_WEDo-KI:B,ldnUd8(b4G0cIG'NArp95j2bY'.c^WtNpp(_4QYh9Y$(<KtM>V2N]
%J9BtTbR!iQK3tNP_HL!,YCnNd*r1@$M2+^(qdm3orB`_1:q?.AktF;p8>nB9pF/)2rRp1D2XbtqdZWV2`VV=W+fIV]p0Rp.\o9)Q
%Sp$O7/jDPobN]/Bs4b2h&6W:0,NHG>>U'+o\]^B5VRsS[;:U7sRR/:BY"GBI8ZJa;Ah6MQ00q$]DG'S+bMnr0mkYUrk9_kf6<g(I
%.Fm'j%I-^.IL7"ej#<>/R62u/F%LO,\2&EeC[',>/4\^pa(JK\\Thk>'R4lRf+L1snmC75JC%$'03'''A!qX-qnfpIYKJmYm_%PP
%\[+W_`OZ/e82?T]$c&t7!!%u&^BNQIG5rIO-F7Ukq"5X-Oa)[d!)gSF!s"[gcasA=f674fP_lr[!;u['!0Ao+DZTY+*<8?7o5=[)
%oc4$pG_fQ(IXMG$MHnE>"X*Km3rmX<f\B[2IXMG$.U&?h$UF!dG6#GHcbBYAf6751>3=WB!"SLg9)Q6]s2a))m-9/@-IjXHVhO3g
%gA_mgrYri.I^T2+XSfO[OR^j"VcHmpO05E:CB&]]X0'CHjLSjARp69r"/p(8D'tK`J>%4#-'_nclqp#fTbhA;HsSh9n(g%Qch+S"
%6)p`q2lot[4kR4:^mqBbNHbhdP$tP?L8"d`-g6oUr(PZ3d8#%j]K&]UGaeo^Z,5j2`sgf5YIfY0dEcZdD,;f//o^X!N__JC=6aE:
%Q\;f\24Rdh*_6mUK-L(cb2(S0K0IrP_#S%spN%b1qhS-*:FZ0D8u$O'VFKi_nai/D9>pg_a2A^L>PVr'ajsJEOZoF&4Yb6EpW?S4
%&B9/KZ*.c:V\7"m/ZA:qL</Q4fe5PF(\:X5H9Lrsk4cdc.&8i9`HK]m$3A.8/dG.io9-oP'1'@&IEHAh)qm(lE4uTMY,1X`"M3:P
%8SP4!>CZi,&c/Z2]pJRP3,WN(Er33t1;\TSANWl;GA-^mT^=E@L.\>>,sHu`<%)*@BB&Ht[Z/\Y*49((XdpLU7`lFENP0N^3uQk,
%p:6c^%u@T7X_tRe(9$f/F[U#%;opd<[L5*<#:-6Q44%if1ORnaSn-X,$J/?G78oA/94NIr!tZ\Y*1]&m[IjFt[3*Km)'+q%S(_Z1
%F3,Wr34)YRj2h:D@,L$WX5,:+s(MrfA5rRPi!95C`@+:a;2Sp^"+cn6[7C@CNfqLtW>CE+m7>."d]SYcrEaXA:Gdiqma"Kaa%A0)
%ebd'Hhg@6]i"0hR)]g;&#2:)Ip_G$I')[7Zn&Y2*rk3j^>7n^P!o![*%k$ke(Gu(Pb!aRM:G5,CJ\H.>+U'o"d52N]O>N0_H%D!!
%,:"XK"VG.O)G?)[)B.Qrd)]-gNahZ>QDUT/aho27Bf%R6Vk]*i&j4K/lOd>G+_4#n&b'`Br5nK-;9TXmb="qKa94#VH5"8;*&MY<
%R\ZU1A@%d3hh9rJ2G6oAXf[92BSI)F=8=C;_B@2Rn6)@%4e7Q6"`QK9/oXsb@GHiY<YTQ".6%Bo,oKRe"3la,QDXl?im<R\N@#Q9
%N^c:#8-9&",0OpLAK[8Y:"Cp7\1d\q>po1TftKao5bWI;dBTef6"EQI,TYWSDks]@afr:;bgI][l&D2=PFs670WI&DJ36=8$(D7M
%eK_LlMTcD18K6]XNC9)m3?!BMi'dc3.DU6i+\IVW@2q_jRK.,tOJOsgEqG!DiCI8sNM1p6S5$Z;M>4.#7MEM!UQN\S%#g.6"PuBr
%#J[!H;HC_tQq5UJ0cM^I&7GM@;$_!.ifk..[V:K&o*S*%jii01O*JXp6tR<geo<B\,[h7I`fssj,-msTfg-8PUgkW2)^s(O$8c(G
%XjQ,/$SfAT,T9P<E?gF\1:WIiEiad^@7iu(.m2.6cie/Nd&a>U;$W:2=e9j0j.W)q=Vk22,$91*ck&R&qH'SS->#l17Oh%:*+T#S
%M0p6u(bJ/u#-fln"oQZP#,fnF+<^*G@#IFEe\=DS/?Bb_UGr;GNZi-c5SM-&qe%_dkTl@'$(c>4"$R:h-41"u:h"3lq&'d&8R!DG
%S&PLkU!X..U[0sn=_X!BS[bO6&D/7@mfrsD)#G!NqoWrhKb6^8.0Bia8N\F,nd3WM2O8;,_?@6^A1U$`XKZ&b^/flO.,[:T'f]D2
%!X)4e;3$+0#(t-.JHDN(n[o?g#U10t7+#p#co."`-%`!,6jCgK)NDo"9nGhMo.j!3&MtB52Z]&(5W:SL9rbAVYC\TBogXPMBE`t*
%kl"3'KP)igeX"mAn-()X@YnspA$^bp2?>>Vp*LI2U>IFO3[E'-3?WKB2"W%a7i!\?'qm9jl50(/`?P"f%4su#,AV3AJN9A4_.khO
%qI$S<\$bb!7Ua&/'>`'Wh?<sX/B\&:%&r\>7tBemUG2`^a4f/O^'uor2mEWi;*\\.rhce5p`dVnBY#$=HdPtn+H5d:GY/0.*)#f[
%SHIcF79Hf))PBP"*i<U9!md#fc"_"q'&mU+o:a\?#baPETuC5q;d;X&6-t?+"ec"-"IMT?,&Q(b`j6S],*QI9RC$iTpbj$t7u`>L
%YX3n10JsCSJDWo;kf4&>AT'>T7d-="R`d3A)A*,\K)Nli/O?X0Q4do_eqE`/<$96QNd_sUK48qs?mqhWD,!(Ykhe5N8444=?EUCB
%G`F'e48DQO`e"49kShLYWNFQ7T8a/))i_&U7(<4rLl;k"!<gt'X':E="3B&,)*hT#ngl<F%3V5CaY!jB"3B&()*h5tblG%,RKa=<
%@S"+>K0TGl83./%$>a2.DA,lTLm&N_Z[NlGL@Jc]=gjBnc'6,m!f.M+[L\g&A/W!FVupHd>*spO&6UKmd6]2cRjrHQc1XFt,#*)9
%gW//-[=)kN8-+UD@#S_VJiPL24T7+2MZmd'3*<$e'G?6[&lZBDOipWfl3:_%nIX1ul5%*b6Gq/i1ie2YD^8d#M?hTq,ja(mg2Mea
%@aM!JGn,#<d0i?(:[iO5@Pui_+fj#!_6uhc@0)3p>8,@?blD'd]OBJ\?A>_)',[$c>GmfYJ`"AnS88"=NRmfUV]lD"Z2N<&U]`B.
%8@'CtjGg:\g3p$L[emL&F8')IO_"uR?jX4;(*p?E[l%>.%H]@*h*f"9)g8>AAC,kfJK4q`_3sZ-,5/:8b!N6IIgES!\=J:De%/X+
%^ot^j"^qTfVQCG)%,>=u8d5SP>E^LElOeIgEk"A8=G)aOJdb-!FAfFOI1mKQXJ6_:lF]-C!1'%JaYr=h&])IqfYF@0.F,1"cV!M%
%lCnU'4p#NSW@g#ZQ8%\RRXql>(9k6,4U*Gkd)70^c0FB+d!1V&MSYrn`2I6aQ_4pa^AjP*2d*F3=gGrZ+T<ON%>[u?c,5\MK%u"Z
%PU96mD4)SM74u3@p%PgLW4Us2G\BA!i`0['?T0o&;q'^hdFl[#n>N-=Wk9Cm(PMb]ik8B#O-\V+dI!nS-%8n`50L'MCZUuhf@CPB
%3PFA9_Xqd1]beLF_Rjp4]dOu>CB<EH`btGk$@TNmXdq9<0id=[dPK?9]UsS0*^bA`Fh55A3rEGL+S?^<8G4U,6SK6X#@gF;"C[J[
%F/[NoKP^DJ%6Wbjk'?Z?d,Lf@0;-%8?siL.HOA*B_@*KdIG??^T1#['rA(-DiFDHHAbMtI\)1r(_RA/VK'`cnZVn@d._C9)XH\$9
%N5sYPFNA'DLsDqSN90bR=d"ZP]tfEep&Z>Qn,i,iB=.PUFPriurn)Y7i#Rh0r=i<30TW8R"!JRsfWqh&=Q/f;q@nBTGWmT9M#G*r
%pSU+u.[<IuIsQhd8ND)BI!&e?[apn-%+5TdoNDtZ]%k).5=BaIR/:B7c>QK3&<G^IL9SA,VoW3&A!"/9#[t&b?n_#:gdeF=of/'g
%dmrtNpb5ud!R99O^@!D:e@dj+"[5>`(\ksR]R#.:::N?g#B2gfYIC.@ZqoY'!7q;PU-:r%ouujO3>&0C(\8>H-h'KJT>47]6r`Ci
%ShS/_iB.>8fU*3.]a)mI8"/fe$E`#6>[\%I_@F1m4fg;1=)RVDIFX3?l\h`bL==:J$SOi&@T?+3KCqZT09h629?$GQ3rQV\4i]8c
%Np&H,M[p*@\b3J!3A[IZ>mF4K<jCg8C-<Wf\GjE@a+$^\4g&JN*p^A2+/5c+i:j^9&::LTm"l/0\T1%RSS:3%eeT-/T'*,cCmcrB
%i^75LG%n.=%F+9bK^#!CR_MkJ&RIP(g!K,S;fMZ_]ZPJT0[&X6)N./<[2F_8RBqXOI7s:]]"Tn0fMLmIN,ukYo:Su@X*;=7N\TG!
%i,@RO;]DSi?6D0:mF'd&ZtI':N=:k+V.];$*Zr-*RGT]_3^i.%/9O*D\@%r=V>bjJpo<Ks_"rX=+/;AUA;q6WKHEu5[cKNp.6Ii$
%;0_V"=F,6@>7C9Hs8M.[R?\A:[N?\edol#^r&e>1k,UpEZPTQoLZf_@Ku&M!&@TJ:3UgX[O!2V3\Gn#K9#B=h_Y`AccdhbGb$!KP
%OF+W06dP#iqs3sZN&4?[7Mm)=]jF1b\U;H]0:,tF*(T'0MkXL3O4g:\GTueOW:lI(4Cmtc+(+E(a-IWGq!Ar._j4JPmYg@[#]J6(
%VMl-:3Z`-\^j;V:%H)Rr-+E$OKb)H.&DHm<'DAZN9&JqhP)&IT#]DTH*1`&bYCsCZob?-YJnR^"L\pb7X]oB83e`sY3f4p:Vu'Ia
%HR'%LjC9rFDn'-bdHq9(KlXpL58J^uj.WsZFZe+D.(QO$h3lenUbqIg4[o*4DdiEJr&'1&moT;G<?M4l4DM4SBB8s6_`UT#jn016
%4G=M_cCDWT-^5W?WJ*p2Yb1)]#^`\/kR;nm)%4dVN_bb7^\uP6K;)B\S@&*9DI)Ei8$7oNIdg(C>d0$6i"8KH=@!^^mVKA#o0\2)
%*##rErGiopdV4&A_8<+K-\p5M/&'K<a%VJ&EM`JlA-9@ic04hZUEe'_1#d4b4O<^@YX$KiGG=<r.r@s`"S]QanE".Bp=&%(Ijt"$
%+%cc@f2Be%".pmE\\5a@>k6.DYsi]TO6G.5iKEZiIIHK06n%7-@%HO19JR\?Bbm3]CLUa,VM5p<74g]PM"'rXb9b3;hi+?h/=@<r
%1&Df6dYbShB,R8VY2ePTq'ke\Ti2`6jEsL;-U,eF0:*htU#h6?n6,'QOag`IhSOh/#t1mF6/o^D6t[t^1F000E[I->.6i8W(fCY8
%.DhW3[*F(?dZV:X\.r`jU57<iDca=Sf!-f*=>dN6c52j:-h.ot_)0Q3\`4suUF<9pa%7E=,C,8/kQ'ShBb"Un=#f)GQS?!&]"ZbU
%#^H^EKtNPX9DKY:mmtR;P$dq0cG)!W_QaosF&>.iO$Q!aL]VVmb-K3pSZqh6n#&=.65W^HmULJmc82a]K;k<NcbWGVW:!L(OnG=4
%;(,Ca7'fAVQdOrnkRNk?KFo$RM!)h0[-5"NQ\?GYq@Gi&n)"%N$@`AI1q:1*\qPS*j/nlKZ0Q_I@1BJs(<63U[H:D0ri=A!ec-1%
%otJVS<mM9N>qSJ]f8k^D7X2gj.D9n1L]!7,#a*AZL`R(T#gZR4g\gSOf,OYaVV`DQi'1'r+Z'=mE97/XEhoV;d:(hfm\%TPGmrhu
%Ki\Aur;daCGRijC6o9RO<bsHsLM'[MMgMWDalAeun2rk[k@ODWIt#T00<pDp.,Ah\>$tG=0\7sC&M1>5Srciqk(K>#b7&e)n"]N(
%`g<uHbs$(F;M`E[hKnbA3bfBF9R`F]B.1h/YEY[2*=]Vk_(\!2\%"k>oqY2)i@.1alT>TMjPVo"E*-=(9Ahbb,!7_L!S:?3X90p*
%,2g:9PbCmaD[bSb6&rBfN/R1!6/;(1m@Qe"&`M#>#Rg$i3V]l>Z]4.+*YE>#7C]aZ]ld\+4PJWWEu_[M1#,uXIk.$`m=-7k5QBd;
%YCq,hj!f*6$_gW'"\23'%lqs_H;g9"&70h;A&3X@o?@eO#tUgRnGj>r*<K&IQVUc0;SeS>migjtT2XF*Jf=H-b5:_I7\)3a*S$A_
%#,,aU97R26`.C*^a@.1>h2nJZbK>h,-m%(/F.[[!)n+p4)cqRGLYmkn+U?GMRH]HJWT%(nC4;&EauHN4lr&[Mkka0<+G,0G>ojWk
%_0KRllZj5Xp$/V(""@lZ*4rWGLBr*qnW]BU$q.d0CUUX3T`EKFJ(EpAZYYCip@4@jP+GaKn@JEEXCkj"l")AsLsJmM\1R*q2A3]]
%>CoF]f`1@#ZErJ0nki;F;>(\IUm"=AXWbX:_t#u4iU/Hoc8H_VBAfK>&YaHNGQ<<%acZBI1gfa`a1S[N;n-+Nd9.e!E]lk4+6;G7
%$R&b3*)?8CMD&7Mp&<MQofGdAOg")rMiHH(oT-#k"IqoOpJ^^T99X#Do=A^gSR7l,\Y7*sJ9:d+%Y!j+[ACuF&]0U,nAYZ^Z*,7=
%*k:5BH$t$=D2l_(ZLnN$:"@kCV/#KCF9^VTeX8E_Hid4pQ`;'=2p9hZbJ,(4>JR"QQ];gdVQ##kH;n__=YT`rFm8J0jAnDh[p/MT
%UtaA^&IU%'J#OHdFr=/)q,Qgl[?6]eY![ps*#8<M:XS9*]aF"*27iJR0t:G.GuZLA3`YQlbXk"@4_Gd[c)1Yt4,9'tleG7si52OH
%B[:p!HWBhlUBMpgDA>X(LU(lc>D6uojh?LSeHcM>:]fH&I&t#ZP>q6P+LJ$a4qpE8JEfdLIBD6/GREn,Frp<2`qY>+bH8YIH2iV'
%`L0k10"h-.H49X!KNlDA]N9BK/.hKsATGC_%Bd=;#IdpfN`YM0n8bQPgM>JtU0H0(=bmMU\*>ERgo@:!4qrGtp"5iO_(SB`5a/,8
%T"TmhpepmF>Ld_dc\UF5b5UE,.nghYTGd3MW&ikfFO]rIik=f&_,CWSDf^[,R26h*ENg#?5+a:k[_&bT0?t?Ga$$$8k(XF6%g4s-
%V[lWj:-W_GhElSmi(<HS]0F-ja5]AGb=hOI%m<Q3^Ke/K3Z:qQ(L>LZV@751L[7@Thm,Kn6=Nb^TJH&QUQU%O(e"B<?C8[&E0d[#
%O+[d=(5=<26GN^cSieVQadK'Yn"1.3GlMMU6ot6p*C-,,;?$)840!/]'b0*1WSI3p>N<]G_CM3rRT"^HY"8jI<In0F'Qp*SEU,2u
%7ctqPS0OUd*L="p4-sFWN@heM+XZ\I6=f3T(GGfW7.1;9e+B)#l$(#E[bdXn/!JDLRgCVt';V2gJgWbX+h8/X\*O<P5%MZc6B]C_
%(EaIu_oTO*(;t<(%jD%SlemmUi#d^JX2p[TL[`Ti4GAN$5]i:f&/:"W*hVND)0uYYWD!-*qL'g*k;,JXpLcc#6u+'O#D,:7U+7S[
%&DjCcVpMClL^\&T-M0$U>?O1EQX8ge3%+<on:H-f\G#bf3-'C.U(TL"p\@7GiM0Jjs)7jZc9-N1kB6C=r]?qI&Da;3L[ahf+$sU/
%Sg+'DceWSPcG%pdO2IrfdB3%uO6Wi.8J(Bij!!YchIf63\[94jo3'LeEom.<?+L[6`^`0[2a6LM%"&b<m@:pEPB`\QIa/=F,h67U
%Gd$9%\XccWCkCR>W*VtZ+)cN@KLN^N_kT8E.Cn!l#&?I7Pl))$,UJU&pN;f'&q2Q'CIO')po#j[`-!7\`;?-FUE>X.\V%ml4[hi(
%49g)K?6F(X=F;Cd\hAkHXN_*)\%btcFP?Lu3r-@9jkGcUHAHHde?:OqP@d=VolX?.[iG(@o!&YXiUiEikic8;</c%6S?(Me)?1%C
%Kq,4#EIPU^=uu0T>Wgt&omS5YNlgZo*P;79KblE/*5BN?Te`irooRtceZ4eW%n(F8gM?(k?g*Wq]/n^)$?O1/E4uMI$h*@0]"G(F
%+h]C^i`,X8*hpimHBlmoif>[_Fn`Pb3bFcDG-EZgF`Z""lcs^N%LrFF&oY_C^Zl)ta=Fh".sqW#UMg)='4isIr%!/a44-b)"es)/
%>cnEeGsn2ISLJrCj/TJY7-X9Zid?"Wn"U#ZX#9$('OLbR?EZf&"5PKO6;)koeC&f%mP2H^iEgXn9pSRM\l\\&gm-$ogoI3[c`C*4
%qq8[J,@(>PE3CB'.=RBH'h%!kqE0._0)+W[ZnKrkIcJE-3a;A]iMjK8kX0SjhEqZu.=?9A1<\bYq>C9mq$)2UIf%a+N%"E)#]:ke
%Qsi3DA1.Z:iu=<@3@Pjm*Vb,$-^[6T$haH-ZGaVSA*#K5M#.mX3KgZ`IL1^+^r/Ld)6D"D6%F.7;oQ%EeSC]Z9M&NO+J;dnJto8H
%%t:\($gn+)m47/I@D8Fq'>@]6h[KT;r68N,VcCd.+bR[!cZ!gY25!3Vp`b_0^Po'6BEp\EA4MLIa#eD`5QSL_EAQPRJXN-E$e)Ot
%=Q#RX>,DK]Z<i7Q,)p<&T5JE_4`50T?L[W<b2f4QWooCnd3aTe*6uQV)o]k5AE_=FfnZ_G31G3Z9_unIF(UFX'g31_"rQSZTJG:;
%pn7M32=-"5V!XS;j(L8@-B`Hi<YTU&4SK`*4l0u[ner-Tk7.$`9/7D5*Q__%+r!uu@\N4b3&,:@S7'kiYM@Dnrpu,*3C9;[Rn&%I
%V:LSXPU>@#(sk]6)(p*U3'leRZ\X1I2+cYDA1X5ID(VR6-_I>Y$5+UicP,8F'eEMg#(!;>k"HKW6:0VC4s\p%^O[FLmIE#^^]e,T
%^gQ,pZ8,=PK9%N%d>3ll)EKQ*o6F@"Vt38mUMcZjG3E4"@t6,LI6b/_a`cYhZQ'"pcr:.#(I#F';)7=aIH-hT]'-fUk+MEMHC)"D
%h=6bWd;>`/CkSl%s+&fMHu;P9.8;Dr"LD^redBYL:&uk^n[Mj\Y>W.IGRjr<\Qnb=:tg1X/f!_s!'X4MK43?B,g"-ei(XR.7L1i=
%ARI+H(KFP_i_*]VOH^4g+(=;<29`CK44'-U^._9BC2KFE:/huS*Ath4#WqXlCl/>q3\keBJ]5%i3GTLY?HYmI*=7ktmr+8fP&_P(
%[)mHNTZ,pNUm5nUda_#TB\<Cf#%`CDm0QF*_&5Au+sdE8jK+ri8\r6@:OX)Ad?rg9RO'T:WdloN#Z(a3.'DlEPGOH;^e*.Jdq`\j
%&uf3_=\,k'$Uq$2r_i=*Q0tObh,VMdQtar$>E]mKE6nHn70,L$as>4Mdi1-d-heqB^D=:!B3;K`N\"JD(6$&>AGT2eOAJDK[:sp&
%3^D@WA;$i/La^o1a<,Nj$TPKrMTd6EkBo50=P8,*b"-d(*m(@A#EJ8S]l+%cD4#edA`0ue5(M=E7Pt3-L\#YYd`#R+KSN)h!X=_H
%HqCKa%"A]O).f#$DfZDh%dh=6YjIfba61E$iCVsQ8@lVI_V;kc6q3'?O&>02J0[L59HZ5opO.MI('9HJdu@@gpI"KEd?$@=IrreO
%TBZK?V&>eWo/8EC(+KB]Z809f9<3La=H"sGC5gC=X=LW]1L"K9iJQB?+O9iQ)gda)=b<3iC0A>ns7n"#iT-_b^S.aaOFB=SiV<*O
%Y;u<8<ZZnXq!D?b]79&u5*#mjA9EGW"]J*^*gbQJ.UlAhhJUiE[mOc"V\!Z59L1F]j\4.?QU3BK_Xb.nglr!K.e_nkmTRqjoYrnm
%*YLjG43s@nm-M?oO$g!@:f9Wi"Xfsa?)2A:-"Lf.g4i;3BO9:96ait>D(M4%7j<U:+KR94@9qrS:PJJqc8GCq,KiaGQ/@OT$-uB7
%O5)0EG)XuZ(EhS4QpY:*Y^ucJMr[Z?7C!,H"p!qp89HcPCVo-pP$+ju7bsMDB^)Yr(bIj>cgeWT4^("tG>,9IM?L!kIt-4reg7cO
%q$o*51Y*O$?Ei<F$k&RMF/e0YqqD]oY-/-RX%uu!$!%8+(OHfSmB,WGa8I"hU+$6X%rsdXH[D:coc'u(&f:W9RlFhAVClYTMAYif
%fh.i60W^Ys^qt2AM)38$,?P%I!N8k#\4#96o/C"p^RD_1]54Tn4K);V?BDa7kLhP4iLs!h^!H0-_1RZYl/jc]T[^=9)>iX-,=jLB
%n/Tr6,;@t+3(oO_5mS$7!q*m>r.$1M.64Hu$6/.\MT.ouF]Re\d2O5S*-NG^fNcbDcubY?\>n*W%n&q$YUff>ISR-=G=gV#L>r+%
%D1ef5CO.I*e.7B35Y;<#Eh:9kkiks>r+;(K7'k9!\+j.4ZT)I!VLbgZ<"q,hcG(>bAkjGs%bK_=D-=.762<VDQ7\;4pi]J&GZ+(R
%OF](C9s#0OF:>FXjcg-RaY=7>JbG"U[oeZKiUm@f;(OVe,p5Y&H;A3"W/*<A#'7meK(+o/04)U,q3WBdMa<CNZ.KWsOqM2Ei7-m`
%X!2;;%>4fkNugZDC!C9mMhdRA+]e1rDGi"t3u%r8N"LY2Z'WdGJ.4dI0@,jkX+3c=C[2/2)^*G&koSQ/d#kVii/pBJr@ELP/42oB
%R2l4C-&m('1g)lJ.E_4TqfNSp'*i^LL@0U^Uqo<[DeiRCo<R7-8s\@D0=QPaY0c5s#>jPZddc4nq+s;5Utpq#'oklP5+Ko>lD(Uh
%m*&3Kg`lsZhdY-mf,T-RB2)$Q_?&g)&XO=KB`$(LB,X+OShE7Qi8FV*,_Q7[p?uE]Y!eAo=FcLS.V:]s&J/o3^L9_5M+b@aGZY!!
%LJ,GKErF4mAfL6#1EMH`dL;FU0ZnCrrd"Yo#7i+S"-aF+!Bo,-84V^5P$iIHU;:<Dj_:-ioD'`gV(c4`re$T!.k1\jDq!eY1kT0W
%!a%^j,c^7<V#J.ea0*g,'fCG:6*+e>Ec/Cd.cgiG%%H;uK/k9lNOSLT!/]o":rSuWg66?uTtKp6Ekk3(4_LWX@FD$^q,todnm`Xj
%[HS:RC9)pn$Lf'Mp5,66qJG.%)_s>G3@AgqHs"1g`ISNY[XjR";T*SB@)+Z*1]]m29nV,T.7#((&G0mRifAViO_/qeno6A;/>m&'
%B7V/M1?ZaA!(bSCH*cHESU3WSYiT+Fc#<e:+bQ7]FUqt8E)(B9S6O8n_ifH3N-4P/9keSG/;TP[)hfUX=9e^<`^\o(+dk+tq=&!l
%:CR>a3k/6IHY??IP7^4\`qD#o3Z[959G(^:GFBcZ7p=Kp40pl%c1;Zh&J:hB99.l6QuRH0f)U,@f%XjM]>t9CHm<qmCZf+Q2uu]g
%@S.2[)--HCHFY/@)9Bhf6Za26k8o!`]BB&n>i-A#`>XF[#0<c^ZT!QqqcdENK!&lckGWn;%>bQUN$9p&B'"/jl\Sd=EP=0m:e0&T
%f5)-4QN4F^)(b$VcK_k$GhsHmeqa4T:-l:GHL1O/HcF3Km1X<5^;AqqlN>P%^6L:CT[T"g8F]B1GkVKt1/b_X$5Bm6IY4*O89j2O
%CbtV;iV>lP#6lr\WB1_X!G=\lACi^%>ObO@ZOTGOU]cJ^4QE>&K(qA\Y)CajO)"KFJ2rg4XDpN9@OXso\5k(I$Z&ni5QpRI-PIj1
%)o)qC8;K_k%fgYQ,qpG9ZsjA2[&kS,%Bcr'^fgsY#Kc/*.oKf'UI/$IH1*"')W./Q!Q>"_ReCHj#;JOFG4FZt#iIp70X2Z1C\4'8
%&rQe4^=teTLfmJ@c`=]_`\issmT#)S#!]rEcte0W&KjMUVH8hFmKue+n$pUW.gWVUPOi"6)$q5s+^%e5!'`O_k9Q0;B,U+Ih]1%g
%$*;!(ih.q9s+LgJ=oX!pn^p7@p0n.7M)bU:OE1^1*A/HBG9(BmZk$#29U3K12PCd:=bZpf)?ZB]e0,ZSpb@I!,!$2SNRSsX0`Q$G
%arVH`s5EpYD1f5-M20:2[a_KIo75gR*D;@T="<(8bcqEcJ;WL5gT8j*`(qlgcRG>6k(jdKDT;F%leQScR"R_6iYLn<'idODMstM0
%CEQ4<+@_dFBm!,"_C,""P!E^*.7g9"&Uq?>9Vf(\cqQra<EhL`-s=UEe)Ql^='.?d2DmI8!okUrXta3^A@j97Y!"65+;q$`o5%0-
%Y[*jdY=4$"/ie45-BVuYVd5e8<"UgEo?>?3S0/b[7P%.X6.06t&#f:gTJ9\C!u`,sb*><;P"_7?8AuGT>igT0H.LsOH:.N_<'>[N
%?J\&2V(*PL!FH(JI8CQA[Et;@P.BIa%VT%c[!pU-72[j/3$gs5!D,9RmMB2s!JjdQ7?bkGnS)1'7W^pKSU[<WH;na&5>Pj/,=@Mh
%D,#q)H:TM8,Z$9>c;UCWPV+!_!%U"GU)?iW%-:QH8]A5.TPOljQ-<!Y#aON2i^h95T+`2i"u.p*n!+`!L*b3Ak(LbAa?a*fl4X)E
%Ce8(HZI6TP`OgqGF&C=LIX;is@C$FZ-^]cRF&fC-*G8J5F+n0be`M[.*+X3k^f;Z7jfd8F@k?p[j;<\YIJhN][`U!O62o%u6NZFi
%::4g2+L<\&3]e4BhYVmpe5pT]+C%qIFBTL<F;#GRcaUsk"\SDL]-Ai+]B2LpYCk7\b']Qt,+iM*S"M7PS+(Y:2fLE5@/*"'GD>0a
%)ap#5oGFY+Q^se^M*V/M6r8c()UCp&K',R%)4c1/:t#Nn:VJ6=/VrpCnR/P&PppWQ0p05.-e<$)&E84$C((>;-a.0;RlPaFm&K?k
%ZQPElKqfnu^-r`#,bqt.L[G4cOZCqLPie[[aU7!,Kqka30$..93/g2Pf;*7;Krqms*I^ZU6KCrcWS:N%/mFcT_5*##%BF+Hq_L%a
%6d'13PoM3@W/?IWO+A@*Vg956_G2\#E>iYX<.kha_*KP/k[t)s&iuE`&"9fJAhm\+F^YF!)iT[m0g/5F7]7+=.Qis:d"C6Z8gei?
%7#LS?U#"p3.%)'bkp;7EC4h,#'@i,%.aAXc(Xf9/5^3SY#J=qJpT[M.1sOl^(Gub!k2KC4JQs6%p0_A9F!V_\Y*1,K?mLu6(R$jK
%O;\4IV[>\jRNORo=?#m=R=221d'D#GQ,K.Z[RiFEMofV9Z3UY&+BWL7RY`^$()K9+d9mOrGQ6M4l=eMYo]uW&U<@6$./STaj-m8h
%ROV2I4I_%V2,#)ZXSMVRD,W!m(r4oREbRt'$f\:fIE_R84TVB[F^J:hBRZhQnA7?cRU\>`^`(u>ALZutY=](\'*,=BK'26mqa*3^
%^='>4kKK29dK'!7U@0iS!N"J8f=$Lg!Pl5!p)LG+BKP)&e!gp!jaB]JCOpJM5#GNVrS8P+``#VbDa((4[m;<dT;46k&"7Sm5==e?
%n@R'F,J]LM(c\GH/g*/Q93=C[%TgI#JD]@sTSjZ(_1oZ2,JD*D:oK!%"&1:lQf?MJ_qO.]ZA[@I\*DO*U@5o;7^BQhTP'9dA2*%7
%patPBN0R_R2o%Fi6C0%"L-lfc)J@8-"SThB5*1bPr[5thP$JAQVRC<fk*qV50BsSZ5Cg@sXT9WGdTiu^\/iUi2mK3]hrT]5o0e\F
%#-Z69-LR'Z0nkl+ODYC]"XU3.>Y6liJ#ji1a9KP!!u[/-D?_F":mcjJ\R#iU8^UO<LZ_%QFO8F4\Rjj^LMt>r)1H;Km$k4_Z6ZMl
%U&rP!#,Tq@!RM!^O.K/j6S8\CV$T0f1hP.BnA+$:ELaQ$.N.Ppg8-_f%l2#tS(!Cb@#!M4WIjGfq(\mEf:B>qOEA6R[[%XFK)niE
%P0Gn>R<Vrd5mP/)4>E40A64)bK+:IUgE?]Pq]MrF0o!8ci'-)AY:p&($uPN:9S)m'Z6tTc4!01(Y0JRmQ"4f[1/2<%Uu0TCI4@)7
%V(6C?o2<"DVjqoPGET^#%X>dq\Y+LVm^*[#k!!^-1hm7.)I-F'L;GsEL'4TP_ocEE.)QiaH;r'j#T(PfO_&'URfsG.'-WA)9<@UB
%<&4,7)<hhX;6_D!crai-PU=reMS+D1[JKPB(WCPTf\D-+]d-8K*ctS'fnSe[--3]<ehQ$5^a@7:TfS><)FNBUOYr;n+:uO+(4X5'
%m>RGu:mGC!eB%<$>-`20W7nksbBqR_]]C2iC*6O]1-tsq]<\\\npj@G:YXZ34@K#0i,)F7'9F5=*EPu.QT2`JGhF59D+_YZn,(ik
%_[HMu2OL`dOq@-_k8VgqHt-Cb6YWpb@g(:5Ij(1`2E_Zma?]HZ+^@5X5V&Mo>BW/9GU1>GRHik?OL"7Ei`38s]]Z2:>Os"Hm'qmB
%o"#1X8(74[cG^nr9Q1qeXu#Q)MC4d"]MYEO/Sm,*%i:[$gli(CihOo9TiT7IY;b9m5jV?:UH/\^#m2[GGTIYH(J@*G(iLYlfSMo8
%R(O$b!$Nln%EClX3u0"UlW?c%n31Tgn&YL<dgYX,Etr^CifE7GIEjT[;/#r`j?!uaA!HMF+iU7:7PF')_N@rWFCuPW+fmEaM"`-o
%X'QWFY?4#F0P>lW(B#pWkeIPL.;Ut3R9T9L=j4)oIGMRHBMG%qO\MfG`Xqk_JkJs=cR04`Rk>;,`hKX.A2:'DUnftqW)<;i?nL+0
%&"*G^Uo/*:#6VVX#ktA0\Q@m2pp_/-eM\R[/r'SqNhQ;dNM.8keUiCb]+B$hNK0Zc^^iqS>^Rl-2npRn\qRW5WJ[Xi.T)Pfc'!fH
%HI]k;3bp`Q936n``SAfaeOoN@?r8OiCFr6cGaM%YgUGRii`Dg>#\s\2*]'H;0U/)dPnj':%"WT_RK9UGZGJFmV,Ji,C>,pXqoZrF
%#3K#!Jr;W0p&Quu^]PgI30OA)s"5o2fW++.7!QI[&M>Xp+;ls5*Me<!@<s<45ok"h"%`@AX8`%VWfK(?.]D,oQ^<5@8).8`%A!kf
%)pf"YRF-[OYJ**F-eT^tbg1,KI.`I2FW#e9&AcCI^^Cf*m_=Hbh&$)a`0n%iba`V0)Min*D1Lj5+hUW,;M?2'O`3Ei?62:LdGp[q
%qCkO?3l5%2^HrT.&]0o'F)"#"+@E6Z,r/SHNSk-J5hG^%?nE6@VZ_uu%?G(_LoIW.LXB;L/o!TN0$1?d]J^5UOtj`lZWpLLaLPF0
%IkWf9(V.Qe>oR]TUA:TKYJmj.-5SeOX3afpcMks*D[@'9_J['n#tJPD<:n[>W+Yk^K.-"c_h#7"XlYtQdMHA3!g`pULJhqgb&l0c
%$CTFB[j%[NbG9O;pI<+o25X"\4,BEMRUNRkn3r`^K9q:\aeFsYa)0';9ee(`fX$O#,%F)e\+jc%@bG6[?;ZN3a0\id>mGgoPr`?Z
%6#F\`0BRs2,42QVVeIOEI$.kkNm_Ad&I;i;M#rp#Lu`!+EEE?<#mZd$mEcj^2utLYDFsXb%0?A3c?P$MB>ku]N5*Oc3"o`uo,(mh
%ZK)4a<#AnnKn49j9\stsa?>Fpfe?i'Tk+-7mqZBBER8U;f9AiJ,2n]Cigfac9/'\?;+)bk.Vf1breaoc'uds=!0F;/.5ijtW9/@%
%%f9"74-hjpKb8kZP^AY<fP"Ikq31T"1YgnL/>cXgi7RiLIh6VF)Au6_fMDi?pNn3ObX8bL^2$X6m!"aRA2.h/G]6>Zm@]V=qL2'`
%$DTOEQ!7+pmMt,B`F^+2$>i)0NNjOsf06uM(_QYG.;-`+:"hcs)+[1]`/9sUF%8r^3DD2'.bWJ%1D7u(AMqJ+6r^AT!()KjPZUY9
%oXSp[.](%%$;2f2-FK`ATT&0'.H.P1I3%;3FLd86,"*\pbrL->W.X2@2&/1Y0Hc^BaSV[jC&*?O`iD_+.r#D7H=K8%.V8I%72&?W
%WOu",3co.9_Z]b537A`.PT"9g!;A#/:Z:c:(-iP'Pcf[D$knHI4S$p(=8\6_VG'2U'\?L<1oMR\/qG7-68AbhdLL2DNq0,ZTh@VG
%8ZUktgg"SL-@2%'mOuT57WKWE-9n`5Us&90P\>T<5n/=4ocE*mK_F46"$EeVit0-dM"\#RJcQ%aYZ<b%-/pS']>u<fWYV9B/0D$$
%/c=`IAtZ:@';RC&i)5f5)9OM`Ait<,'P9;(!i,N*#U1Ue2,>$B:05,d.>D)IqUhUG#`7_:)oVu<^,7a'5h]BHk]HYF8r=`SKrcoa
%;CXL"Z`oaG!VN$(N`nnMA'a>*>@u,>3+W7CS,)R`WnH9q'WF]B7aDS7WA:VEaTWoAgCqMuOogH\[VuBNn*##T@Kdi;hK4..`Y:iK
%Q.IH7-`s*\N!cpf))2n^%rMBq6oA,E+^g:8f@\[)^PRO#5P2)Ke_@/_]mWtF*rC]`L9+R"Cm\k*^@F*Hl.2#oc8'%O@O0.9@Au;$
%SY84skpB)I6EL),S.JnGfQ#FtiaVh#E#2[/#^YD=ZZT0X:e;"=,7T\88V-4F'h>]aZg(l,8Hg%-$r`i^%5+nCCBYh1qn673#bP?^
%)Pk!NIZ>;phl[FXS[T(Hn;.(E"qcsQDbL_L`(J-(,ToN6lEIrp1],GMO/eI%5o)?^]*LVh#Uro3KkMnnUi2`nW$*FEAY2&)2q)N8
%9*Io<WbY/GQ#jbGL1ls4hGGi[)Qu>i9#c5dElmYDe0i<^fU#^STYf6l;m[Rt/EON_?)h>X/F[k@.dn"HX%T;^aAQS5Zq'm-W@WJl
%X*Z:I@(CWo=TRFWHNHL`]G<CT#'alV0fi!^UV8rg(MF<JF0QR*$raRt9Z'@s%&Z&nm4-[!rAi;8D=?:ATIZ#C<GZ]:VQK@5*Kq6#
%6b3jq=3aj'k.)p5!0p/Aij-[C@``'.L(a[5.BLoCMeG'kr/*2E_R@R*SlqO][A\]8WHRs26!*'X>Z1f1WdeL#V)s<'BIL?qHLW-$
%4-*\Ef:/_mF&5:*b9L&2f75Zba&-(^;lWUfX4WR^/C.i@2YM$CM)M\.ko*$3I8R9"Tl`5P.;m%/>SU"Q#S!,jbfRm^Z`P)WMBTlt
%5UTXA].oKGJAY+K+jb>\\7VJ"S-s+h,6M5eZdr=LA\pW)3Qd\T=T=:0j`&.>9mB]<K%`F"6P"5->([4)T1_N$.*i\maAr!;?!@Kl
%6?lQ@_Q/(c298Hq:Jd`2YnW*<ZpnXFOGb<d!:20"AX&\gPt5"0JG3Kl<s6.(YN!*o]kg;]4G"m%fVBhWFa)E[Y>&40\<82BMoX.%
%MM2p:WWP-(9;GqAJZBJ'?n=B^gG3BfjIJpc1s)Zt,R/6\<DQ](i/Pe*!q'=>!8,)kr^3hZMT2e%Cf*]ujN6biGXl1_N_dQ/VehWK
%&\36?99WS%E,B=2439:c!$SB2DpR<V8gUdkfg$a>jGHC$3NsdF;+;c^DhcGDX]H%aXF/07qSZ=g<<8CP2ndGLeh+C\WE!+Md)6in
%W67AO`n7LN]Iet7+G=O?*aYB0+jmb2MsYrCG+X`\hA+Pr.put:&SiuOoa&.9XZboDCP\Qmmo&nka9'TNOfJZ>D1KjmTb\5M6+r^\
%2hCe1^4rcLRLIE0dONGZckIYm_BZG=^br8,hURq`!;)dn15`FFr8Yop,$H_Z>?FkK9<1`V!$Z87Dm@Hc:2\;hCL@9M6s`9`G(spH
%$WGbS_Uo.B3Q"NJ^94D6St[)f:BKGRU]tij1K!c)#IOY@X;q3.(R9_bNeAo0S`8hjnV:+M0:O9nVK'emXMD8%:GJX+ilYAXWj6/m
%elK@YW-L6>H"J2[92(IfPdHFljOtps7ne4\RWN^uDB:DlG[MLZlYLbKr07fRrU'W59AcuK^*22#%70;us7Cg>Du])%q9T**5CP]^
%e%bdG^AWQ]p*Kb+c+E1H=gZdc1f*+l+,E<`AZ=bam,m,7afp^0PrsPiHne(g4Z<o2aXT\tbDa1JLg8/DU5"1?/eo+A&H7`R=mkgf
%`"=\>5GF>dPo)"3195;JX(kJ6#Ac>MIB4/LXf2.Sk`dhk.)@_s,c&7_<4mj;_O7\(AQC?N&JJA.TfdoaYp^tHl>^rD[K"LP=I'D!
%)6EIJ:=UpTfn)U()&2!Ds*B`hK#%pnXO9mKoGCQl2"leQPNR)1F;P#1Dcng-R>C`8l@9`\30um-3!6eQ,$7R)ZnP'+0H)WtG]C07
%<Xla8\_mkSM%%:ZOG-t_>lF=BlCVTt5Gne,5#fm83g]jX++f%5_";Iu'(hEI2+On;n$dZ)bGHfS'(nn5oBa[J0AS83<7J<%1Yg3b
%'`M(b4!`PnAH\,Q6)NpQA"&/OZGDRtf/9T`\h8Ie*'=@M9^"j11f[i6.WB*rI/ctVAK@mT*jQ<tZ@!j\G_>Mo)/7h2<Q6C"g!uu3
%o;9UeP'mmOm8S2&RE#iA%6b&p_[5+*:(G1Q./c.\UH>\%mu33Nasn!jkiU-i.\Zn,,VhHaj\<O?7\0o4C+@_@G;p=t%K<MEZ2Vb$
%MLfmPi/j@$<h'2KWR8XmeJb^F8R*Y+G80qjU'.nAj's$6#Xlpl*4o=/]Pn**2fnMm[&W,cVFh]VPJ?.s)>%K[$tqJ0Ep*/XO=JC!
%\+fPm'mL@+(A$nLZ=g/2kY`^#>qIc17a\'$4>)sfUI;A*h*cq\N8`Sb"LZ+BA!s>e65f9/.ds'37)<]_dT:<S2n*S1fc:;$\'aD_
%9be:lFJ+g7A>j]2o>ted5aBLgjXEV*!NVonl\69@=Q"s+;e9[Al=ADc6_,#\p7V!&&bYOXA)Zlto_]*sQbWK3ShSO!q<.@G1`\mX
%gHY^B(Z>p?E)jl)V:&V&!Lp$k\l`_6QQr^C^KeFZ`?kE@aBK.IO>"M3\_-(YgatNZjI_]I/ukhmIpu+H$A(:T%AUNf"\ciB+c7.-
%=,3m=6E;e,-GecRe`MBEPY&#Z8*-qU+Vn_50qUJ=,uPo/1%/D1bos6=39EAlbGeH^N7HY"1!^[(R#F?.C)K2-`G'j_n=*>kcOPS>
%G'/WPUgrg.hG`O5@e's$3/34M.g9eO'#t,<Es'$WI:^0@Ad_a$8\]WW=_WGFc;?"XS%!pNp<3\5L1`]oN-($UC!U$BoFqOcJ_>q&
%^ba;&4&/dOO#uRZp`%@(fI^0K7uEP'aYbCX!@Rcc/6fBq?QLCQk2HH;0C:S^[!9]X[U#"5D9VthE\PmunN&#BQoS8l_NiZ^U9_.4
%C+Reh`[(4gER`E3poa0_7Uo[+DL%A6#GIT2Z[-'E!TO*AcYPX"4*g=Co8$5;%X8^^9JO?ud2^"T-d`:VEpY[8BMaq:b?(s<QQ/aV
%iWF)o8i#^VQBOB3?`-YC.eII"CnWbsR_b(;71(6l[AJKtDb@r?\ojBLC^n#A%=f&fja6C8F6T$PmE-)/7dQK)kfT[E>^85?m#;ma
%*pf'Zb?N>G.Jem$6N`4!@F\#(c+81qUH,90bWWUZs&p)`!PS'I.>Pi:q,6S!Lf6@r3I:[dl%;aA'"XLar#JPC,'GE*`!WMS0+mp8
%Oji3^(b2g1?*EU`.>9QWrs!DR#;;JTG>%:dQhJ&tVJD&%Y,OD?;R]f[H0lCD8oqghYb?<V_GfsF;cP@u%G0k7,dU"t>l])mhu(uZ
%XANJ(,V#cnb-itCZk`g`29Yg`UUP1ua\K8GGfDd3]CJmdPaonU`E1e$\$`XAPA"ZK5@d2_$o\2+h=9@F\*)bR@`m40)7i=^gb-!m
%XGY4%.Z-.NaL9cCS9h>V/8@Y%L&PC<&$q3s('\Jsl?$FUYCjlLQlB!.O/bRJYQZ%>LW,q.\33t2Ob\cI#>[6K'R!d-ih8tiQ8n3U
%!\Q*:es%dR5ZmGJ1PM5!*_qg!U7GkM[4UGX2e7*B[BXP08bHuPiX)iOal0_68Bsm,7?9c$kp',OT60I!![,L9YOK=@W@$i!l",`E
%2TWL"g5TA^nXj(VTpk:V^F,5Q&BtMne'g^Y#Ko5N=$It#3oN=V),iF5!LE_'5`d^nED(75P')@nnYj)d:UGtba<GB<I564C!7eNb
%g,jG5fX;>?+Q4+sp$>Ne/4ZWDb>>YEjpM+(!]nmpf;^9$kJSU5H*4&U$:+1-q`*,f&MJkN&@m^Cku1rVAl/i0Y;-F0mYf*RVFW:,
%]\IuYkGMJ_1*T2&e`dCn]g#L16qI[o7E`,(6$BXgN6;g9DR06f?R/K'\b:e:f<f'DVi"*tY9t*((eKS\4VHJfj=E'Ugfq34T`_j1
%Y24M(jq&M+>#N<ScdHnZ9].>2N?*!pnm.F.X^e^(T/\'n1lAIdMRt0_F5"gU%9g_lA4=8u^j2Yp_?ZW,,WFC]35=1s7hMg>OIo#'
%+Et3^AgN6AZ),(4c^`(l<V!H+LrPB5pWRXeMNX,jlNiHqcLo2N\6'DhUsT93&02Z$,)bMYNE_;Vm#6h=@U]<fF]D0O\%Irs=.1th
%"3(EG04@O&?OuPOZ^VDLR;(s6dt,IP4H!4@%FMi4%[RENDn7>J:T0Xe?9,%OBZGVEA`RCE9#PYLU.Hh33CmK7bGrR@MVj3#2i!J7
%Ot)d`^=0":%a7CV2`EC:3Yr+e$U$pYl@]YcdO2.Xn_]l;9YRpcg`:CdG6'$d.o8pF*86@HQ=/b136SYola\J^)f.0%G>qTE,dnrH
%ij,o+1h\3<U-P_c*[sr48Y-ci1[a<968J>6W390No27]n6M[;k#eXF,$ks+>AS0P-Mr=4]Kp()VnTl\mpNVpZP?6\5WjTs@=*2)9
%LoXa4aM!Gd9.)bp:uERUcYkS1)EY5tJ9@+4W`@9UR]HLR&EQIC7]9H6c?A,n%,JTE8HaFU#lp,]+@&nG`%3^Y1V5A8=0FAT@0fEG
%IKk^'k`O!H+Tt1>`?kA%qGLCPJ+[OF#[>S.:9UH`\?c<]P^mRd*Q%j8mD$=$Du]Iu^AYP@.Ps\\eC&".nYV73eB9mD!K)iE@j+gF
%4;@I`0e--AdLJ:A)$8FLa!SP-l:&0[*F1+#I_p6D6)k_`iH:)iN"GN4IYt!fn&BubTF5@Lpo3$@8X^a$(='l>NJn*NPm]f+""tp?
%njXL$3"juF7"_;&Hc$,G#,*h87,t<5g/aLb)b<;r13,E%"nVo4ro]hF@@AjD:9S"V1",a@Dba\#6cN*V%sdVCS1p&:!?CY_8O4R4
%'Kt\Y*9f%qnX#32`Q1!e=kRs'3O1KrIFtc1JNY8ARttaDmI;'I0d@kLV?gg7]c\UX:6@e"$2_#R5":&;C$g_5`h/#7Ja8ZEpg0EK
%e[.'mdr0DL+WHD)"EA8Q].'B6JG`Ao8Lmjs+gTKLDLm=;RjOq>_Od$I1:\$e:6G-S5/\(V-^/^)*ZucRBMZ`M9ZsQlbS#$iHe%-Z
%a\/MdTP-hF2A"k=j%3aV''R[;+=?Xh@%FhaRl%-%fW:APjJJ=`g>t-uG#QY9m3HS;Yu>sfk)`)dHVE1SoJ@%J]($m<BgtLD`.pa2
%rbbfkosnfL`-j&1DodKY9BUg)oH-9rbCBGUAr5a=fDjjC+ds.=*+DIr#g)gnFt6MiQgB@1V#5?i?A%*d,'d-S7=g:83[c1:GEXLi
%KQ%)mFko)aX1rnLg<O:a+PZTk(_`V"@mp2T)gMS:DFHEfOR3ZR%V/'/<dON2DXu>ON^CC+Zui-u`FPl7B\u\?mpd$G/eP-rmY560
%:I7SRHWeK3\G!j##97@[GYi8g^qjn`>6:9X&U6WehXqXQ[G^L%=;&A2YC\2q0)oO>3(EsmGOGG#4JX5TCd!md.m!8+N#VoP:@WMr
%D\(ON3I=CY:Ijt7C-bG_FiutiC+%YX2+bp2@?sr56&U/HOf.*>a=6FI*G5[4k&=1p_4qD"q;]=60[tq)<4Q2p-C)T0)O2pp%>u^J
%qIg%](uo^JFK`j%;6hVP=^&Lhc9L`4Y)08Qs*>XRiujcQo>i\PppGn<n$cMeOJY-tjn#b)^63c:I2WslO4,\q:[[Ou<BB@'(BLSX
%%ogV!,q',gMOf[kAp"l?hh8;(UFeUA#*S_(<=0r7d<Qb!kH`RYMF93*B*$qY*$M^IU'q+>+O#mFhuh/PbOFV771_RU8C-gK2G_86
%D*&4g':VS]TrpMp3[&UBkDfPaOe:@f';R;VLUFm9$-m.rl?$^RmL]=RF!#?#SHcsG3V?4=TNV'A2hVHqOGD-d#fmNC*idkE6MUBM
%J%o5M`L$1BXbAuHC[0m1CG#JK>3%=0ce!m_f;=$RgNThPQ;cFa@,'fcQt]#uDqX;P<lKUga\SS,U.+<NO=)Z#>ZgP%8W1&2K)LK>
%Xb%qN1g7X(iB(5*V&V'7+![hdRXH(,/\=O(,5)oW6-uUmQ][Cg4>+Lt(o#S^M6VI`$4[Q:J<7e'R_lVEeK31(59;SeV1>$4Ht+mG
%[lP[I*_!4p<'gZ#oIjm$cN[o&0AJjaX0C;g&M(KLrMF)-WJ:']/VGNi$!YrMDt#^L\(,AJh@c>r[Xb@;+o.%]^A7H%?XE9k\,YIt
%A@'E=<(AKh4ClDbkYEP@9?8l'O-.uLnOdHE<\0J><`MV=95(aie^*Y!iLU\DnEVM%ndb[A=[]@9r)Y:DGEaZH*:s>?J0_#_kJ1:n
%f(*\hO!rMmcS!,K\Ji,P&X@dTGD]`-p\*Ma@]S:of?YJ3p>EW]_1:tZli(nmJE>[<^:,iKq/U9"3VF;qRkaj>5G]3u()d`!eZ:/.
%779Asl;[ui<fkJ,V"IXL+R24C,+M4D<E7h'E%0:'O6e;(#1e27DC!\2f#UJ7/W]8%[rt'=WsR'C(s:&=Lag0."@ainWi0*#*="#O
%UMQ(6H8$o#*h3eJlc6%+`@+1Y;OpP6Jgl=Ahk+hhX*K:HB@1Ro7Cs_q<?fusk$d$<@SlChNU7gCXY4-;;/.GKe<]sYTJ<5.XL@AE
%It'fle&;atItZFR3-LasVn45kbIPRq0QQLe'R^e';k%AFG_\iMXkM>H`'0A8d`(5sM1FE;4%QXhd)3-CWNSZUAKqugbkCQQMdi4`
%b?K_@l)IeAZGjY%?C9mX!)*6W_tf?<lYb@!<W<)fKL(`M6oFBq3.b<lC+0Zpb0b&WVB\X1Y-1cg&ul+(UuEC.m$VSmh0cjmOR3Mo
%9sSSoFc9YWYU8nL8rmC>%s<(d+,[/G8YA_G5mTr3QLfE>$,r]\cUGPtr.&O@_>=QJ;-Q=DfuOF\+N_I.6RDdsNmKK17)GE_%Ac\c
%]&8fTQni`f+@.g_rl4fGD1d<sU>Lt^Xl\^Xf[Q(s:Qb4`pBH1H2qnhY47AO_4#Bb?8Ci2sQ.Ojh6VX4'P%;`cIa$]<]3Vs"Om<8P
%Pd>(l(qsnLR['V.nZ)k?a2*]!^_4mIXdCk(eMOX+1T;"4f8")b+\bu4X`Y:AJf0Fujb3Ha4m9#HSQIZr-$H=:BVdj+NjO8P)&.KK
%Xe6NLlJW'CW&,Hnm(HC5",)^rD#pHa<EO&``CNY:88tHLqfYq/KUO(iQM<a4:[tHl`f$R#D5],nTrB.ibWAc=6qdFEdT*@a/\OBU
%'uMH:5D?[X\@:W!U9=i1aPmDc_BPMVV>S\Bm"mQtAo<lf`*?dWJ4jN0!i1Fg(T#Zr:g3dq\'fm,XA5?1,Q;r.X]/M@KVT6:>Al7E
%TjW'm/tqYMfFH0FLlpseDq2hTAEj'>?2R*bdgG2joturCVtOSldiA8<lAI/J"^>'b!j;hjRM;,=;HJ,B%O/'V]QjZ]%i5(AKeWj>
%p599q<Q]8f3_\K/4<@*geW6QAW%i0-Pr47:j7$9$C,5=gjmf(f=RhkIF^(1uBM;b]1U<m7XXCInI`3%2[m%]N?.XBQ1d3qOLO*C"
%\,9!:1tGnZmArsWkr5>QQoY\NSAp"+[4g#G[+`:pQ_/S^P4[p>@4>mA8:1KB^Ld./+:ec\AZ3ttpJ+jEF>hbq3&l=g1kH'Od;%[]
%n8Dk!CI&Oiai0!_5#(ji>Q?B3$eGs3(sWXhX+CmW]i)pP.&1<d<\Z"da+-GhVb@R@%uE?920Q=uIH79AjL4J`VsDW[n/:t3;SS?8
%:E0cg*lLLeo6!"LCrJO&*+ies&I[um?\WlX=,A\GE#8&"W`_tsP+qQj*,\<&<k+MZ_h)c<U:ubQBo3`K(-GKlRA:,&dh')-^8_g6
%XU%6F"r\=>==u0bj#EO@c]mU#Q3"FLI"aju_h*'%R3d<OdF@Whj@q(Rha02.C[QbpkMZF"c3d`)k>\[jappHQ?kYha:s)4+F`n':
%ii4<^&kP)ke=)]'MgLlja,;5]d;VX"&6tJ5ceHti5AYZKJW-Le7Qbp#%r-[`ei_huJHSnF=1k_ZeKju@/A*%GI7TH\Tm^6jl*9q$
%U/UELhRnT!`hgn$XX#hTr:KAr0B7nk>s)=s"f7a;i58tj"2:M#(NL`ZhUcO:TXIR:)9foVchdujdHA@9MNR%9(+/aQ_.W0^W!>WX
%^eaF>_3$o[K([NK-(?f.^$(udaG"l.#n"b>PPO6-oZ!O_aa.2HM4lr"Gooo^[i47+5o.G2RU!0RFf[$AkOZ=i]ATocPc`T:/G5^4
%"oT7[&_bLY2T/b%0dt3S?%FOQQ126X6*:_HFG7"cD!KPWJoHlY1m7R8.+:b23hVkYmG"NS.(*,q]M+`\_.UUIZQBhplF%TVbX+A!
%Lqmr-I05N&&aGPgb<5!X'c_cs]PgoMX!/%*'!uW5M%(54Zh?0G?qZWS%d(2qb"Tp%(+e5t86Ti4eoa*2PFn!^2rnFgLCBS=845"[
%bltGN,rOA>A<<)i#Gpc0DSa2p#J6aF=`F#9&X'DH*3#KjAER1)A7X]k^64+]MC7[Bk9`O_s8KdkS>@-hK`gu+6k5/K7$fQp%U=P'
%FH'M+,$_#$GENIQ8%=E+[VR!;^qP183Lj8qmk.mf[PiLDEJNJMZ2:J[VC5>]%`7-&AE[H/-R^fi]?$7_b$pY0+M],QY$qZ%7[5s*
%OTi_-Ws&P?*9XE(b#JhPeegc7PF'Ag&%;>5`E#!%1+BQq9d9AXYthRog[<*<V^l7"BbR6`@1,HNLurDfL?Mp^=slAkh+o;&M]B+<
%UrsKi8n`2K-b:!h.@Wi&D\^/U.6Ar`<LLX<Jh54n;U%'YPVM"C>&5u+/Yc^O2;'<#fb4foCU$0\gC&LYZ+(h_DdTrgf!Bi[:0!&e
%nOUV)aU7#il&QiK.k#TX+hWVVV<P&UXcXKCm(oZDRd37f82H<;n"hPM[8d54O#4i@U^]T2N]Aj`]SYiC4KYbFg:AMcEj`M`gl[\Q
%5\!dT0f!cOg)-P691DdP/mbu+M4dAZhL;jXp4ZA^l@eLMGJR+f'Q@M-L@U(![#!>Qo*cN(3oC+;YKD@q0hAOme]9'O,$n?1pF'c.
%c)W[u/7!e`(6"Hf`T9troJ&SULX+fVGPn1]^i?mRDgpo@QCgK:nKQIQC(_hQQpBa;L6@1ZG39V193;6<ZbP@R:[QilatQ[NRHr*l
%K9d_.hiK6#4KPU*MjqDsc&MfP;m4l*.clacL)u>XOP6;F95ul/i;h+><X*)6Uk2t[K%D098Qtt,da?%"C2F+[$nRfH_6P3J?,;MX
%g$GuFeVdhG_^-Q`19_gS-%kQ%m>=4=1Z!+J8]<fZ.qjh&`dO)u1P%G64DcJiM,,'&K;NJU5"?PWlN`>h"9gN0RTL9F<:#7l&6\f+
%@VpKtl62_+6f(NYeDn\rOe1@%![>NGhT3Q,/VENn@K<$^/V5@7-*Q4/<`Qd<`ZODdoCOp4K%+V2dJ\Y*r_pSeT2EQ1eOu9^k^M-`
%RV,?uSih7&Op=lNSuhuC6UGpK5&QT%:t$FWhuN+$6O(jDO)r\!'RAa?:-MUuD6,?uMJGOsAN'@;;7(`2k*CZ`=g[:!Qd%"JMS^eE
%BAhsJLB&#,lmR=?MinkKjLn&CD6Wmb8\08EWAtWM*DHrQ*(eqIU^"S/Tu@-Y)5*>Z#)tq6`G<0+#u*>;GX&J:OT\uR]D:4FGn9rB
%;Ut7Xkg5$Zd!$47ENE32e_Mf#[5=#n_&+2#pUZ,[^SY'q^Q<-_C\MXch2qb^`*<edX@i^eMRZB!/o.+R&I\1*BBqIMh^OK6O#kjO
%<&S==MJVSacWWS_[WSV8+]C!.^?K/%$b-3`N`K`iWhKR)V7MH<>WL;[G/H@0Za'39?Jo@nCF462S*&4.\]8#D(lD:raa8c#Kc_fl
%$e7J*+5'%"O<=s*hUq2>4c2a9$hYc5#c[N@*Lg'!':@-qrNmJ1_=F_OpG&h(($p"S\nM6hh_B=cB4gms/P=#k<n!*_eBi'O5RjcM
%'UB<[r=@"Zc*Ma'<HILJ>3h9S%k].h3hWVZ!oma$2[WusL9#'&\L^r+,RRIg!eL7uX)(Ph#$Z>$G%4#7;o.np?*R:k5i^?H@Do)Z
%iYGQj-g/cm@qeX8E1&;-4*1hi6[6>D7'X0U.ss'DEMV$A?t1LXjWHfeLjjKaUI6]ZI[T&s.sgh[k=95?.k'tg>JO@>f49c?(i_>p
%.^CHgYcb0FiM582]#R`F\];#)e2JJ0kZat^eE`2X_$Y-M-R.8dN2cE*_4Aj2iIcR%<8g>NJ8@WAPI-Dpc7bShDkQ2BQEasL[Y+qU
%F4@]b![AQqn[IF.eQ"pcBuaHaZ'Ih(2;GZt+$.]U.1;Aq;colTrHS7hmtArH'rtHh?tg4"Q-r1r.St%j!7bi:'<nqNdjR4-P=^=W
%&K"0=#tJ..,`L+!`JCW^>TAap\-AJJ)Ya`%KG@NmRBsp_d^TgsPK,kbfktB/).sBeR1IDcm(CP65lAQtEK[rW-@NesSg["H7Zo&d
%]pfj'nP?Ctk_rJE/Fr5S:\X;,?)#K<C!qo/i3^;-.,?=U$Pu;?7\Ej85&$(\Vl'C0LPL0(B95#;_VIEbeYWHrVIi<2I]u5VGl@I(
%7XVW&d+qe6*-qicjsREG7$im;-=:>GRl/bN<r+1*'e3/o18#c_Bt2UAUuM/rZ0MXq:PWZ&,m+Z3S;9:>m,u?**bGi!e7HWb7o?`V
%9fkBbIS.%AHlO:aaf(l?LOogp:R!@(U7,PM9D.NHnE?6F<!..kmnof9BUGrjA%8!/d&?cU*4j*1f/EM060>L//'^d*H2&[QGk$t;
%,B4J1#)g,u$'U%n,C*RPc[oJt"*Lb$'ichQmPTnlf=-Ti,E9eQHqg7'K[_h:W_VTcmi*'E*.)Rk8PRYr;lgG'*ff,lBMq;k\D.Lj
%W.@JGZ]2*251uPhN&q5l8%TIKG5i+-T?K9u<0KBT5D`<uN#[)u(A\F?[t0'HGW@>J-Q[I"Qu>7%4t):eJk/arB"/O8FUusno<:@H
%@MhDC/3DoD6'S-/Wu?i(aHNinGNB[$\A4g^PdlSp5n_\FEgkcR1<cgqa\(b"@'Kqu,5\%lR15!XH>Y;,UoEYTof-WRHT+lT/0>Ws
%M5,j7VWLrJ_!G<4pg'E'iF/k&kT\R9Ql74<bRn49%(Xj7,K%Ac(ELP5^sOi^#;K&R2E.N2pd,5A#2B1^B=7SFn$X="m?W/5dt%9_
%6^b#62n0@Z&d,tM@_ojPXgSfXPitFY!%r_VDn0.d3o'0,!gQDfCn3/@61L^;$-NoHLsNPu",fUclf]!Q7Z*rSAgScPNng?5\FZH(
%*bO]/.Di2l[:C;8[?nhu`$*Knqb<(Y6D'GoVRH[j-](AfR(7[V"""I!^GFUL+'Auk)m&d*^N0moD!&;[P4e#u1u.cp'=';Vi1ZZ&
%VV=<2e>"/'R.`,QAosXQ,Y4P5]QHC?Nq#2XPfJHBoT#WN#62b<M=q6:,u]8e"]H5.;UTk4l@1U*1nOg7<$IM,AErmp[ORY\ZUk6q
%6BL=t#6=-nA7IIj/XVn+Y5kUUB@UPK=Q#a\r`Puo()fg(nGIs`*433ccN;D:d9@md)C<G[h'$3"La--H00t=pngm(3)ssXPi?u:A
%5GlUa$FknU7Or!NSdfn%rP7t]dfU)U=Y)AJ&,&#PDGjN<kgGu;+9S$/H!(p,#BlD;Iph#==`]L=4/1)e0GAY@"%H4BR+G#90QJlk
%Wo!*K*QrRP&[#'<d+3+^Fme?^)&D<DE=NOmAWrka7@DqgB$P'OM,D*pqLP'o47Z$'Po'KIk]#6T$Sq,N#8M77d2!D9oCB3GOj19R
%Qe2V9rPAS0eMg/K[uAC:G^BY(+!67dfK4gklgh+Hdso)or2Y0bO_';UK]8_$L;^]uM:h/VInKYP8Gkpi0p8tYMQjnYr8#bBT@Fp3
%1K[J;C+Zf/>&c]gjQH^<A'VgYFlni\IFa1s\3G8ln:%+<27NAh\Qc=*EJ[DVTjB>s2f!0,!*-fn"A`71K^3"I/pFF5j\G"8h6mZH
%^+`RQ8f2Z)P37]\TbPi^Rd1<^FL?sp=3pKR8cbR<WmOai#,eK#G9:.f''h<NRO(VO^h]L$7;E7'MW]k"#KW7!'g=9O,Cp"8Gc`do
%eQGLhh]5m/W:fO_ObL[aX93'FXTmNu&';E]V5:>W)X@"+W;EhqX=6iBNb_%9c)&ZE.:fRXWf"S1IslYGi75?c6Ba4]s,KGoQKSs>
%q'T\bKa&3SR."e$#'qU4![!hJ)toi3WJ/;V.":\Ek/&NT?K"G0MXH4'+n355CY0m=_c/)$f[dAF+r6?D[5]hq[\^=8(.L2;3M?Zt
%et&!g9<Ji@NJj1n4Ma(-eO0p"KpBdK1%!coGiL:3bg%KHasU`F!oQ*f$Tq#[.3r+j9JlDRd"X^\a/%'<.<u?DNoq"RJ3C>h#nOUk
%CjdP9``0F!:Wh00$B*nG,:`p'N>qoaT9Z,b*c%Pbn?h!=J24"S<`2ME,hQBQM&TePC!hgX<MB]U#&6,acu<l8.q'(RJ"Rd6^A/X1
%fVt8(JP=`CaBXI"[:]%?T_2D&&n[(IDigo@*0qk9.jR<2@;ccJ".@tNPdYG;olK;/X;42uacb:c[>:.WIJjQ]?.pDC/:U:+N9LS)
%>/$<GTNAe[FkX&]p&IqGLi>lrk^Xon%s=n9"+)0a&7pmFV215K+@[_ID(AOC]jmf$NLpM.;R`0DkEr.2Qmm*+(MqP<0`3WAQLZpp
%2TXOg7G$OXBT&>b9+u.X+HZgfR0$]u&t450,_Y-3ac$iB*[Scu)UXt`PoSlZ-XX\ODK@W+a\X!Ioukpu[jA)&n1Re=mgjRnCcnJ$
%"t!>.f%B>N/S5DFSLVd5M-&6ed7tlh@R<ZH^=FlM!^5L8WN?0q70.d@D"&qU2\&M$W]QTUQ.-6.!Wg)m7IY-tN/a.k@_J7Z#$fSs
%1o=5L*.A6m$9Los9,M5EQg'+bfBNj0IDct"k=NLuK^9>5E5,2Th=*&[9W!qXUe+:02`Adp.+NGRG&V*S$.+t2mAZo/`/S.U&M3S6
%MNK1j[CNXeM=!OGXG6\K^+)Xm0^3>HA>Y"a/Uo1umPYMhPI7;'aGFZHM`5)l/`:3)TpCi=G.aG>A$Os3VP6U_qLEl.T6CDd&Bc(Q
%NDNL$;:fqf#@Xappg$)Q2+I9:6a`FVT]i)D+q8-co%VU5Kg\a"81%b+CW\g1Q=t#lW<<?0!-[=#I#E%kjbEhOnO>j$&)=FV"t$2L
%P-OKSLJNbEReghIY5dFiQ)2OhWD&]=rO*FOfq;HT\:h/W=c#73e.icA)!=%4)lI%s2E[mK`&MIa@X]%GTLZ.<TRPR]n>k%(Q9rSm
%!Ojr$h"8(OZb*e/cmVc2O*t$?AaBZD3n*k'*$'3.MecE3Us?8oa"UqC;NbLh=Ol+-f8-o:3QDVif:s_2?+)j#Up@kY>>-a&.%@13
%fU,)m;9lDJ>c;g`KlNZV7=0!5kWfNZ<:,C*CL+<NnGseqhZS'%)b0bGQI)VoIAM\H@MTuj^8=mLl0g@Irp;&e:@G:,^?M5Yck(?r
%Q^HOjhOcn%?aZ%BPDqG-@ujts\P:,BTRBfD2OhMDeB">4E3a@^NR"\X1D@^P`0We98=ufm9A?-cEBM=jW7/(s=W2%)$4/Rt2+'2H
%ib!l13Y[CI>W#^;9c'9O(9<1cR..Ydf?^O=oHD>MVmWT<5.JnJ,\%:N6UFQ.gfmd_"V7X'm#"M9`QdoOb@u6oUUrr-A\)<tO#N5H
%dfb416,jGWoV,X3`[>:BUlZ"(]o>E/UNqeVFcobW.Y[?)#ZT^6mgP=4!d,h-?$Z&8<QK&FTO\0fI5p\+_@W1oei[I4T9=?c4Q'c?
%gM1afZg\,8JaFZAbe@TJl8&e[g\E0Ro^gpU]ZiU?+E;s/'#Kd:N`7!T#gVu!T-l"YADU6R'hFRG6A_GL<.gc8*1u$!]122HFLW7U
%R_C9Y2m=rI$G7O@Ggs4'nde*AbJ6lkV7jT!b03580b&s8D`MWqCu/d^*%-f7D%KiRB//S'^IucbS&%pq79S]TZ';90gP(p?WX/`Q
%ClAQ#!qfT:HDQdnJ:*a'l^Oe:h`%It4jBe^Y)rm?.>#"1O=2pr6U]Hdm!$iE2VG)>Z5Q1HdI`Y<Fag*e9f!!<co*jF0o-HgN)<.T
%F]At/B*DWj2B#AU?,?i=ejQ$rE_3Q0o1bO10NKC+Qa.Z:!n:AAkL_[@=!>\!p3fUKE=?a6L+SeCWnPuJZ`EL">lSQ:9aT&K]HO9K
%[@%DhQ'%^6FZ9n6N&.%qGNV&E'RU@jd]h"uZK`c\dVbE.CdNfij0#)i?'GpYr2V;nW%!ttN9^QnWi6S@J<5?BQ'<JiZD7Mk9HPIo
%$pG]KA=m6,>bEM=:sWmiZoBo9M"(6tf:b/qXSLA^HN`UF&cc,)fQHGc70r!EW*2q+mRs>_8h1Src"42%q>2$b%T/,b,V3LtjPeB2
%F9*X2\46s-bAjHuLI>*V6aY`SlVLuNLn\BcrT<h_iY2U``OCF18[pLlcKuLKbioHF8F3Q<;78`qMGJS"&[3F(nlb90#UF06::m4*
%Z$D_S:!P<YbI6])Wl*J+7-h*,N=&6K+^(8IkuJ=b.p+cU)$ROIC!HIrE?r)7-=gt=D6l,njA.AYne?K^ABD$r&eU#4Z<A)/49`1^
%p)DFYg)%&A[Xa%urNNodZ>_%OFj3#;66Jb(D-[<0k(bkjBk.db5^Vlof7;pCCdFcBe&Nds>YI<XF-C0QL,'Ya7#tYK=JKP2900,V
%W[dG#ZWT5uFbdP98bDG5ha^@G+Q@f2Q<j!fcS,"I.q4)MC!%()T#VWG6(r!5i96k.NhRG`!/mateJ6bVCFBJO-"Q1<[VLb&"+>BV
%\g\8Er5VVI4)hMpCf1]_fJu)s$o[<,8[bbh1%ZdJTtUY$(S`?#L.1,JeOdX8@$r\C]LNG"D6IVjDi,F&_KrC(r+P&YnZ&t!!0@J:
%6"%1="]1EEFMThRaQf1JjPXQL"VT_/i=t"U)D:tFM;VRD+8cJPe^4L,9,QKEjOqZ+K8t6nZa73Tf5Yf*csK"Zk[h&g/!^SG\W]X?
%Zd;&f(>;/OjV`dgGkt<tenoA0ldhh_(S&JUHQ8h@b-IKXU`.Joi$$+"os&`Y$rtWI&Z_Y9-WU5Z&D11\S4;Fu'eeV\g_$P3?qF)P
%AqUs:6NNjJ'Y%_;64c5&"ZRN\Vff$aEspn]Pg)Ok#RSOb*:2X$k&!]pBgAA_Ca2;j*_m.[cEZa"*T`lKCe0hl.pX!)gs.![@dT6J
%_paatWE!+0l$'UO$^5=]Q^.#GXC'ZBQ"r^M7V<EgeON#VH"f^DosN8h#a9k>`\1B;c`.-[dh^gI:hOc[[BV=tS,"!9BmD(Oa+%"N
%nk;G4fJ3VYcH:<TJ67;Ye1)6=J6"LL?%kia1:g%ShNuOE^/]l%`&fO$\L5U0F7s/N^;7d')A]+rpj4mnX,rH0%"bO(7rG422GTtB
%!od60M0]3eQ?%08HPNerHC>aDXQZKS'P7\3J`7pm$SWl+.=J"i,kF#YB(21m22<*L,2"Z[VahGM$km\L'Ss<3dl$9+#'9hF$@YQD
%`sn1o:[[eej2[VHp(3\*@Q;sBOc<n-[-h<k7C&:`;Vc(!knL-rQW_+i/J'<__OMYj/R1=mHfa?e]pr=5NT:d10jdo*ne%jt.muHh
%>0X0bdnhi+L\3s:JEp/MO5/ThW(0c']Re0uG[2R3RBlc6MahEC0k"@?KLV/B_9hhfbb;r(b)F>h6+=\Y</?u?2lLk6_da1Pp(HVB
%88W=fUtY$6'nD].1gFP2,JrbHUY634"oZN9jhQZo:P*81-BYlFi!!<>.L$V=egpJ\99-2>7T^U0j.GhB_J$_M+VN0c5nkFG:?^7C
%M+WC#fIt:DPV(<IMF@-W)-XV:-CHfdaFMYYa%1u^FSs0\C@(Yb^bFG0Qk4?=K0o+;1Y%buosVHYC99?G^O:ZEQC?f01e0)]>74Z[
%!M/'/U.6`;&/"f<hsZ\0DBdcLr:EPO1J.I8U#RlC[oLc@0T6>E:69m6rW=u2h!bX:0;IkFDLK*bQ"'18[euT62i9M""#7t)0CuQ>
%Y8!'.!H$3F+U'Pj*&6f]Cif\TWup\4l*\@mMB952g9[aQ=2Ndfe>4Jr+P9:q)RQE6"DAZ9P:pD_MBXe7N$@?JpG]LGhQE$0C2005
%YUO%sKHj'>#Ypkn"a1b]V?Y\jOu/>J@<oK5fPIBabD"MTgQ<D'"@_T^S$+Xen/B#WMhhM&iN9r-Bqk'hah^NNj:ADoqAQnL2$cR#
%Es\VM!cC&a!A7=]C(*<Co+O)>U+[WEh_N#!9-_H@,p-EOa\Ys#Db\^bpbd2e#O".J(JME%<E1M9MdXZK,LeQh+rI'")X^u_@G$-0
%m:!F#Z7("&Q=42o(_m?_D&,=Fs'.o4LQ8h7\j.15U\?R5LoJDtG9GcRi3%TI3:d8]h>n!-?NER_@m?]+HZjR$kLpKNE_aK8qp`a2
%j82CO4nM[E(\"]O1\r8'M]*fa,<dP=VmHJ)Y\YFrI0>"`?1IKuC5\PIo'a6?Zj24(Zuk+0:u9bI7MOdtr7>VY>'JJBdr<Yn9ZfJV
%*Mpi")pTe0;dIo,0l<\:"NJc5.(8&t3?'An&kZGp)C)<'8KJDd2pL%e2E>X9_PL=C.G2\;`aU2EbJG8gBSlM/p:(tp7)m_FmN!?c
%]'b<W"f.bEPYVY`<Sbaf%g8[ad/(s\Op>dC]@>p0e/&i0iUehrd2tl0#?E!8F-A.;E:6_Rq+A2J,#q-m#1?*SS8;e!PnM@0=Q\#\
%XJj0WF9)lNQBf^Q+s8d@8HId\;b(t#8q@0OZ:,2]mNBA5%o'`@oQW*WlkrM0(hP'-"2(0$HI\$paB:F$,b2JoJHIRl\2qX2W90K8
%Y1qAWnZl)QF73:$_M$h(oRoIa%qJGB#]bc:MBOB"gKi(V7E4PQcZr$O$DD\d>g_hHX;t2rKi+)%"AG)"?)<]?0o8<W?'r%,Vq!h/
%'9gu*\-?VE[7opa=^lbp:mBQ8WGUp*LN^FJ>)BJ<r1,dHKrcul,^',R#<`b8gJI\LBds'Ye!<t-[!%lR^PD!qnh71@8$aL@YP0)D
%9-IcF%.l^r\:ON:>4J!uIi(JkDEB'i]@4-a-jSGB*7<`FN%cBA'D`-2.gjcRjD(E4eTYdSZ,'W9eEIe=dFB[^\<F*?]>d#g6R?"R
%.I)Hg,UKJ^g/,Q\W"Z5[F)9+R][#aJ]":juH?:Lre^Q=`*b_9@e1EGLNJ(/0_ko)Z&meKfk!_HXWn:Kr0:UCbNlP/hC(YP&09Lf<
%'JWTM?a<++-50p)Z=?LSX:a[L&,*f\=8`hc]9b4#&P5u^GHVa^8aY)@?nJ+sO*q_d4_P+p`]J7k^p`IS1KKaHp0')rN&,5X:Yc9h
%$t;.Z/Xuah9Z"*s:QN(#ZBK=k7'4BO\e[)gC^1(.cc1Cn6<H/I)qZo4%<[F<!*XI3$p`cJ%u=A'I]*It)7Q[C\]T:c$](`t(2[J7
%/X>1cZJSNkC(mj@I(H[-*p%"foL=]qN2E`oFbO9s5SHgerGKjt<R)M>S&e$h)!SMRS9+*p7g3t5L_RnQX4DQ2,l6&olf-Lj_*o&L
%Ce7#+UrDb!c,m?a#@#*a_37m,W[j,4*i3(D^-0!=HW9,@VkD$=a[6e#,s!XN]?&GXNZ]GN7NCPI`>'F<W_@T)9OS,NZS(C@kccNJ
%qahqmVs'>-^(d:_(%",Le-%S7=`@JTj6`LTW."!^M!mAU6%H]/RC%%bG,N>o7E3Xa[\cZ'VEBtl\gp5.bC?OGeV`?<L;)?<U;pi(
%pS"j)]dpbN9*Y[Y<T:t%6o^HI<:^*)6W&gum]tXa-`M*9VB"e#%4"Q7PE:GA1@LS+UAE\4_W\$-c[GKLrp?Gi+G"797)=":C6'".
%lGdAL/C2AjATsEn*fK<=KI^#58%7IgFm2L7"+u3K[2DCu1'\"E^A,YtD1JKR4mH;*O]O-Uo4@)$Ims"7M0_ComR66B0VH?CM[(,E
%?PTnIo.?f/Y7n9$FViVId4'Y1qUF$p\s(>`<_D.R/X#cdU@F9Y"oj1^8prI'cqMmjB'AXCdAkYX!t0*a=&2<2.4_Pbe5r]YLeD,t
%&e^i0RqS%THDK)LDF6-oLjZ.elaX%VJm0$5Wt6^Y`-T_qr^j(Y7&,+@%^c_mHh=I2oVga0.E*BM@6kJN_%1Z7P6kCf?8JVPf9@Q*
%q"ZM!1%HtJaNe0aO[<<hO32[.WE`LMcl&mH6P%2j);u<a?9p.!iY84j`]d<Rm-o,.j]d_;N]\^HT5rmqdF"re>!$K7MJm@+it,5B
%Ls9qjS]gibh1a[t0:F;XDAJZ@V<W/Rkc+p_kAD)/;H4ZI4Z?uW&kU;29/FkAil0OZm32iTI7O%<L_NpUc$t2M6%@&(e6lJK=-XUe
%[JE=B&O^eBNP8*B'o:l72/N>Lkd"p;0.O7k`Fnqe]A4[2gId,Ia:tP9M\We/?uqj\#M-"RVXDBc^ae#L[[h:<?C.2\RjLp9c,PUf
%lGGS8idFsN3-<6LSS$Mp,Xa!RA#O0h/)T5X^`D\Y-jYY&7D-M441L'(/#)Ej^QYS-VTTBKNNc`ta.cK<Y#>9)1Jh!%\0?8ZK*$a3
%dQ8)rXMo+H9NUcIJ.>H/UP,/"/rHfu,o2G(0C7q2[gk?WlbO$r]94Po33&6,_HM`g>SUfPpe.pga,@I45XQ_B$*H![!.b&X-$<Nn
%4.*`LX3[`_%,RuX0378rTEG(dTKH=/7<*NJ8Lcs\K*E9*^2o]CEK;YCC&30[c!/:j;F:]L-de4SE3h.&3teUqOb&F`mO<HJI!,%^
%FsRSGb/*I=^bB]?=FQ[_e?)#4fn@r;5f=X12IP/c*,q6toQhGE'Wut^Y^d:Hmkp[ZbIh,J?#W.;-O#6B[roXI!*"Qk<Au0/ji"QW
%6@t?@#7/GbVe/=%W/-(Y!Y\lh8\l/7+e,?h`cb3(i-QVKNkq-PMJAhVo[?n?*l\D-?m#AJ3]92NFQY/:MQoM9_-i/&M.=blq!O04
%BEA@="A<(L`6T&qO!Nc/ild<sX9fk<iK#_(_qDXk9r*7cB4Z%2DK.t+?sUSgY-DDMoF^H6XN[D0omii?<O;h:f'1N*=5_<'npq0[
%FUc8Wa?Ch*i,(V_Bd?&TKQME0MRJAU[eh)c'Fk)4'(D8\Fh])tf;,4n@&iY[6eKhp.(\/A[M7:uG;JhD^?Be.D]MUQZRrOTm=>kS
%eIH<jjp&S@aH4tt8Bdk&f@u4B&Hr(KSX3fu5$K'gclB>eb#E?mci!]M*1q0LrR!ZHd7;.D[%n$\2j%%6!15"]%HI@4RbJLSZW^4]
%N@sPK:#r&+Lb$>nO]=7Gq-TQg?me@M_Wa>l"[Jp\Mfbh=g_ros%')FB$'s5<3Ca]i#hR2]A_.RR6AMj;^Ti8S:=6XJR<tIUDJ*%&
%e:`]b36*!J"E7Y9DPJ#Mes9cU+(*55)Ta.BmI)`?K`?9ahFDX@2R_U?@N13g1UT%/HHa6HJ47WZKBs=WbqcEt7>7C%\]SF[!7O8Q
%E>:#%HLUp=0=#6oH=V-iaK8@m'"t5uOG!c)?_-FZ2_W,_b.)Or`-S;MPlo`*5SAgKo*Ng'h9BWkO9i#T>Z"$Y$S$st.2;`a1Pbd:
%*i_Z4?l.lJ.7P:5a5,-j7G5."$^i'>I*-!&8PNrjdn.LL'AN,DQ"WNC<1#PO%?jl/*eADgE+N&9,`bG714o3FFT&#,5+SgTWkd__
%T@]@&ISlSTb=%AKq,jq7d1K7F$VXg+r>I!<L#Q.YI\4G%"KiG91NS%`@+b^nqY4e`5CW$,-]j\PcJ@f(g"j?%(c<f?k[$c,D@"b)
%DL9hsRb&ERr+KD<*PK(3f0(Bo>o/)_k;oQhk&8<BAo)d9DSJ9bTr"BSZ6B,<p!C705g8Gem`osam-\+Kn>'NGdCN)/:jRG3n%,F$
%#$gg6h;.B&*)t<m['0@L./s\BlS_E+B<4G.Y=%nqV5g`mF^5"!fCj?spM0Tmp2uFCUO?Da=Qd)?h;c%Iq`9-%8o+?>?[(E)BOCMD
%2qlkHDN4@4pQ5DVgXlBC(NB)0G@9INlt.n'cXra<dY@(EBfd(7MjZ^W27[JoQQ\e=E_ZBCc"`;[`tjohh:4Ea7CQpVm\UcmL[(kZ
%c?>*lVIk>B/o#!N=U%cC9d<4QC@U?pPDXS7aJFuV[#J,n;d$+nZ`L-fnLcnXI0HK*e.4(%""maHS37)71aNJ59+&d=Oee%Gr3lHA
%UDA/D6O3bn(HMp;:eG3r!<Iaj[QZRm*->09/[uUiaeJK7=4>3e_R&YcG?4^&'R_6ON%UbGU05c\+`9-3lJa=%:$1<[h1a)"r$oOC
%:RcmjQ0m/)gnIbJ>r#ijj!1:I[tMZ&Y:u_o-_5G#UKEEn)5n%,1oc1,%l4okmnU.cmfk51TM`B1UJIu&%0qKdr[82u6+qQX@TW6M
%/Yhu]9B^ep2uaOUmP\acgXYmNQA,E3ZjW9@kU"mQf=Hq+m+V$0,QW)o@1&r=[1e20]JQuPWnPC66]urTN+dSk_QjTh^P[u++#i`;
%b$&1/WNe/\/6i(2Q5&"P=!hdPMO2Yn(?-n\FAG4YJ7h@tW5-qbN,rFjTCZ\"S)<#dLJGGhb;TR]@IB5A+!Q13BmRYR89r!?Z_YSX
%\rH`EZ6[kTJh@<M$^h=*SACMCeFEDTq5=i_R"GMRA?<rMRh9bj@<$BVp!=sK'?)p!!?L*ABed+qd,g^4YZ7HP:&^1KXUG?kSW^-a
%[4MTLJZpEr#C?Z-;tGVRQoe1nJU%SS@f]5l4A,k]4Ea#fU308s+e7iH9J@"l=RtN2!JN!GSc5eQ/`f]9PZ]Wf,deJZM<.)>0I`mC
%TpEegM/kN@3NTJ<%R!9j+CItUYWT1%#m?(r7kcnW/%+1'#-:V-DYUR$fYam('o"2K_E>pbM9icW_FCaQf+^mfNGYp=)Xa'lBF_N9
%Knu><YE3IF-)Hfn8&kY7!)>C]A0uTl!\c$d85o=k>_3(t.2%OAXOnZ#VQW:HJ4'`2eT]rnH]c`Slti_[:6!_a41@HgIZ-f!BV!](
%-Pul&!iBp5<+_:).qFbt2<*<=`;ICo7tj/73"TUF.n'`b*)&'IIEf,@[YCjf:pdMVD&G9.51\b58p%_^%FS97a@.EO=nkhFN$=D&
%7BF#Je1LHW)pH=N9V2$@!!Y39S+IpNdH4/UW5V4&r*/fIiH#P57KB#f/auUG(<1ke(Jmk_aF$483TcY'R0RLJ["M=h!Z_LLo-QHD
%Yjog\](D8LGDbE4roPK)Mc<s/KTs<I6ai3.m9Q@%<60m8OkFN4R'3fN/3"Z"6fVQ"3kP:g/aU_'1rrX"CQ!A"GR<"B+o$s0b=%5^
%M_sG.aRm82_s]:Go@M_c,`9JV+#p:BYu\E#Vk[@A")t`2`i6;iRs"R?G=/L:@g3`]-QO-6%[MGjOtpc,gl?:`f8Q5&9C&'8;00<r
%0Rf;R<'7*&U9V\[c)b[r[a"1,^pt<'q.?'UWi7-L+,Z69'5d-^#t6L/=g4*(F"06`Lcf/id%fV2Ws)Xn>>WiiJE0E?AX2V7.giUE
%[lEaE6;5s`5_EQ]k.7DrrefrPfGp`o533'H,B;a(\YNSGGtfW"-bfp_8^\CuX;?Z]GEIW+Fi+P0#?Uh_Qi<HT%KqU(=b)s/?]K/s
%n999F?hhB`D#A[n+7r)9QWVr+d`"[*;uLJUH/4\^B1c:Pa]:5,NZdXN\BB3Zk341KZ/>>:$N:%P_:S0'!GQ8L3+7^F"lm1Ol<q+P
%AlH!9khTmH,jd\%;Gh!lhYNI"#C027Wi1MhXX^R1<'<W%r[.%H+KGP9JI3+i9m3$H=Tt(@jh^kS'V$Y4Z;kQ[&a0Jr%P`/c'r;^?
%XIV?.!SXCkR[;;g7WE-A"/?*W?0E%./65H%R@LSQbA9R<HST(?'R6jQotV3&=p.<qW$9Q`'UXhQ<R=Rd>=[WKX`oUj6uWa8X_Rk:
%KuN!U<RjI"7,NBUEYF_m8BPih(JN?B,jo:XSs,RB:B6ef#(YR:.*Z%TQgobk>Cd3*#7Cib=r]oT17V>mU;UD-E/\Z7*[LqXZ=Sl&
%9=P<6"=/)`n0@@CieEu%3QTbBmEV09@fmL^4s4,%M##tQ@*^O=!2)="J*OTg3h!ET4$uf+*toK4XD9Xi;42lRigX_MZR$L_#UN/,
%VBs"f3Wj*j+>AT1s*$AX;I0^FI[24j7e&:.ncAsBrCV[;+Zl&='5=Lr6PU=DVUtm0h?!l]T8g+$ipfk'1NbsXoSa86mi-'aiKD41
%KLYtT7YWFTie]Wi(B\+p.7,$O%lQYF4.g==OB]K<gpJL.IHBUsU&q]Jm'L2(!%<ftIP61mk(W%(;Q6>567d5>T)oA0o#K"_'9YT1
%]RY!I7KCcLNpKX*,5k-\$knr[0ObO7A?%YhaX8XW[f%feoWml/p=.XJh5J-d+=1K4g"Gbo$l"RCeBIoH=G7o[*Ps5\Fj3c=,_FcT
%9lSa(KHj0,\(7X'9(eB]5/Y8Q^5S>RQ.Cd*Ijp;USbGj49N.7hF6bY^fqNm)].%J$AC3H[AFopr_S+F$A.0Y.1&%sG*$\@CW3dK$
%!@@7I5V-)HZ<16UhUG6XQ7VFS>>t`#^eCc4(3Q!`)BWbh@N&^A.SE1k=G,0/iB\0dA(M*sSnKTclXBl]:j\/R'!qfiF.5mcq6d$%
%1pVFr=K+*,3n036j&^D*ljF"P1C%:j.5Gdn+r<?tW+NOL+p^Hi"OijRn+K1+O1'a]K7;Q+V8b[:.as!fdeWd"$%?%rkbD1gAMcEk
%3$#F"s#5*Z]<^5C'n1c3%[q'U%2OjQP/I(3!<O*/&-N%s$3We:!a'Ug)qR&fT3gDYXR;B:aRJ[uGLmoq2tpWCRV-0fq>1Qs%>E''
%H)(?&l%MF<9P-lEBuK+C#iLJ]DodsBLt%:8K:8E-[l!F_qS%RVIVAVU=Fh#Vj"p(#*K6JlpPj@@7,+TDb@8Jpe)IYdIrh+Sa<%T4
%aH_1APZ20<oGkq5cD`h`Wc,>Y03a."d%#mDnY%^W;%CKBYPXD-:(B-)D0o>ChH6_Ujl]B'Pas/'"8r^DNBqJH(Y#+L"2jgahJ(F2
%Vi864A8<Yf>1oKu*UNAXOH%TZ18I(mPqN>"q`8\qS4r:V:@aS)V/M!qSp,k8PII-FVV?gOYNT\4G<u@Y4>'9/+'Eo$N="X$R'VE!
%G9_\Q`s".pO=eBJPd75,LaSsUkf$R^,Vabm_\Q[d`+H5_lGpn%Sh!e^0b-4qf''(F^VF@0S\tReGC'XG2VeVh7usGP#LTUaK#52,
%mE_roaF'jbK4"\o(/8DK0bdF[fL`?PcFBpVD7Ei?XVuHhV_nKiXGVj=+qW]5L.XpaM?_fOG/gZoMgM5.;fJ0M*M9&0<Y*rFd.K47
%4A"@$mgGGW0Kl;=kbo^Q9%9`J$I`"3_+1X:hZlX+Q:`#khdiA9`sB[5HnOiX:iI+2f7q[=U+&hH>`"2Nj%Q+jIPI_16(ugF;r(5p
%Y.:rCUra^"L8I.j_up,4qf-iCMU*i^C+ZQu]VIohBUfb%RUNYT`mj<SZ@]0lq`&(d(Wl+a&C8P@l)1C0h+^b+'KC,*jiq)4F:C:g
%?>@7\Qf"tPDcQCGZ[T4RX7q8*f%g,O,#55]m00olf`V^U4P+R3IYK_mn8YD="19h0]$`!4QD!3=9WMT_?"L(`ec_-tHE_b/<f/g"
%q.[SuCaNc\WV25J["f9^R#p6[L*\HE7iLkJ3Ol!XY,\\GS/8mN5gu^(eejtaXW+/\XeK;),%Cc%DX8aRpIC7[MW`0@(QuS$lG<l<
%`4S0#I6Et1EV2?pnGi'9C=q>Ke4fs"G,4;VR.DEPG*7r<-+Bp^]UsjEf66LB?3:!(T8,Asg-YDZK/d6d54#q'*p2NkP8Y$p'.u'f
%XLN<Bh4RHq%-US;"g=$&I45N1\J<=a4:^m[SJJ?^]6S[`RKpj-5#8f#Q9<-,`(JO8^FCpg*Cp^iA*QLqm,afqQPD%(%Y[=q%Z@c;
%rRSp7CFgs_bK+YcK$Wg=<SfgL+.(Ngp!(8'>0AWk%bm\$bWVg\Z`W%ldHcjgq:\qorLWnIWe66nQ$?3t#X29m\YJtAD<(gpeR<\f
%c%P'@#/SK\ZEjG?%eK[Mglq\\>U:s5KfBREBPh^bX[tE#*j7.\Qa[6]N(._dc!q=#5l:h'':lT<bMsNOpi$[(p>HpiWiU4GH6QY]
%QHSM)]sYT)23D+TZMe*(-#s^(%bG_hojXS5DTA#!f]3\D$rg_IZoW*HXhT7a3aDFnWi&#4#?.?@]2jO=j)OE:7VE%;).P(n1rl*t
%^#GKk)GtLR%7ArBYuLU;WCW0FW;?E\DRS"CH?<KIEku&ag]'89bIEH`qOpJ0;gX'=YO/S8(^ml25NRJX>;*I*nGjr"8`XX?gY9h+
%cWY7rVBg/g7$`[:CZEM(8F])+aS3^?EV>nZ1!^fBBa7<DWTN'AM%nI_SkD+;iG\-cK!!Z+#@,T!mBNq_Nr"Ymo"Em^XAeq=2*W[*
%M*B`pL_2+q<g6Q4PpEP-,TbphI4*YS1adTS&uo/NJR0t2@YXSVW%k<aFF[?2'&X6c;&0#4NgfNJH(?\6[1;P@Blt:WX4"atWo**Y
%W0U)[Ug#V]_>YEP/.47X*H]o]<>MLW4]#&?<qs*^Reh_)Sg&E+SS8:#c90s1Zq8jXM?"'QqGjTiDgqNV#I:m_GGA[_Y"m0*)Di"(
%+;?YQMDI:S_H-$ObsOs*3D=RV;'JEL>3kV9QK$3gn3*QV.EP7`f9Hqr[K4IVK_KFmP./h"hlp2%9I]u3c;GJ'L3R#?S>:jS)&YT6
%j7G&s?0S8lm$6;<&hH2umP\g$V0(!B:94/n7=MC5,b-CW>ZZ;rL.mEEQ04#nqriT7@(u"//mE`<`*c'GpL!Pc<aD$DTXq7(Q1jVH
%0VKU-[AK"nofEq\QD`Vdn^=7`9*L:r8-O]4]DaT\KkjeepO0%I&:Xds2"b=uUo>qoJ=hd[1AOSDPX6rZ*9VE,[[DkCp#$$DZZaZ'
%T4k!7KT@FF(fM\^NMYc6D?s,@>"nS*/:+-M7ktkG2Ct'V1qL!Y2\s6pOd5V&:=D.K+;@5WEbo8A%#q_>'"LO5B!=Gk$0u<pOEUNK
%*K6./m`e]eT-p@pV=PTrQZQDsrYd:cD;\1=o]?bX2+.h07jDC[[,nD%[K>QNg)P`V,Nel>d1&0(Y%WS*#ceF*[!Asf$5.nBZ\-!$
%!b`FB4drQXOH,=5%X2pKQE](`!)G8QU(9B"UHjUmYVA%DZ#q9Bc9e)c6kcrZX_>PW=@m*5VeK6)oV*W=@rS-BR4Lfr6Ei6$i#A;d
%3Q[1CBoqE,6bXRs0r5[A0h=0%4hsCs%H1je*7<VJQ1dH+.!E</f]^"K'df`9l?]AnD\c/G/lJX7K#f`E-C[nRN>abc6?,m(ZuiNA
%b1\V1.B@2IM?!JaAu?e1+C+.ZW%h?SL9!mTG.U!t&iHG$1A[EYo@!2!pBm.m:^.s!SMOkOK_E;.VWhe(RD`Kmnc#at?)Z!f;'=97
%,OJ@GG3eZ<n`RQJ#f+<)3a/?0's*+`rf4<oeg^)D&!&O>*rNRG^YIq3EEU*:b9tI=krt+M;_/bBNQVA$9K=/*-*<o^ZE+W6Vh*YP
%rs/-'+%*b."Wa0b\oaHe]>\D&V,mfeeA5X'=%c]h8k.b$j.fRT,VIB2UWu')NA:?HfVR#P'2"8'^KD=PA&')RYDReKJnI"s9tWRi
%I8gIlQRQTWdc_5Fa&b2/dfkA6Bq6!NH9`7ph"Z,g\j\8]9T?4a5RSkt'Yb4ERa$b[5PKE'h8_`*F[a]Z"^+,l_Dg!W%#6q2oO$'3
%Ve^(-PMoJVe:!d1+"80#1uZY_:b`daktN:"6DFr]AK=C]^hq)sHA-msa`6$jRZ1<mFB%YirM-VV_o&sr9b'2m#]M"+r/W>V_Q@R+
%*Vi*Sjr8*Q:iLRZfV<Qk`1T3S:_A?(5G)Jc)Y[*j3AN%V5SVSi3%\rT2m,<LKfRlA;)A&.fN5irT@V]s)N&(0oa,Y23+9&c(>TbU
%%(Bp(i=(O^BfT=5a(o^"7.V6U!gB>>_9Nk\QsLI'%3qM(=1(+`YTH+$_Vkm@`Z@7V:c`+^F$2/E)ClD\E19HQY:.EQli\M3:)!B@
%KHN7uC<n#e<5oLmc;gWH;DqXtN?)ng;%WUQW?SRKe9`X#NCKG=)aVI+cKI<A(bn1eKJ=Xs:-YlMJN"CLS_CN:$_i6)j;b]I$ubQr
%8(at@e(n"aUbP@_(/8QfG=:]qb)DcamAIK/F;5,(9&ui9Bgos'ab6aTe/gr/3.-jrNGp"bIhDW!cRfS4Qc8pIPaplUTo`B6B*'#3
%PS!)VmB<rZTdAj0aV_C?1&O%0HkRZ\B*ZsAX.Z0C$qpns#dq!Q>_&#)U2h/Yj:R/ooobH-T./bEp;t04Rt2V6,GL\u(%NEp"@k3:
%MU7`6(%Q[DiHukrCuK!#b>ho03f[#SB/F$J4ZKa@'$A%*GHL7LfZ!\mJ9D=NZWJQ#n-46qs1pI$2!qZRX69pt+aRlZB\3g<)6/Gd
%Og"ue15C,3Cf@DkN'Q)?8!r/B<P`Cknd(.MN`=OrYG$\%%s=a8:H?f8gugN&NmaP*rkrX(07@h6)HR.9bc#Sc@04_48hncu&eC65
%LQ--`/4u=!@H9HW%)*a:F1P+B1B/2[DGN=5OqY=iA6RI,RWWI?I(TjkQYAIJkFcB]/!,O6)6SL[Rd!%G`N<W??]YUY\Qi1+m!qcd
%\!fh`5^URe*fp5uH#RoLJ><B&b-4Zc73,JTQfjq-\@!L6J_$F/<5.&Fr:nC!E9?Foc14en+-aFmhYX9=cFbt-fP1SOOh"t$2SXWs
%'#F&[AI47?X65\"-rlnUTeWiA4H<,kD_W$)9O@Ek!fR$d\JeAN-?:up:!e_jY3OfriiVSJ0$-X:8U`QE3U>21F@2UiB\KDim/,Zk
%CW.6=NI2UE.Mc`UJJdjloQq.X:>;M5)DY*_8^0$=;"/HW%miQLOQjD<R7PZPJ]Y]2>E8"rDNZ#4N65=R)A,B/-Aa<%*acY'kIQf<
%I-DFZi]V,hcNkk&N9&6tIM8:OZ_[/g+0Yg)+FE63[]u[HSjV1eqUKp&P2\a4._\3lX[iihm(ra:QX=qah9a_WoaSL`VDco2B<J_g
%7Y]j\M<uj\h>C9c!aD^.V/CrCT<kjGc=7J]%Pr#5cSes5G6oP[MHpD/Q(a?Gg)YoR4m?X3p!(qM#=MBLF(JmKLh+$7XtlporZpAb
%P7)>n7(`4:-ZuscLL&:HN/Or96n0)""u$d'Y^<u++c)D!+KI9/chI!Le&kmU[7O,b6TWGg7On.>/CBVd\6ar\e42Ce5-E`DqY\3M
%71?HfH_*@'3d($G.G[SeAPeYj<P4YUM\V;;R_D!)41$&51"^te':3ADdbct47gMDMR*]1MCZZBV?!HF%a3EqN2c\d*r+[;0HdUaA
%&8E8L/KAi\jIZge0cCafaC']\KCZh2+`O,C.Bcg-IR)+>Q1X6ZeRB`*G9L$WQ)BDd1X:0q`Hojh4"R(3[mjimDXaEemQ93%+ECXE
%mJ5Vu^E,9!iGWco;m'b&Qhgi.SF]88j/Fc@P&Nmd;J[O(X2ND&Z)K\24/UH8o1b:kT8(dDcnB&ZI;hiZrBf8E2A/Br)AC*O)i!(L
%Yajj*JMZZ)1uhP%!poX#:l>D0NpA<+<G\+P<<e*5"\XL>XB6X]*i\>np=HW_-)YP5!)6B6'icD`GMGQ\s!t;3^;%R3_TW8"93R>e
%!7Lk2*?2%g9fd7j-Aq]WSbJL9"%-'GNt60Dc81Gq.,@oWACX"tCK?TW75Cb&fq,am0/>hiMS3rYJb*giJc=UhcLfHql0mfDhEfYf
%MY)f`"Dg6%^Sl]h$p@U63/eTR7Lpt/P_Kk-n^p?)j%&uF+Da/b-%^H<e9JGK\['!W_B(!5&r1Ol-e;W&<HBtkGctq=hbiEG7Qkq/
%0anDg8I?3>Spr\sBqQX;+Y(u)(Z]\B)ni`C:(YN"!+/j>ZQ8HEJ`uD](CWW@k;=.9NjN"oJHd(d@K5+kj*#N3b0CHC#oM8W$PGa^
%!VU,FG,Kq<a83>hmoo5g8B\.`OUAKsX/"M)g0k"Y`VAL?Vr-_lT31-@A]b*$bG4Q?G7<;4Q*au'*]q%c2t54V%))+;bhCA58KT,)
%QmkB0fKl(mFZOa#8M1?hgF6qHkscAe1[/'44BK#-#V0NBj>94P;#Y+A;PJ8K(4$0iP!tXk^'mB/c:bd]=FJ0\9G-sO89W0+[`eUZ
%NHeV`^oNUV=$W,ln!$k.'"hsoPUg?@!kUb,?>Pk8'fN?q=g<`2.Ads_DX2(kM5D4rGIi"(h_kWs0r_2CTpEXNGpm"I0-erS']>:K
%A!en@\n."-N5L#"f1O,OI[SGr,gTD1;lC_[enJYLD^-"`<q.q5B3]"lC]mng9aPC@g)Ap1jdnJmU;D3B$nlk'Fq_o93E;T:HX3$b
%_<PK3[6\;ko^K$/XM/!;9o3\o,:OB"9e`dh,AB6T-73B#\?BMR2"38%_aR!_^$Wa5*MT`(8)ET;b-U#%9?rC,;6'KL$L!'rj:O,q
%*gBj!1b#SCMf^IdkXO3rmJ\%EB#&^Q66+1DmB8Z5]tX%P8Qnsg*m*FbQWY8PYEaErY$9LHo<9,)=^>o<T5F'XX/>MCd"Gsf&6g%-
%FbFNjdZnNQF`e]faWOpC?b(D#6h@lPIcVKf^aG`fg/aK/P0\\Cr'A9_#Zg9Q;R9`[.hdfKEYg"UnZ([S&M+]4Hd%_SgjX9#f^J"K
%P`NOY!j'WV7-YJ'5+oD$p,[lSR_Z>t(aLH!_5RbpO8Ctm"dPX]BaZP2ST.L9eE$VYb]X(WnhEjBEXPKmC1Sepp']]@;q92GKA>MP
%#4FE&1/m2m'CCU'2/&ZimV^3)i!OmJV"`UNDJK!Zp<6AlY&:q(.Nl)>Dj\*ZiRK.dUP3F+<;:@-#%8"EB?KpmH.<LI<l>,S+bRf9
%7IR7Lh"%u41QX^<D#1l6_s&HSmNpjbOF<]+dZtOPn2=tcmQ>ET6NYpGYY2HBQ'Our;9dVMCo_ohrtQr\GIOTbXACe2Z`alup4JH@
%JZ=\4nXjb)V+-K!r,oU:8JeI3p$t1,@HhnBn=V=O[7HnTWHWIrf+k>+'dZlH(Wm,(O;[:#R`E="GIBSI[:;1n\,M0k*!e>Mbd6#/
%kRij1UStUeB*6Z4F^1:-"MmN#dj%O,WQ)k]mBdDT@Ho<O5.,Lj>Kl"k8r_)e.or[l*nQAW(t2JfXgu1bYTcd9aWb*;=QdNmf0NoK
%?mAq2D/&tkaZsqm:V[F1QF"@^$9sI6?dLP8BQW3og!U"'eQ#GN_g_cQOr\*F6[/pdJ@?c:YVOIb$&^DBk-EchFu=3V&;]bdXj882
%-N+(<$`\9:IF;f[1F=_'+B[/h5Q^I?kh57Kb$YrUmkHCG-0g-+i53T[Y%XlbNc$DUn:.*=ERiT4.1`?EJRXNDU$?:m$7qs=:b?i@
%+>h9\l_e`:`;?'mD3N3%??A[_:rD%k&BfuK[;&!=RXaLeF667Tg]&@iE]Raqs,RE]MhC0"2/Ebr>Q1e()`ArpmNL5Z,-a922cE:b
%?lO[<]hr"60t2D@?KD5V;U<kh^\arI*'1#b;)DteSq/)SB/2E.5\b/6jZ`I*o`Sh\7lAX#fr?l*n/%@:X0RdHUH'b7UgB0D;[p%]
%.1!0nh"U*:r\#i?e]\nCN&421Y[YV/mur9LQoFFV=Dp`k0QJusi@oS/Di,R#7I8"A;8;$N\#3mA/$,9dc?0*rABWa=40X9T\jm1<
%Z0g<;W"M0J=Z*8Y]%E8hr*54#q6Z5&bTYYW!$G9)?s+Ej]@[&[g[Gpb_YXU*b7Ub:-K5Ve-J;2(1TE5"?XQh*dVLP]2&3TYjBB:7
%g7h`fCbR;>YVO>jBJrss,0+XEUE0DBN3i+^&r<#FDOMl,(f3!il;DW:&YTe#jRl49\sg0D;L\sc&<hVcA:Re!Y4m4#YWd0LVUH$F
%Oq2b.>B9emZXi"ZN]--jg)C]]ZML6SS>h9HK2#k!n]IFeH7L:h[QPp;fn:-[8pX:^GVA$!Np0aWG@g0=PGAqS&US$3QTq6DfRXJl
%2d(oYk;4-.Wp3Hi*lhZTNn315Jk6)&oC+9(!>@SRd7AZ+[U3M0#tDA36%c&"e2B]?UUQnIeaprRenBjlRGQM\!V@#V).QC3h?D;%
%a0=f:69$PVlK)0dG'\95=YqfOLhGO>.^1F/F+nd06"8mI/9utV;aS*Da6e;rS%ms;]6m=Gf`gf'%Q)/:9,Hdl(NC#m]GH9smOnVm
%MSicF*'PnZj,S.,>a'RuFC@kfo_)?JmWJ'L549r,)q[R3@++8*e*016o8ZZc]6;Jp3H5ob:6QR<1^[25E^;Mh:1<o[\fk`4!`K:M
%7j#7ZZt,6m=us7]c_H05*<'tnS'QZM$2;?8[kX9$Y`l?dghV_[)RFCUkr"1>ihE6gBS1;nhK5(A:d8b\G&HC:p9C9^C=94@b>\D3
%esCtbH[pG#1>1tA>815$+b-fNd?bHW^F>I-4!#AQHYk6@Cg\jH[N(JaW@h"7Oc\Ee^AW,A/:SacHU2+Kg4OK$3)s[.K>PqYA@eHu
%.^&NpVm9Qn]Rn1ApA3n,[>Wqc8eMt^Q<jDHVnKu`H7i4l:\p8p8^tD?Q^9OEZ"SrhpVi_(VTRHV-@N)ZB=6ZgF'C8XID]@QDd/'(
%T_uC0=g!>I4OmU$DX..bSG@!k*OQ,%,Qe,MjlL2niKC#N)S[kQPW)q]?Bhb6)%ls'Wsr4,Lp1`GSfY-5YcmI,=Mn%p>s39<FKZ=K
%24EA_btcKJ#%_iIPFA!3Sj!R0[eddK3uRqUS*OM/Z=Vl1,N(^TjRCe>Z/Acm5r5>SQ//l8.B(Pp\jDp,+h;A-V>]p2_B27T_k=.U
%LFZ"q]JJ8@#6bfjXo-mh24m3m7sg8j[D#b;%`455K3I,F1[P3`2bU`s*(,\cg5jm+0I;NIniHh<W$,oE>j89fio\%-Ya,K.c]`Xe
%$d5.t29&bdlZkOrY4dq>rB8pWiFA^DL^0<IZ*lll3;=*n\<G?f"I)-j5;,NdBP+N5;u;Fdq8dbY,dF:W4srLr+aun:IjL=-:i`o2
%(EU#g0M^cYmP,jk%E$!X]qVgb[h8n)1$Be#oJo<'h?WGeg6Lnpa]t;iS!0(9][8;dLst\Nj+epQFNoJuY)nLKh!-u<Ta<VB90:e)
%JZ:;Y9j/;&`5k<:W@,t4>J[;N:TPYM>\9FZJS5OfqQtH.bq2^a3(:NS=oD!.aKCkr(eT3I(Ff%I&sjF1OrMVAP`IpJoZQDs@Qa5C
%M9@d9:,54$[PEJS;1*XG6;'-sa0eeD3sL,`GLa+s:F*oohRoiQ+s\Wi%q<C:X\*?GJ<f94T<''I\Pqj7;#j+Sf)\U)Fm[qe:qi$u
%rqZq99GVt+;TH2/XUKU@(qd1XfrO5CNg@Tb'G?b]IE_1EC=)l8eZFW<V1Gq)gE>",!$$E(3i6%qO_CK^I%4DO@9Db%I4?)D8qusl
%7Z.s>U%%U9[CJLhj[6-<Z'T<9(b)B2@OiHM?j"R<Q)I=\$V`/5\Nl@5Y^-Fp[0$c>L^cgMF#`hSa"a@WYUF\aTK/@&W5phTml)=-
%a2-T.:8f:@>[LJk]fRZJWab8<YY[g\CS2k*C6dJoIJFQi'Ec3YN+&[=BBu'D;lF8C'<&P)Jh0>GBFP31E7O2_XK"1kcXPh,*':#D
%&NO,OnqAM_Zq^qn;DED##,aOu=MDMICgnYVRDZW;*_9qLS*A2CjNQ<1nCTf`I;Pg4!onjh[;_&\VMiNu;XKaGOZifbYJY9)*hXUi
%Sij$aXH].@2uG%(fpY#\^?[*9T.=7B+'uh1n5W?M@fN[a<>M+..J'[MPD6Y8E,*G:bQ_e//c1]mi!Nmp:K7:i=W4:<QGWasH"o"u
%LFutggk^9G(.n7-b%ZTt0#UAg&t0[TIN[Cm&f]@e>$H]pFS"hFen>BQm9&%=DfV[8O=)!gBf?L\WW'VT,/(IL;<Z7*4ge[<9Jqsh
%7[dc3Ddu-`):R-:2aXGsG@JcGTQ.E^br1!/OWK?u@l*On)%Ne]=2L6;c>cL<4(=Yf;k5.?jrf+L_R:&N1/2m:dC1PbMEFtPlrfLL
%_dT:Bda+KE%lpnVJ6i&4BiSV`48/+&_H')QA@IqXgCmcSpBj%%(1]p@k:]%had02%_G;2m(hg2T73K`RoA1.+s'Df^i%.-_/=dK$
%Uj"knBP=dU]iYO'7KQ'OM?(ICgl5H\K(4Xn.c%Us$+m:9S22a-!!fXUe;!R0@rq0km6fe(9=t[7U>NX![+)`_dZi^J9qjSL[*0hB
%65nP1@J1ThI+YZ$9;M8\au<aHmRZiJBH^<9)'UA3E7LG,qD@5P6]aYbHn/FdG84cpk6GD$f,TUBO/S?f8[_6fP6nd5e0'E\QW42H
%o?q6Y3iD71>4:S`3;5(-7#d&<A*,!DW<o(Q*oI!u$V7;Vb5CO221F!#eX)'\F.Dn^Nl-GM80PW8-:'kF+aBq/G3-:`4jCP!UoDWs
%;GtD1'fW-A[Dsjd"iZKKB6D00cL0uu[jmBah"%G7oiDsF<K5o_'M[kW\A'0cf1J2;;TGZhj:pU(D2]o%GE@n1+a+K?h*EdS<Q@S@
%T5/ZS.?T3P/da9HKl)GDQOTghp2&d1NUZ)g*hZBGB/1b(^;;VnkHBdf'432Wl+(1W",[9PWQ0>qcZhHU!Q[(J0$QoBoS8d:3Sgac
%3_OC:`F29]:U!1^QEqm,2[<L%W&k)PO^!'-I0-(@G+H&FL30T:IBd*fJ+J-c4K&u8m,p6?kfa9S9e+LNLWhWTjP5oojdMcJPA=&"
%Z]=2pXn']rE_3=A8Y/RYANp9(P!1U-050b,dCu8\S\)FsBM<2G[DKU$:5kbFpJgKFX7]"FlIjWb>HoknF-p%rZmUc&?.4Q?okp1H
%c?K%.I<Q`/.oS:13(8cS51jqnGZdnL7!tYP!0AHOqr**9Z:)oF\S_bM<Lino/06idb09kSl.3DsNsc:QYFROOY6H(:54qi'i//Zb
%]kmJkQM0m3fUb0,T'>DXFX#$OFcGNhUb3:Y/imYj2o9uM(*IE0RT2G<[s&p?,)5/.C/k'JGiuVhIf,)9^M=9U"=Ae,O\aH,bV\_/
%m+7Bas%'58p0UW"0^*5Cn->7PY38A;:,a#,*M&jM@F_Ug\8I04=3VLOHPZPhjD\s5J7Ss4ZLiF<HK(ZfL6Sq.NCCHO?$KAWeTVnA
%;s`rI+[_ak&=!/uI_Z%Yl(r,;]>i+hQOe3T\^P2[e#dsDUd3HaellNTV+BiDo)'G2ZJbAAJFh5T:Ve.Cm@7IScaO7eg2L19br)l-
%c^=e]b-B$b@A7+2`ZELi824dHK(-$Hl2I6+VP,M:r/O4l'IT-pkQij%G@mPh8.%uUBO%pFYkeMpIa2BpmE]&'Pn29.ee!6N^%1*]
%FD4o=R5e$=2$=`jT)<]6f'qGZlCJ?"LF5Qh4>>e`,iTaYmp(ds\A^=_lW)EA`<KWN/AWoSBD#mB^<+,9'tVhpg`]GZp0M*XSDr*[
%?\7&N.+1bMX2um\+;_KJ1Wl9'.HqKlaQ_Moj!Dd;Fsq_IE`LralQsW/S^dO0O?:lXHjOiART]S8aH]T^?@ps@\)1h[Wt>kl$$(/I
%Bm,S:+a2]smf(-\`mn@0feKYLI-Zf4_Kq47(?5s[SZaaX#I2ktGPXXt0hs\#/]-'%cJB-cS',GtgUrE1#^7+hHj;WP`a7\08R_(J
%DaG&-0C_b'g#maBD^o?"!_[pihu,[/nI92u$m`Pi%)"mc)l=V8-,)\FYNK\K'1sR=JZB_?[(.46`3HE04hMN!0g<KZ$L#h*<d**p
%%WCC1JLA0k34.T59a01@"=!AqZWlhm6Kpk!flhblq:>L'iJiF`AcUe,6oK>22r,7,h(S:M&j+G7[UmMIppQ/s?fIQP8ACbd%D`4X
%loVqH=AHTK2\D9\U0EV`mn7c'nPm&o>:0;AE'$c8Hj7&9qAsj"4)Gr9'&1oglK^%1n`%4#[Ngao4179YX"VuQGW`Qd/T..J=mbbC
%rFWaEeak[cHg^4s;9/b,?/++k`uC)[A%diSj3^\&Ie,V\nb@PSnp%NW,Vj8QdC''%>@oSu[<m9?!E&F\rMUpf!kuf$Gf-\13Oq.W
%`dDgoXSXC"D*[oC)Xlj4()oi[St*f"]RLl7.\XMGS>61Nq`dkoH#rh*EZ'3e3I\;?D^W$?itl?0r=%T/Y2Ur%2?9TBp#H7CPSi-G
%j?u:^9_#TUgLG.L=,i=@dm#f$S_W[`qrujbqNq2R^\dVPrVl\T++O:fq9uh1rnI0sr:*"#rr.EHo]+8irqP+6^]+#QpOE26?iKct
%hgYL\a+(i!j3Kshol#?Uq8[FQqVQeu]1*h`fnY(SmI1&IT0N8ra$:L(~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial 20003 1981 a
 currentpoint currentpoint translate 1 1.49728 div 1 1.49728 div scale
neg exch neg exch translate
 20003 1981 a 911 18555 a
 currentpoint currentpoint translate 36.15425 36.15425 scale neg exch
neg exch translate
 911
18555 a @beginspecial 0 @llx 0 @lly 46 @urx 24 @ury 460
@rwi @setspecial
%%BeginDocument: lion-coward.eps
%!PS-Adobe-3.1 EPSF-3.0
%%Title: lion-coward.ai
%%Creator: Adobe Illustrator(R) 11
%%AI8_CreatorVersion: 11.0.0
%AI9_PrintingDataBegin
%%For: PC
%%CreationDate: 12/1/2005
%%BoundingBox: 0 0 46 24
%%HiResBoundingBox: 0 0 45.3262 23.5992
%%CropBox: 0 0 45.3262 23.5992
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)
%%+ procset Adobe_CoolType_Core (2.23 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: (PANTONE 124)
%%CMYKCustomColor: 0 0.2750 1 0.0600 (PANTONE 124)
%%RGBCustomColor: 
%ADO_ContainsXMP: MainFirst
%AI7_Thumbnail: 128 68 8
%%BeginData: 12146 Hex Bytes

%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD4BFFCFCFC9FD7CFFC9CEA7CFFD7AFFCFC9CFC9CFCFFD54FFA8CF
%C9CFCAFD20FFCFC9CEA7CECAFD05FFA8CFCACFA7CFFD49FFCFCFC9CFC9CF
%CFFD1FFFCECFC9CFC9FFFFFFCFCFC9CFC9CEC9CFCFFD40FFCFCFA7CFC9CE
%CAFFCFCEA7CFC9CEA7CFFFFFC9CFC9CEA7CFCFFD15FFCACEC9CEA7CFFFCF
%A7CEC9CEA7CFC9CECAFD40FFCFCFC9CFC9CFC9CECFFFC9CFC9CFC9CFC9FF
%CFCEC9CFC9CFC9CFCFFD14FFCFC9CFC9CECFFFC9CEC9CFC9CFC9CFFD41FF
%CFCEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CFFD14
%FFCACEA7CEC9CEA7CEC9CEA7CEC9CFFD43FFC9CFC9CFC9CFC9CFC9CFC9CF
%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9FD13FFCFCFC9CFC9CFC9CFC9CFC9CF
%CEFD40FFCACFC9CFCFCEA7CFC9CEA7CFC9CEA7CFC9CEA7CFC9CEA7CFC9CE
%A7CFC9CEA7CFCFCFC9CFCAFD0BFFC9CEA7CEC9CEA7CEC9CEA7CFC9CEC9FD
%40FFC9CEC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF
%C9CFC9CFC9CFC9CEC9CECFFD08FFCFC9CFC9CFC9CFC9CEC9CFC9CEC9CFC9
%CFC9CFCFFD3CFFCACEA7CEC9CEA7CFC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7
%CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CECFFD05FFCACFC9CEA7CEC9CEA7
%CFCACFA8FFC9CEA7CEC9CEA7CECAFD3CFFC9CFC9CFC9CFC9CFC9CFC9CFC9
%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9FD06FFCF
%C9CFC9CFC9CFCFFD07FFC9CFC9CFC9CFC9FD11FFCFFFCFFFCFFFCFFFCFFD
%22FFCFCEA7CFC9CEA7CFC9CFA7CEC9CEA7CFC9CEA7CFC9CEA7CFC9CEA7CE
%C9CEC9CFC9CEA7CFC9CEA7CFFD06FFA7CEC9CEA7CFFD08FFCACEA7CEC9CE
%A7CFFD0AFFCFFFCACFC9CFC9CEA7CEC9CEA7CEC9CEA7CFC9CFCAFD1EFFCF
%CEC9CFC9CFC9CFCFFFCFCFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFCFFFCF
%CFC9CFC9CFC9CECFFD05FFCFCEC9CFC9CFFD08FFCACFC9CEC9CFCFFD09FF
%CFCFC9CFC9CEC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9CFFD1DFFCA
%CFA7CEC9CEA7FD05FFCFCFA7CEC9CEA7CEC9CEA7FD06FFCFA7CEC9CEA7CF
%CAFD06FFCFC9CEA7CEC9FD07FFC9CEA7CFCAFFCAFD05FFCFCFA7CFC9CEA7
%CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CECAFD1EFFC9
%CFC9CFCFFD06FFCFC9CFC9CFC9CFC9FD07FFCACFC9CFC9FD09FFCFCFC9CF
%C9CFFD10FFCFFFCECFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9
%CFC9CFC9CFC9CFC9CFC9CECFFD18FFCACFC9CFCFCFC9CEA7CEC9CFCAFFFF
%FFA7CEC9CEA7CFC9CEC9FFCFCFCACFC9CEA7CFC9CFFFFFC9CFCAFD05FFC9
%CEA7CFC9CFCFFD0BFFCACFC9CEA7CEC9CEA7CFC9CEA7CEC9CEA7CEC9CEA7
%CFC9CFC9CFC9CFA7CFC9CEA7CFC9CEA7CFC9CECAFD16FFCFCEC9CFC9FFC9
%CFC9CFC9CFC9CEC9FFFFCFC9CFC9CFC9CFC9CFFFCFC9CEC9CFC9CFC9CFC9
%FFCFCEC9CECAFD04FFCFC9CFC9CFC9CFCAFD05FFCFFFCFCFC9CEC9CFC9CF
%C9CFC9CFC9CFC9CFC9FD04CFFFCFFD0BFFCFCEC9CFC9CFC9CFC9CFFD16FF
%CFC9CEA7CFFFCEA7CEC9CEA7CEC9CEA8FFC9CEA7CEC9CEA7CEC9FFA7CEC9
%CEA7CEC9CEA7CFFFCFA7CEC9CFFD04FFCACEC9CEA7CEC9CEA7CEC9CEA7CE
%C9C9A7CEC9CEA7CEC9CEA7CEC9CFA8CFCFFFCFFD11FFCACEA7CEC9CEA7CE
%C9CFFD16FFCFC9CFC9FFCFCFC9CFC9CFC9CFC9FFFFCFC9CFC9CFC9CFC9CF
%FFCFC9CFC9CFC9CFC9CFFFFFC9CFC9CECFFD06FFCFC9CFC9CFC9CFC9CFC9
%CFC9CFC9CFC9CFC9CFC9CFC9CFCFFD19FFCFCFC9CFC9CFC9CECAFD08FFCA
%CFC9CEA7CFFD08FFCFCFC9CFFFFFA7CEC9CEA7CFC9CECAFFC9CEA7CEC9CE
%A7CECAFFCACEC9CEA7CFC9CEC9FFFFCFC9CFCAFD08FFCFA7CEC9CEA7CEC9
%CEA7CFC9CEA7CEC9CEC9CFCFFD1CFFCFA7CFC9CEA7CFC9CEFD07FFCFCEC9
%CFC9CEC9FD0DFFC9CFC9CFC9CFC9CFC9CFFFFFCFCFC9CFC9CFCAFFFFCFC9
%CFC9CFC9CFC9CFC9FD0FFFCFCFC9CFC9CFC9CEC9CFC9CFC9FD21FFCFCEC9
%CFC9CFC9CFC9FD06FFCACEC9CEA7CEC9CEA7FFCACEA7CFCFFD04FFCFA7CE
%C9CEA7CEC9CEA7CEC9FD05FFCFFD05FFC9CEA7CEC9CEA7CEC9CEA7FD13FF
%A8CFCACFA8FD23FFA7CEC9CEA7CEC9CEA7CFFD06FFCFC9CFC9CFC9CFC9CF
%CFCFC9CFC9CFCFFFFFFFC9CFC9CFC9CFC9CFC9CFC9CFC9FD09FFC9CFC9CF
%C9CFC9CFC9CFC9CFCFFD37FFCFCFC9CFC9CFC9CFC9CFC9CFCFFD06FFCACE
%C9CEA7CFC9CEA7CFC9CEA7CFC9CFFFFFFFCFA7CEC9CECAFFC9CEA7CFC9CE
%A7CFC9CFCACFC9CFA7CEC9CEA7CEC9FFC9CEC9CEA7CFFFFFCACFC9CFC9CF
%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF
%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEA7CEC9CEA7CFC9CEA7CFC9CEA7CF
%FD07FFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9FD04FFCFC9CFCFFFFFFFCFCF
%C9CFC9CEC9CECFFFC9CEC9CEC9CFC9CFCAFFFFFFCACFC9CFFFFFCFCEC9CF
%C9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CFC9CE
%C9CFC9CEC9CFC9CEC9CFC9CEC9CFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CF
%C9CFFD08FFCFA7CEC9CEA7CEC9CEA7CEC9CEA7CFFD06FFCAFFFFFFCAFFCF
%CFA8CFCACFCAFFFFFFA8CFCACFA8CFFD06FFCAFFFFFFA8CEC9CEA7CEC9CE
%A7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CE
%C9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9C9A7CFFD09
%FFCFCFC9CFC9CFC9CFC9CFC9CFC9CFCFFD09FFC9CFCFFD11FFCACFFD06FF
%CFCFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF
%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF
%C9CFC9CFCFFD0CFFCFCFC9CEA7CFC9CEA7CFC9CEC9FD09FFC9CEA7CEC9FF
%CFFFCFCFC9CFC9CFCAFD05FFC9CEA7CFFD04FFCFCEA7CFC9CEA7CFC9CEA7
%CFC9CEA7CFC9CEA7CFC9CEA7CFC9CEA7CFC9CEA7CFC9CEA7CFC9CEA7CFC9
%CEA7CFC9CEA7CFC9CEA7CFC9CEA7CFC9CEA7CFC9CFCAFD0EFFCFCFC9CFC9
%CFC9CFC9CFC9CFC9CFFD09FFCFC9CFC9CFFFCFC9CFC9CEC9CFC9CEC9CFCF
%FFC9CFC9CFC9FFFFFFCFCFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9
%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9
%CFC9CFC9CFC9CFC9CFC9CFCFFD0EFFA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9
%CFFD08FFA7CEC9CEA8FFCAC9A7CEC9CEA7CEC9CEA7CECFCFA7CEC9CECFFF
%CACEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CE
%A7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CE
%C9CEA7CECFFD0DFFCFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFFD08FFCFCF
%CFFFFFFFC9CFC9CFC9CFC9CFC9CFCFFFFFCFC9CFCFFFCFCFC9CFC9CFC9CF
%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF
%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFFD0D
%FFA7CEC9CEA7CFC9CEA7CEC9CEA7CFC9CEA7CFCAFD0CFFCFA7CEC9CEA7CF
%C9CEA7FD07FFCACEC9CEA7CFC9CEA7CFC9CEA7CFC9CEA7CFC9CEA7CFC9CE
%A7CFC9CEA7CFC9CEA7CFC9CEA7CFC9CEA7CEC9CEA7CEC9CEA7CFC9CEA7CF
%C9CEA7CFC9CEA7CFC9CEA7CEC9CFFD0CFFCFC9CFC9CFC9CFC9CFCACFC9CF
%C9CFC9CFC9CFC9CFCFFFFFFFCFCFC9CFCFFFFFCFC9CFC9CEC9CFC9FFFFFF
%CFCFCFFFCFCEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF
%C9CFC9CFC9CFC9CFC9CFC9CEC9CFCECFCFFFCFCFC9CFC9CFC9CFC9CFC9CF
%C9CFC9CFC9CFC9CFC9CFC9CFC9CFCFFD0AFFCFCEA7CEC9CEA7CFFFFFA8CF
%C9CEA7CEC9CEA7CEC9CEA7CFC9CEA7CEC9CEA8FFFFFFA8CFCACFA8FFFFFF
%CFCFC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CE
%C9CEA7CEC9CEA7CEC9CEA7CEC9CFCAFD06FFCFA7CEC9CEA7CEC9CEA7CEC9
%CEA7CEC9CEA7CEC9CEA7CEC9CEA7FD0AFFCFCFC9CFC9FD06FFCFC9CFC9CF
%C9CFC9CFC9CFC9CFC9CFC9CFC9CFCFFD0BFFC9CFC9CFC9CFC9CFC9CFC9CF
%C9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFFD0B
%FFCFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFCAFF
%FD05CFFFFFCACFCFFD05FFCACFC9CEA7CFC9CEA7CFC9CEA7CFC9CEA7CFC9
%CEA7CEC9FD09FFA7CEC9CEA7CFC9CEA7CFC9CEA7CEC9CEA7CFC9CEA7CFC9
%CEA7CFC9CEA7CFC9CEA7CFC9CEA7CEC9FD0EFFCFC9CEA7CFC9CEA7CFC9CE
%A7CFC9CEA7CFC9CEA7CFC9CEA7CFC9CEA7CEC9CEA7CFFD09FFCFCFC9CFC9
%CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFCFFD07FFC9CEC9CFC9CFC9
%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9
%CFCFFD07FFCFCFC9CFCFFD04FFCFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF
%C9CFC9CFC9CFC9CFC9CFC9CFC9CFCFFD0CFFCACFCACFA7CEC9CEA7CEC9CE
%A7CEC9CEA7CEC9CFCAFD05FFCFCFA7CEC9CEA7CEC9CEA7CEC9CEA7CECAFF
%A7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CFCFFD05FFA8CFC9C9
%A7CEC9CECFFFFFFFCACEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CE
%C9CEA7CEC9CEA7CFFD13FFCFCEC9CFC9CFC9CFC9CFC9CFCFFD07FFCFCFC9
%CFC9CFC9CFC9CFC9CFC9CFC9CFC9FFFFFFC9CFC9CFC9CFC9CFC9CFC9CFC9
%CFC9CFC9CFC9CFFD06FFC9CFC9CFC9CFC9CFC9CFFD04FFCFCFC9CFC9CFC9
%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9FD16FFCFCEA7CFC9CEA7
%CEC9CFCAFD05FFCFCFA7CEC9CEA7CFC9CEA7CFC9CEA7CFC9CEA7CEC9FFCF
%CFC9CEA7CFC9CEA7CFC9CEA7CFC9CEA7CFC9CFFD04FFCACFC9CEA7CFC9CE
%A7CFC9CEA7CFFD04FFCFCFA7CEC9CEA7CFC9CEA7CFC9CEA7CFC9CEA7CFC9
%CEA7CEC9FD18FFCFCFC9CFC9CEC9FD07FFCACFC9CFC9CFC9CFC9CFC9CFC9
%CFC9CFC9CFC9CFC9CFCFFFCACFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFFD
%04FFCFCEC9CFC9CFC9CFC9CFC9CFC9CFC9CFFD05FFCFC9CFC9CEC9CFC9CF
%C9CFC9CEC9CFC9CFC9CFC9CFC9CFFD19FFCFCEA7CFCAFD05FFCACFC9CEA7
%CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7FFFFFFCACFC9CEA7CEC9
%CEA7CEC9CEA7CEC9CFCFFFFFFFA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7
%CECFFD05FFA8CFC9CEA7CFC9CEA7CFC9CEA7CEC9CEA7CEC9CEA8FD1AFFCF
%CFFD06FFCFCFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CF
%FD06FFCFCFC9CFC9CFC9CEC9CFCFFD05FFC9CFC9CFC9CFC9CFC9CFC9CFC9
%CFC9CFC9CFC9FD11FFCFCFC9CFC9CFC9CFC9FD20FFCFCFC9CEA7CFC9CEA7
%CFC9CEA7CFC9CEA7CFC9CEA7CFC9CEA7CFC9CEA7FD09FFCFCFCAFD04CFFD
%05FFCFCEA7CFC9CEA7CFC9CEA7CFC9CEA7CFC9CEA7CFFD11FFCFA7CFC9CE
%A7CFC9CFFD10FFCFC9CFCFFD0BFFCFCFC9CFC9CFC9CFC9CFC9CFC9CFC9CF
%C9CFC9CFC9CFC9CFC9CFC9CFC9FD1BFFCFCFC9CFC9CFC9CFC9CFC9CFC9CE
%C9FD11FFC9CEC9CFC9CFC9CFC9FD0FFFCFC9CEA7CEC9CFFD06FFCFCFA7CE
%C9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7FD1CFF
%CFC9CEA7CEC9CEA7CEC9CEA7CEC9CECAFD0FFFCACEC9CEA7CEC9CEA7CEC9
%FD0EFFC9CFC9CFC9CFC9CFFD04FFCFCFC9CFC9CFC9CFC9CFC9CFC9CFC9CF
%C9CFC9CFC9CEC9CFC9CFC9CFC9CFC9CFFD1BFFCFC9CFC9CFC9CFC9CFC9CE
%C9CFCECFC9CFFD10FFC9CFC9CFC9CFC9CFC9CECFFD0CFFCACEC9CEA7CFC9
%CEA7CFCFCFA7CEC9CEA7CFC9CEA7CFC9CEA7CFC9CEA7CFC9CEA7CFCACFCA
%CFC9CEA7CFC9CECAFD19FFCFCFA7CEC9CEA7CFC9CEA7CECAFD05FFCFFD0F
%FFCACEC9CEA7CFC9CEA7CEC9CECFFD0CFFC9CFC9CFC9CFC9CFC9CFC9CFC9
%CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFCFFD07FFCFCEC9CFC9FD19FFCA
%CFC9CFC9CFC9CFC9CFC9CFCFFD11FFCFFD04FFCFC9CFC9CFC9CFC9CEC9CF
%FD0FFFA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9C9A7CEC9
%CFCFFD09FFCACFA7CFFD18FFC9C9A7CEC9CEA7CEC9CEA7CECFFD10FFCFA7
%CEC9CECAFFC9CEA7CEC9CEA7CEC9FD10FFCFCFC9CFC9CFC9CFC9CFC9CFC9
%CFC9CFC9CFC9CFC9FD04CFFFCFFD1DFFCFFFCFFD07FFC9CEC9CFC9CFC9CF
%C9CFC9CFCFFD10FFCFC9CFC9CFC9CFC9CFC9CFC9CFC9CFCFFD0EFFC9CEC9
%CEA7CFC9CEA7CFC9CEA7CFC9CEA7CFC9CEA7CEC9FD23FFCFCEA7CEC9CFFF
%FFCFCFA7CEC9CEA7CFC9CEA7CFC9CECAFD11FFC9CEA7CFC9CEA7CEC9CEA7
%CFC9CFCFFD0EFFC9CEC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9CEC9
%FD24FFCFC9CFC9CFC9CFCFCFC9CFC9CFC9CFC9CFC9CFC9CFCFFD12FFCFC9
%CFC9CFC9CFC9CFC9CFC9CFFD0FFFA8CEC9CEA7CEC9CEA7CEC9CEA7CEC9CE
%A7CFCFCFA7CEC9CFFD23FFCFA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9CEA7CE
%C9CFCAFD13FFCACFC9CEA7CEC9CEA7CEC9CEA7CFCACFCAFD0CFFC9CFC9CF
%C9CFC9CFC9CFC9CFC9CFC9CFFD05FFCFCFFD23FFCFCFC9CFC9CFC9CFC9CF
%C9CFC9CFC9CFC9CFC9CFFD18FFCFCFC9CFC9CFC9CFC9CFC9CEC9CFCFFD0B
%FFCFC9CEA7CEC9CEA7CFC9CEA7CFC9CECAFD2BFFCFCFC9CEA7CFC9CEA7CF
%C9CEA7CEC9CEA7CECFFD17FFCFCEA7CFC9CEA7CFC9CEA7CFC9CEA7CECFFD
%0CFFC9CFC9CFCFFFFFCFC9CFC9CFC9CFFD2AFFCFCFCACFC9CFC9CFC9CFC9
%CFC9CEC9CFC9CFC9FD17FFCFCFC9CFC9CFC9CFC9CFC9CFC9CFC9CFC9FD10
%FFCFFFFFFFA7CEC9CEA7CEC9FD28FFCFA7CEC9CEA7CEC9CEA7CEC9CEA7CF
%CFFFA8CFC9CEA7FD16FFCFA7CEC9CEA7CEC9CEA7CEC9CEA7CEC9C9A8FD13
%FFCFC9CFC9CFC9CFFD28FFC9CFC9CFC9CFC9CFC9CFC9CFC9FD07FFC9CFCF
%FD15FFC9CFC9CFC9CFC9CFC9CFC9CEC9CFC9CFC9FD15FFCFC9CEA7CFCFFD
%27FFCACEA7CFC9CEA7CFC9CEA7CFC9CECFFD07FFCAFD16FFCFA7CFC9CEA7
%CFC9CECAFFCACEA7CEC9CFFD17FFCFFD2AFFCFC9CFC9CFC9CEC9CFC9CFC9
%CFC9CFFD1FFFCFC9CFC9CFC9CECFFD05FFCFFD44FFA8CEC9CEA7CEC9CFA7
%CEC9CEA7CEC9FD20FFCFA7CEC9C9A7FD4CFFCFCEC9CFCFFFFFCFC9CFC9CF
%C9CFFD22FFCFCFCFFD4EFFCACFCAFFFFFFCACEC9CEA7CFCFFD7AFFFD04CF
%FDB6FFFF
%%EndData
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 68 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/agm_sethalftone
{ 
	dup
	begin
		/_Data load
		/Thresholds xdf
	end
	level3 
	{ sethalftone }{
		dup /HalftoneType get 3 eq {
			sethalftone
		} {pop} ifelse
	}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ imageDict begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height { 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 
	dup type /dicttype eq
		{
			AGMCORE_tmp
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			AGMCORE_tmp exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	AGMCORE_tmp 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		/CSD known
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 216 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_gradientcache 32 dict def
/AGMCORE_in_pattern false def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/add_grad
{
	AGMCORE_gradientcache 3 1 roll put
}bdf
/exec_grad
{
	AGMCORE_gradientcache exch get exec
}bdf
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&usrshfill /shfill load def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not currentpagedevice/OverrideSeparations known and
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		/AGMCORE_IsSeparationAProcessColor
			{
			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				gsave
				false setoverprint
				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
				currentgray 0 eq 
				grestore
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				clonedict
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					currentdict end
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 xpt
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 xpt
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/currentpagedevice currentpagedevice def
/getrampcolor {
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
ColorSpaceFamily /Separation eq
	{
	sep
	}
	{
	ColorSpaceFamily /DeviceN eq
		{
		devn
		}
		{
		setcolor
		}ifelse
	}ifelse
} bind def
/sssetbackground { aload pop setcolor } bind def
/RadialShade {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bind def
/GenStrips {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bind def
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		6 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get 0 get null eq {
					dup /Names get names_index get /name xdf
					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
					or or or not {
						/AliasedColorants false def
						exit
					} if
				} if
			} for
			AliasedColorants {
				dup begin
				/Names new_names def
				/AliasedColorants true def
				/LookupTables new_LookupTables def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				currentdict /NComponents known not {
					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			Names {
				AvoidAliasedColorants {
					/currentspotalias current_spot_alias def
					false set_spot_alias
				} if
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				AvoidAliasedColorants {
					currentspotalias set_spot_alias
				} if
				/names_index names_index 1 add def
			} forall
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				/setcolor ldf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSD known {
			CSD get_csd /Names known {
				CSD get_csd begin
				currentdict devncs
				AGMCORE_host_sep{
					4 dict begin
					/devnCompCnt Names length def
					/NewLookup HiVal 1 add string def
					0 1 HiVal {
						/tableIndex xdf
						Lookup dup type /stringtype eq {
							devnCompCnt tableIndex map_index
						}{
							exec
						} ifelse
						setdevicencolor
						currentgray
						tableIndex exch
						HiVal mul cvi 
						NewLookup 3 1 roll put
					} for
					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
					end
				}{
					level3
					{
					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
					[/Indexed MappedCSA HiVal
						[
						Lookup dup type /stringtype eq
							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
						]cvx
					]setcolorspace_opt
					}ifelse
				} ifelse
				end
			}{
			} ifelse
			set_crd
		}
		{
			/MappedCSA CSA map_csa def
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {
			begin
			CSD get_csd begin
			map_indexed_devn
			devn
			end
			end
		}{
			AGMCORE_gget/Lookup get 4 3 -1 roll map_index
			pop setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {
			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		1 dict begin
		/name xdf
		AGMCORE_CSA_cache
		{
			0 get name eq {
				exit
			}{
				pop
			} ifelse
		}forall
		end
		end
	}{
		pop
	} ifelse
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
		dup wrap_paintproc
	}if
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	  begin
		/OldPaintProc /PaintProc load def
		/PaintProc
		{
		  mark exch
		  dup /OldPaintProc get stopped
		  {closefile restore end} if
		  cleartomark
		}  def
	  end
  } {pop} ifelse
} def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		dup /customcolor_tint exch AGMCORE_gput
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.23 0
%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.23 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.23 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel
		2 copy known not
			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 2 sub 1 index lt
				{ pop count 1 sub }
			if
			dup /argCount exch def
			dup 0 gt
				{
				exch 1 index 2 add 1 roll
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count 1 sub /restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup begin
		mark
			{
				(*) { pop stop } 128 string /Category
			resourceforall
			}
		stopped
		cleartomark
		currentdict eq dup
			{ end }
		if
		not
		}
		{ false }
	ifelse
	def
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
	userdict /Adobe_CoolType_Data 10 dict dup
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end put
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.19 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	currentcolorspace 0 get dup /DeviceCMYK eq {
		pop 4
	}
	{
		/DeviceRGB eq {
			pop 3
		}{
			1
		} ifelse
	} ifelse
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/srcDataStrs xdf
	/dstDataStr xdf
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/samplesNeedDecoding
		0 0 1 origDecode length 1 sub {
			origDecode exch get add
		} for
		origDecode length 2 div div
		dup 1 eq {
			/decodeDivisor 2 origBitsPerComponent exp 1 sub def
		} if
		2 origBitsPerComponent exp 1 sub ne
	def
	[
		0 1 dsCnt 1 sub [
			currentdict /origMultipleDataSources get {
				dup currentdict /origDataSource get exch get dup type
			}{
				currentdict /origDataSource get dup type
			} ifelse
			dup /filetype eq {
				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx
			}{
				/stringtype ne {
					/exec cvx
				} if
				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx
			} ifelse
		] cvx /for cvx
		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [
			0 1 Width 1 sub [
				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx
				currentdict /origMultipleDataSources get {
					0 1 dsCnt 1 sub [
						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx
						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs
								BitsPerComponent /decode_image_sample load /exec cvx
							} ifelse
						} if
					] cvx /for cvx
				}{
					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx
					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx		
					currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 
					[
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx
								BitsPerComponent /decode_image_sample load /exec cvx
								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx
							} ifelse
						} if
					] cvx /forall cvx
				} ifelse
				currentdict /convProc get /exec cvx
				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [
					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx
					currentdict /convProc get /filter_indexed_devn load ne {
						255 /mul cvx /cvi cvx 
					} if
					/put cvx 
				] cvx /for cvx
			] cvx /for cvx
			currentdict /dstDataStr get
		] cvx /if cvx
	] cvx bind
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	2 dict begin
	dup dup
	/dstDataStr exch /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						dstDataStr srcDataStrs devn_alt_datasource /exec cvx
						] cvx 0 () /SubFileDecode filter def
					/MultipleDataSources false def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA map_csa 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							[
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							dstDataStr srcDataStrs devn_alt_datasource /exec cvx
							] cvx
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource [
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								dstDataStr srcDataStrs devn_alt_datasource /exec cvx
								] cvx 0 () /SubFileDecode filter def
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get map_csa
				}{
					/CSD get get_csd /Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
					CSD get_csd begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: lion-coward.ai 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about='uuid:5aa1a37f-1440-4669-91e9-ac06520ecd66'
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
  <pdf:Producer>Adobe PDF library 6.66</pdf:Producer>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:5aa1a37f-1440-4669-91e9-ac06520ecd66'
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:5aa1a37f-1440-4669-91e9-ac06520ecd66'
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2005-12-01T14:05:30+11:00</xap:CreateDate>
  <xap:ModifyDate>2005-12-01T03:06:19Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:MetadataDate>2005-12-01T14:05:30+11:00</xap:MetadataDate>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>136</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAiAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FVskscYq7BR75Cc4xFk0kRJ5LYriGX+7cN7d/uwY80Z/SUyiRzVMsYuxV2KuxV2KuxV2KtMwVSzG&#xA;gG5OAkAWVASq61KSQlYjwTxHU5p8+tlLaOwcuGEDmi9NgZIjI32pN/o7ZmaLEYx4jzk1ZpWa7kS0&#xA;sSGjuqn3IGZUskRzIDUIkrPrVtWnqrX5jIePj/nBPBLuVcuYuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KrJ5lhiMjdB28TleXIIR4iyjGzSUyaldMxKtwHYAD+OaeetyE7GnKGGIX2+pzLIBKeSHY7&#xA;Co99snh10gfVuESwitlC7lMtw7VqK0XwoOmUajJxzJZ440FJHZGDKaMNwcpjIg2GRFo+51N6hYTT&#xA;YFm67ntvmxz648oNEMI6qC6hdg1519iBmONZkHVsOKKZ2d0txHWlHXZhm102oGSPm4uSHCVfMhg7&#xA;FXYq7FUJqjMLWg6FgG+XXMLXkjHt3tuEepKYwpkUPstRyPtmnhXEL5OWeSKutQkkJWM8IxsKbE5l&#xA;6jWSkajtFqhiA580IqszBVBZj0A65hgEmg2k0mlnpwjIkm3cbhewzbabRcPqlzcbJlvYI7Ng0OxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVL7zUZElMcQHw7Fjvvms1OtlGXDHo5GPECLKGlvpJoTHIAe&#xA;6sNtx45iz1Upx4ZNgxgGwhcxW12KuxV2KuxV2Koi3u3t0bgAWem57Af7eZGHUHGDXMtc4cR3VodV&#xA;mDj1AGSu9BQ5fj18gfVuGEsI6Jrm4cVbLKkSF3NFGQyZBAWUxiSaCVzapMxIiHBex6nNVl18j9Ow&#xA;cmOEDmhi88poWZz2G5zEM5z5kltoBcLS5Ir6Tfdkvy+T+aUcce9SIIJDChHUHrlRFGiyRlreW0Ao&#xA;IjU/aeoJOZ2DU48f8PxaZ4zLqmqOroHX7LCo+nNtGQkLDjEU3kkOxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxVKNQtZEmaQKTG29R2PeuaXWYJCRkBsXLxTBFIPMJuRlvp7TweorgNUgKem2ZuHRnJDiBa&#xA;ZZeE0sk0+6Svwch4rv8Ah1yE9Hkj0tIyxKHIINDsR1GYpDY1ilXisrmQAqhoe52/Xl8NNklyDWck&#xA;QrnS3WJ3dwCoJAG/QV9syDoCIkk8mHjAmggcwG9Wt7aWZwFB4/tN2Ay7DglM0OTCcwAnudC4KWav&#xA;IeaR9gOX37Zqu0ZmxFycA2tCWsPrTrGTQHqfYb5h4MXHMRbZyoWnkcUca8Y1Cj2zfQxxiKApwjIn&#xA;mtnuI4Vq1ST9lRuTkcuaMBumMCUokjup5Wk9JviPgaffmmnDJkkZcJ3csGMRVq0GlysazfAvgNyc&#xA;vxaCRPq2DCWYdEzrHEgBIRFFBU0H45tLjEdwcbcqEmo2qftcj4KK/wBmY89bjj1tsGKRQz6uf2I/&#xA;kWP8BmNLtHuDMYO8qL6ndN0IX5D+tcolrsh8mwYYqTXt03WVvo2/VlR1OQ9SyGOPc19auf8Afr/e&#xA;cj4+T+cfmvBHuXLfXa9JD9ND+vJjVZB1Qcce5Wj1WdacwHHfscvh2hMc92BwDoj7a9hn2U8X/lPX&#xA;6M2GHUxycubTPGYq+ZDW7FXYq7FXYq07BEZzuFBP3ZGcuEE9yQLKUnVLotUEAeFM0512QlyvBip6&#xA;gKXkn0H8BlesFZSyxfSFkN1PDtG1B/L1GQx55w5FMoA80xsb6SeQo6gUFaj50zZ6XVSyGiHHyYxE&#xA;WEqJqST3zTlymsCU0N3JDYwuqgkjjv7ZtjqDDFEgOLwAyKDlvrmUEFqKeqrtmFk1eSexOzdHHEKC&#xA;glgBuSaDMeIssymd/eTQzBIyAONTtXepza6vUzhKo9zjYsYI3VrG6a4jJYUZTQ06HL9JnOSO/MMM&#xA;sOEqGrQkqsoFeOzfLtmP2hiJAkOjZgl0S6OR43DoaMvTNZCZibHNyCLFJnFqsJH7xSh7kbjNrj7Q&#xA;ifqFONLAeiqdStB0cn5A/wActOtxjqx8GSk+rQgfAjMfeg/rlUu0Y9AWQwFCy6lcvspCDwXr9+Ym&#xA;TXZJctm2OGIQrOzGrEsfEmuYkpE7lsApckUr/YQt8gTko45S5C0GQCsunXbfsUHuQMvjo8h6MTli&#xA;qrpM/d1H3n+GWjs+fUhh44VBo/jL9y/25aOzf6X2MfH8m/0Qn+/D92H+Th3r4/kpyaRIBVHDexFP&#xA;65XPs6Q5G0jOOqCdHRijijDqDmBKJiaPNvBtpWKsGU0I3BwAkGwpCe2s4ngV/wBrow9xnQafL4kA&#xA;XCnHhNKuXMEvvdRZHMUNKjZnO+/tmt1OtMTwxcjHisWUMmo3SsCX5DupAzEjrcgN3bYcUU0N1CIV&#xA;lZuKsAR/mM25zxERImgXF4DdOjuLeeqowbxX2+Rxhmhk2BtTAx5oZ9LtwS5dlQbkbbD55iy0EBvZ&#xA;ptGYoO9uI5nXgpogpzPU5harNGZFdG3HAhDZitqM0p1W5IJpyUgfOozO0EgJ79Q05hs6bTLhXPpg&#xA;OnY1AP01xyaGYPp3CxzCt1q6bdk0KhR4kj+FcgNDkPRJzRVtRCRW8MANSu/3Drl+tAjCMGGLckpf&#xA;mtchVtpVhmWRl5AdstwZBCQkRbCcbFJi9pBefv1dhy6jbanbNnLTwzesEuOJmGyJt7eOCPglaVqS&#xA;epOZWHCMYoNcpGRsqhAIIIqD1GWkWxQE+lIxLRNwP8p6ZrsugB3iab45z1Qr6ddqfsch4gjMOWiy&#xA;DpbaMsVI2lz/AL6b7jlf5fJ/NLLjj3qiafdt+xQeJIGTjo8h6IOWIRMWkd5X+hf6nMrH2d/OPyap&#xA;Z+5Fx2VtH9mME+J3/XmbDTY48g1HJIq2XsHYq7FXYq7FXYqk+pSxyXFUNQooSPGuaTW5Iyns5mGJ&#xA;A3QmYbamejk8ZR2BBH01zadnHaXwcbP0TDNm46RXaMlzID3YkfI75z2oiY5Dfe52M3EKOUs1zSMy&#xA;opOyAhR8zXJSmSAO5ADo3dJFdDRgdsYSMSCOakWE+uIzLC8YNCwoD750OaHFEjvcGJo2lK6bdl+J&#xA;XiO7Ein4Zp46LITVOUc0URcaYvFRCw9QD4lJ+175kZtCKAifV97XHN38kGbW6U7xNUdwCf1ZhHT5&#xA;B0Ldxx70Vby6m5CCoHdmXp9JzMw5M52+8NUowCrdyahG59P4oz9khakfPLdRPNE+nce5jAQI3QBg&#xA;u5GLGN2J6kg5rjiySNkFv4ohFWumMW5Tii9krufuzM0+hN3P5NU83cpzaZOr0jHND0NRX6a5Vl0M&#xA;wfTuGUcwI3RduPqVoTMaEkniPGnT8MzMI8DH6mqXrlsg21S6JJBAHYUzCOuyW2jDF36Tu/5h9wwf&#xA;nsnenwYu/Sd3/MPuGP57J3r4MXfpO7/mH3DH89k718GLv0nd/wAw+4Y/nsnevgxd+k7v+YfcMfz2&#xA;TvXwYu/Sd3/MPuGP57J3r4MXfpO7/mH3DH89k718GLv0nd/zD7hj+eyd6+DF36Tu/wCYfcMfz2Tv&#xA;XwYu/Sd3/MPuGP57J3r4MXfpO7/mH3DH89k718GLR1K7P7YH0DE63L3r4MVGS4nk+25I8K7fdlE8&#xA;05cyzEAOSnlbJtVLEBRUnoBhAJ2CE5sLYwQ/F9tt29vAZvNJh8OO/MuHlnxFE5lNaV313bStxEfM&#xA;rsJK0zUarUY5mqvzcrHCQ6oE0rtsM15bmsUq9n6P1hPVNFBqPCvauX6bh4xxMMl1snmdA4LsVSGS&#xA;ab12kJKyA/d7Zzs8kuMy/ic4RFV0TFryeG2jklQMzGh7bds2Z1M4YxKQ5uP4YMiAhpdUuG2QBB7b&#xA;n8cxcmvmeWzbHCA631OWMcZB6i+Pf78cOulHaW6ywg8kV+kBJFI0KEsgBIbp+GZn5ziiTEbhq8Ki&#xA;LS8Xc/riYtVh27U8M1g1E+PivdyPDFUnE08cMZdzQdh3J8M3mXKIRsuHGJJoJLcXEk8nJun7K9gM&#xA;0WbMchsuZCAiFLKWbsVdirsVdirsVdirsVdirsVdirsVdirsVRmn2sM/L1K1WmwNAQczdHgjku+j&#xA;TlmY8k0ighiH7tAvv3+/NtjxRh9IpxpSJ5r8sYuxVj8sbRyMjdVNM5vJAxkQXPibFrURnYKoqx6A&#xA;ZGMSTQSTSvPZTwqGYVXuRvT55fl0s4CzyYRyAofMdsRVvqM8QCn40HQHqPkcy8OsnDbmGqWIFHRa&#xA;nbOPiJQ+B3H4ZsMeuxnns0HDIKU19Zc+SxCR/wCYgD8TvlOXV4rsDiLOOKXfSqk0F7C0Z+Fu69wf&#xA;EZdHJDPAx6sDEwNpdNZXMbUKFh2ZRUZrMmlnE8rciOQFalrcuaLG3zIoPvORjp5yNAFJmB1TSGJL&#xA;K2Zm+JurEdz2GbXHjGDGSebjSlxyQy3OnKfUEJEg3A7V++mYsc+AeoR9TYYT5WhLi5knk5N0/ZXs&#xA;BmJmzHIbLbCAiFLKWbsVdirsVdirsVdirsVVorS5l3RDTxOw/HL8ennPkGEsgCIGkz93Ufef4ZkD&#xA;s+feGvxwhp7eSB+Ljr0I6HMXNhljNFsjMS5KWVM3Yq7FXYqq29w8Eodd+xHiMtw5jjlYYTjxCk2h&#xA;v7aX9rg38rbfjm5xauE+tHzcWWIhEZktbsVULiygnPJwQ38w2OY+bTQybnmzjkMV0NtDCP3a0J6t&#xA;1OTxYIQ5BEpk81ly92KrBFX/ACyR+AyvPLJygPiygI9SlMlvcJUvGwHc02zTTwzG5BcsSB5FSypk&#xA;7FXYqujLhx6def7NOuShd+nmg1W6e2zTmIGZQr+2dBhMzH1jdwZgXsukljiXlIwUe+SnkjEWSgRJ&#xA;5JVe33rjggpGDXfqc1Gq1fibDk5WPHw7oPMJudiqpBBJMxWMVIFTluLDKZoMZSA5qeVMnYq7FXYq&#xA;7FVa3tZZ2og2HVj0GXYcEsh2YSmI800t7CCEVI5uP2m/gM2+HSQhvzLiyykul1G1jNKlz3474Mmt&#xA;xxNc/ckYpFSXVozIFKEITuxPT6MqHaESarZkcBpE3NulxFxPXqreBzKz4RkjTXCXCUjkjeNyjijL&#xA;sRmgnAxNHm5oNrcil2KuxV2KuxVek0qCiOyjwBIyccko8iQxMQURaJdzuOMjhB9p6nMnTxyZDsTT&#xA;CZiAnGbtw3Yq7FXYqhbqwimBKgJJ4jofnmJn0kZ7jaTbDKQlEkbxuUcUYdRmlnAxNHm5YNi0Vb6b&#xA;NJ8Un7tPfqfozLw6KUtzsGqeYDkmMcNtapUUUd3PU/TmzhjhiHd5uOZGRQtxqoFVgFf8s/wGYmbt&#xA;DpD5tscHel8kskjcnYsffNbPJKRsm28ADksyDJ2KuxVE6fIUulp0f4T9OZWjnw5B5tWUXFVvrGX1&#xA;mkjXkjb7dQT12y3VaWXEZRFhjjyCqKBzAb3Yq7FURaWjzv4Rj7Tf0zI0+nOQ+TXOYimcs9vaRhaU&#xA;2+FB1zbZMsMMa+xxoxMyllxezTmhPFP5B0+nNTm1UsnucmGMRQ+Y7Y7FUdZah6YEcu6fst3GZ+l1&#xA;nD6ZcmjJivcI25tIrlAejU+Fx4Zn59PHKL697TCZilc1lcxHdCw/mXcZqcmlnDo5McgKhQ5j0zbo&#xA;caVqmKXYqiLGATThW3Qbt8sydLi450eTXklQTpVVQFUAAdAM3oAAoOES3hV2KoW61COB+HHm/cVp&#xA;TMTPrI4zVWW2GIy3ag1KCVgrAox6V6ffgxa2EzR2KywkIvMxqU5Bbo3rSUDAUDH+GVTEInikyFnY&#xA;IOfVQKrCtf8ALbp9AzBy9odIBujg70vlmllblIxY++a6eSUzZNt4iByWZBk7FXYq7FXYqjtNtXaR&#xA;Zjsi1p7nM/RYCZCfQNGaYqk1zcOKpS2tvLu6Anx6H7xlWTBCfMMozI5KB0q2J6sPYEf0zGPZ+Pzb&#xA;PHkuj021Q1ILf6x/pTJw0WMeaDmkUUFCgBRQDoBmUABsGpAz6Y0srSer9rcAitPbrmBl0JnInib4&#xA;5qFUl9xbPA/FyDXpQ5rs2E4zRb4TElLKWbsVbFK79MQhkQIIBHTtnTB17sKuxV2KpPqcnK5K9kAH&#xA;8c0muneSu5y8IqKEzDbkw0l0Duh+21OP0ZsezpAEjqXHzg0mebZxnYq7FUm1GGRLhnO6vurfwzR6&#xA;3GYzJPIuZikCELmI2oqPUblIvTBBp0Y7kDMuGsnGNNRxAm0O8jyNydix8TmNKZkbJtsAA5Lcil2K&#xA;uxVWt7SWc/AKKOrHpl+HTyycuTCcxFHppMIHxuxPtQf1zYR7Oj1JaDnKnPpJArC1f8luv35Vl7P/&#xA;AJpZRz96AeORG4upVvA5r5QMTRG7eCCntvH6cCJ0IAr8++dDhhwwAcGRs2qZYxdirsVdiriQBU7A&#xA;dTiSqX3epgVSDc93/pmt1GuraHzciGHqUtJLEkmpPUnNWSTuXIawJTG10wFQ89RXog2+/Nnp9DYu&#xA;fyceeboESdOs/wDff4n+uZX5PF3fe1eLLvV4okjQIleI6VJP68vhARFBhI2uyaEPPfwQvwarN3C9&#xA;sxsurhA0ebZHESuhvIJVLK1OIqwOxAyWPUwmLB5IljISSVy8jOf2iT9+aGcuKRPe5oFCluRSirWy&#xA;uXZZF/dgGoc/wGZen02SRBG3m1TyRGyc5vHDdiqWX1/KJWiiPELsW7k5qtVq5CRjHanJx4hVlAvJ&#xA;I+7sW+ZrmvlOUuZtvAAW5FLsVVUtp3TmkZK+Iy2OCchYGzAzAWLG5kEdKMTSh23OQECZcPVle1pv&#xA;FptsijkObdyf6ZuceihEb7lxJZiVYW1uP91J/wACMv8AAh/NHyYcZ716oqiigKPACgyyMQBQQTbe&#xA;FDsVcQDSorTpgIBV2FXYq0zBVLHooqfkMEpULKQLSWS/uXkLByo7KOgzRT1eQm7pzBiiAiINVYbT&#xA;DkP5l2OZOLtAj692uWDuQ9zeyzmh+GPsg/jmNn1UsnkGyGMRQ+YzY2ASQAKk7ADCBfJCZ2On8CJZ&#xA;h8f7K+Hv882ul0fD6pc3GyZb2CPzYtDsVdirsVSCdJVlb1AQxJJr3znMsZCR4ubnxIrZTytk7FUf&#xA;p6WYHORwZOytsB9+bDRxxc5H1NGUy5DkmmbdxXYq7FUBfae8knqxbk/aXp92a7VaMyPFFvx5QBRQ&#xA;o027JoUA9yR/DMQaLL3NvjRW3Vm1uqFmDFq1p0FMjn0xxgWeaYZOJD5jNifWhBtoqdOIzodOQcca&#xA;7nByfUV7xRuVZlBZTVT3FMnLHGRBI5MRIhdk0OxV2KuxV2KuxV2KuxVD3N7bw1R/iYjdBvsfHMbP&#xA;qYQ2O7ZDGTuEomMBasIYKf2W7ZpcpgT6bcuN9VPK2TYBJAAqT0AwgE8kKj206LyeMhfHLJYJxFkM&#xA;RMFX0soLn4upU8fn/tZkaAjxN+5hmvhTfN04jsVdirsVdiqB1O6KAQr9phVj4DNfrs/COEdW/DC9&#xA;0qzUOU7FXYqmOkzOXaImqgch7b/25suz8hsx6OPniOaZZtXGdirsVdiqlc26Tx8G27qw7HKc2EZI&#xA;0WUJmJQA0iTlvIoXxFa/dmvHZ0r3Ozf447kyjjWONUXoooM2cICIAHRxybNrsmh2KuxV2KuxV2Ku&#xA;xV2KuxVILjl68nLryNfvznM18Zvvc+HILUR3NEUsRvQCuRjAy5C0kgLcilHaSyidlI3K7H5Zn9ny&#xA;HGR5NGcbJrm4cVQNlbGQSBOLKa/Dt09sxzpYcXFVFn4hqlfMhg7FXYq7FXYql2p2rlvWQVFKOPCn&#xA;fNXrsBJ4x8XIwz6JbmsclH2NgJFMkw+EiiDofnmw0uk4hxS5dGjJlrYLpNIav7uQU8G/syU+zj/C&#xA;UDP3oq0s0twTXk56t/AZmafTDGO8tWTJxIjMlrdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiq&#xA;GuLCCZ+ZqrdyO+YubSQmbPNsjlI2VYLeKBOKD5k9TluLDGAoMZSJ5oCbSpOZMRHA9AeozXZOz5X6&#xA;eTfHOK3V7KwMDF3YM9KADoMydLpPDNk7sMmXi2CMzNaXYq7FXYq7FXYq7FXYqpm2ty3IxqT40GVH&#xA;BAm6DLjPeqZaxdirsVdir//Z</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:5aa1a37f-1440-4669-91e9-ac06520ecd66'
  xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/'>
  <xapMM:DocumentID>uuid:13e3ddfc-740a-4304-a7fe-c0464c31e5f7</xapMM:DocumentID>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:5aa1a37f-1440-4669-91e9-ac06520ecd66'
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <?xpacket end='w'?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -23.5991 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 23.5991 li
45.3262 23.5991 li
45.3262 0 li
clp
[1 0 0 1 0 0 ] concat
4.92627 16.5854 mo
5.24707 16.6919 6.11768 17.4839 6.32617 17.7095 cv
7.15869 17.4839 14.4727 13.9155 14.9863 13.2993 cv
15.4023 12.6753 15.4092 12.0654 15.6016 12.1704 cv
16.7314 12.7856 17.2461 11.9658 18.0654 11.1445 cv
19.1299 10.0776 19.9951 9.19531 20.1318 9.02441 cv
21.5908 9.02441 36.5527 9.01758 36.5527 9.01758 cv
36.5527 9.01758 40.0371 9.11523 40.3174 7.75244 cv
40.4551 6.43066 38.7275 6.21289 37.3408 6.21289 cv
35.9512 6.21289 32.0811 6.73975 30.6084 7.21631 cv
29.291 7.55811 28.0176 8.20361 26.4219 8.20361 cv
24.8252 8.20361 22.2148 7.72803 21.9365 5.96826 cv
21.6582 4.20898 22.7686 3.52686 24.2959 3.12988 cv
25.8203 2.73242 25.5449 3.12988 25.2666 2.84619 cv
24.9883 2.5625 25.0352 2.57275 25.0586 2.22217 cv
25.1484 .879395 26.9541 .0581055 27.5078 .0581055 cv
28.0645 .0581055 26.1748 1.69971 26.793 2.78906 cv
26.9326 3.03564 26.9971 1.08301 30.998 1.28955 cv
31.5645 1.31836 27.5742 3.83643 28.042 3.75391 cv
30.3848 3.34229 30.4541 4.56152 28.5977 5.22949 cv
28.2754 5.34521 25.8613 5.66504 26.2773 5.49805 cv
26.79 5.29297 27.2891 4.88672 27.3301 4.44043 cv
27.4063 3.65088 25.7705 3.95996 25.4277 4.02539 cv
25.0703 4.09277 23.6436 4.38525 23.5742 5.52148 cv
23.626 6.21045 24.4521 6.69043 25.624 6.79004 cv
27.9658 6.71289 28.501 6.3335 29.3145 6.08887 cv
30.2891 5.79736 34.0771 4.6001 36.9219 4.54102 cv
39.7881 4.47998 41.6348 5.00635 42.3691 6.00684 cv
43.498 7.54736 43.1641 8.771 42.6777 9.39502 cv
42.1904 10.0195 40.1816 10.4438 40.1816 10.4438 cv
40.1816 11.2393 40.5986 11.8062 40.9443 12.0898 cv
41.293 12.3735 42.9785 12.9868 43.3955 12.9868 cv
43.8105 12.9868 45.2676 12.8677 45.2676 13.0962 cv
45.2676 13.3208 44.6514 13.9155 43.7285 14.4282 cv
43.4736 14.5728 43.0098 16.2778 43.0098 16.2778 cv
43.9063 17.6069 li
43.9063 17.6069 40.0078 19.3521 41.8564 19.6597 cv
43.3887 19.9155 43.334 20.7573 43.3047 21.1714 cv
43.2529 21.5229 42.6826 22.022 42.2666 22.022 cv
41.8486 22.022 40.8652 21.6313 40.7275 21.4038 cv
40.2598 21.9438 39.8203 22.8569 39.084 22.8433 cv
38.3867 22.8286 37.3652 22.1255 37.3408 21.4038 cv
37.3193 20.8687 37.9668 20.1558 38.4678 19.9683 cv
38.2432 19.7505 36.1465 19.9292 37.2363 18.3247 cv
37.6768 17.6763 38.7803 17.9771 39.1875 18.5308 cv
39.5342 19.0024 39.9297 17.3022 39.9297 17.3022 cv
40.418 15.4507 li
40.418 15.4507 37.4141 15.5659 36.9297 15.4507 cv
36.4424 15.3364 35.3369 15.1821 34.1572 13.7046 cv
32.9775 12.231 33.0059 12.0078 32.1025 12.0654 cv
31.2021 12.1206 28.9492 12.5991 26.8691 14.5249 cv
25.3584 16.7026 22.4551 16.0669 21.2432 15.3823 cv
20.335 14.8696 20.6182 15.438 20.4102 15.0405 cv
20.2021 14.6431 19.8545 13.5669 19.5771 13.5669 cv
19.2998 13.5669 19.0928 13.9624 19.1611 14.2466 cv
19.2314 14.5308 19.5723 15.0122 19.5029 15.353 cv
19.4326 15.6938 19.5771 16.2905 19.0225 16.5171 cv
18.4678 16.7446 18.5518 18.4321 18.0654 18.4321 cv
17.5791 18.4321 16.1602 17.3481 15.3955 17.4067 cv
14.6328 17.4624 13.4512 17.7964 13.0352 18.5356 cv
11.8555 18.5356 9.44189 18.3286 9.64697 20.0757 cv
8.21045 19.355 7.50586 19.1841 7.22852 19.978 cv
6.95117 20.7739 8.00244 21.8188 6.26025 22.0249 cv
5.78955 22.0806 5.23438 21.5923 5.14746 21.3413 cv
4.97119 20.8413 5.23926 20.2349 4.92627 20.3823 cv
3.57227 21.0151 2.76904 20.7935 2.76904 20.7935 cv
2.1416 20.8569 .837402 19.2681 2.76904 18.7397 cv
3.60205 18.5132 4.10547 18.5034 4.10547 18.5034 cv
4.10547 18.5034 3.05127 18.0415 3.18066 17.3022 cv
3.44043 15.811 4.92627 16.5854 4.92627 16.5854 cv
false sop
/0 
<<
/Name (PANTONE 124)
/0 
[/DeviceCMYK] add_csa
/CSA /0 
/TintMethod /Subtractive
/TintProc null
/MappedCSA null
/NComponents 4 
/Components [ 0 .275 1 .06 ] 
>>
add_csd
1 /0 get_csd
sepcs
.3 sep
f
.1166 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
4.92627 16.5854 mo
5.24707 16.6919 6.11768 17.4839 6.32617 17.7095 cv
7.15869 17.4839 14.4727 13.9155 14.9863 13.2993 cv
15.4023 12.6753 15.4092 12.0654 15.6016 12.1704 cv
16.7314 12.7856 17.2461 11.9658 18.0654 11.1445 cv
19.1299 10.0776 19.9951 9.19531 20.1318 9.02441 cv
21.5908 9.02441 36.5527 9.01758 36.5527 9.01758 cv
36.5527 9.01758 40.0371 9.11523 40.3174 7.75244 cv
40.4551 6.43066 38.7275 6.21289 37.3408 6.21289 cv
35.9512 6.21289 32.0811 6.73975 30.6084 7.21631 cv
29.291 7.55811 28.0176 8.20361 26.4219 8.20361 cv
24.8252 8.20361 22.2148 7.72803 21.9365 5.96826 cv
21.6582 4.20898 22.7686 3.52686 24.2959 3.12988 cv
25.8203 2.73242 25.5449 3.12988 25.2666 2.84619 cv
24.9883 2.5625 25.0352 2.57275 25.0586 2.22217 cv
25.1484 .879395 26.9541 .0581055 27.5078 .0581055 cv
28.0645 .0581055 26.1748 1.69971 26.793 2.78906 cv
26.9326 3.03564 26.9971 1.08301 30.998 1.28955 cv
31.5645 1.31836 27.5742 3.83643 28.042 3.75391 cv
30.3848 3.34229 30.4541 4.56152 28.5977 5.22949 cv
28.2754 5.34521 25.8613 5.66504 26.2773 5.49805 cv
26.79 5.29297 27.2891 4.88672 27.3301 4.44043 cv
27.4063 3.65088 25.7705 3.95996 25.4277 4.02539 cv
25.0703 4.09277 23.6436 4.38525 23.5742 5.52148 cv
23.626 6.21045 24.4521 6.69043 25.624 6.79004 cv
27.9658 6.71289 28.501 6.3335 29.3145 6.08887 cv
30.2891 5.79736 34.0771 4.6001 36.9219 4.54102 cv
39.7881 4.47998 41.6348 5.00635 42.3691 6.00684 cv
43.498 7.54736 43.1641 8.771 42.6777 9.39502 cv
42.1904 10.0195 40.1816 10.4438 40.1816 10.4438 cv
40.1816 11.2393 40.5986 11.8062 40.9443 12.0898 cv
41.293 12.3735 42.9785 12.9868 43.3955 12.9868 cv
43.8105 12.9868 45.2676 12.8677 45.2676 13.0962 cv
45.2676 13.3208 44.6514 13.9155 43.7285 14.4282 cv
43.4736 14.5728 43.0098 16.2778 43.0098 16.2778 cv
43.9063 17.6069 li
43.9063 17.6069 40.0078 19.3521 41.8564 19.6597 cv
43.3887 19.9155 43.334 20.7573 43.3047 21.1714 cv
43.2529 21.5229 42.6826 22.022 42.2666 22.022 cv
41.8486 22.022 40.8652 21.6313 40.7275 21.4038 cv
40.2598 21.9438 39.8203 22.8569 39.084 22.8433 cv
38.3867 22.8286 37.3652 22.1255 37.3408 21.4038 cv
37.3193 20.8687 37.9668 20.1558 38.4678 19.9683 cv
38.2432 19.7505 36.1465 19.9292 37.2363 18.3247 cv
37.6768 17.6763 38.7803 17.9771 39.1875 18.5308 cv
39.5342 19.0024 39.9297 17.3022 39.9297 17.3022 cv
40.418 15.4507 li
40.418 15.4507 37.4141 15.5659 36.9297 15.4507 cv
36.4424 15.3364 35.3369 15.1821 34.1572 13.7046 cv
32.9775 12.231 33.0059 12.0078 32.1025 12.0654 cv
31.2021 12.1206 28.9492 12.5991 26.8691 14.5249 cv
25.3584 16.7026 22.4551 16.0669 21.2432 15.3823 cv
20.335 14.8696 20.6182 15.438 20.4102 15.0405 cv
20.2021 14.6431 19.8545 13.5669 19.5771 13.5669 cv
19.2998 13.5669 19.0928 13.9624 19.1611 14.2466 cv
19.2314 14.5308 19.5723 15.0122 19.5029 15.353 cv
19.4326 15.6938 19.5771 16.2905 19.0225 16.5171 cv
18.4678 16.7446 18.5518 18.4321 18.0654 18.4321 cv
17.5791 18.4321 16.1602 17.3481 15.3955 17.4067 cv
14.6328 17.4624 13.4512 17.7964 13.0352 18.5356 cv
11.8555 18.5356 9.44189 18.3286 9.64697 20.0757 cv
8.21045 19.355 7.50586 19.1841 7.22852 19.978 cv
6.95117 20.7739 8.00244 21.8188 6.26025 22.0249 cv
5.78955 22.0806 5.23438 21.5923 5.14746 21.3413 cv
4.97119 20.8413 5.23926 20.2349 4.92627 20.3823 cv
3.57227 21.0151 2.76904 20.7935 2.76904 20.7935 cv
2.1416 20.8569 .837402 19.2681 2.76904 18.7397 cv
3.60205 18.5132 4.10547 18.5034 4.10547 18.5034 cv
4.10547 18.5034 3.05127 18.0415 3.18066 17.3022 cv
3.44043 15.811 4.92627 16.5854 4.92627 16.5854 cv
cp
1 /0 get_csd
sepcs
.3 sep
@
9.95557 12.0684 mo
11.8105 13.5757 li
7.70313 15.8325 li
7.70313 15.8325 7.83594 15.4917 6.47168 14.4985 cv
5.38867 13.7104 3.23145 13.7104 3.23145 13.7104 cv
3.23145 13.7104 4.84082 13.019 4.43457 12.8384 cv
3.77979 12.5552 3.00342 11.7876 2.98145 12.1387 cv
2.98633 12.0576 .791016 14.6587 .101074 11.8623 cv
-.250977 10.4355 1.67773 10.7236 1.95508 10.4951 cv
1.81641 9.98486 1.0249 10.8354 .40918 9.60596 cv
-.338867 8.11035 1.22998 7.34717 2.05176 7.44922 cv
3.17383 7.58887 2.97754 8.93066 3.25439 9.10254 cv
3.53271 9.27197 3.32813 8.3335 4.20654 8.20361 cv
4.75928 8.18848 4.98438 8.35547 5.26465 8.64648 cv
5.31641 8.70068 5.36328 8.75732 5.40576 8.81934 cv
5.68359 9.21631 5.61377 9.44385 5.47607 10.0107 cv
5.33643 10.5781 4.92041 10.4644 4.98877 10.6343 cv
5.05908 10.8052 5.75244 11.543 6.16895 11.77 cv
6.58496 11.9976 8.31396 12.5815 8.31396 12.5815 cv
9.95557 12.0684 li
1 /0 get_csd
sepcs
.3 sep
f
9.95557 12.0684 mo
11.8105 13.5757 li
7.70313 15.8325 li
7.70313 15.8325 7.83594 15.4917 6.47168 14.4985 cv
5.38867 13.7104 3.23145 13.7104 3.23145 13.7104 cv
3.23145 13.7104 4.84082 13.019 4.43457 12.8384 cv
3.77979 12.5552 3.00342 11.7876 2.98145 12.1387 cv
2.98633 12.0576 .791016 14.6587 .101074 11.8623 cv
-.250977 10.4355 1.67773 10.7236 1.95508 10.4951 cv
1.81641 9.98486 1.0249 10.8354 .40918 9.60596 cv
-.338867 8.11035 1.22998 7.34717 2.05176 7.44922 cv
3.17383 7.58887 2.97754 8.93066 3.25439 9.10254 cv
3.53271 9.27197 3.32813 8.3335 4.20654 8.20361 cv
4.75928 8.18848 4.98438 8.35547 5.26465 8.64648 cv
5.31641 8.70068 5.36328 8.75732 5.40576 8.81934 cv
5.68359 9.21631 5.61377 9.44385 5.47607 10.0107 cv
5.33643 10.5781 4.92041 10.4644 4.98877 10.6343 cv
5.05908 10.8052 5.75244 11.543 6.16895 11.77 cv
6.58496 11.9976 8.31396 12.5815 8.31396 12.5815 cv
9.95557 12.0684 li
cp
1 /0 get_csd
sepcs
.3 sep
@
30.7939 13.7104 mo
31.1719 13.7104 32.127 13.5054 32.127 13.5054 cv
32.127 13.5054 32.9502 14.8384 33.9746 15.353 cv
34.1797 15.4536 33.3604 16.5854 34.3857 17.3022 cv
34.5996 17.4517 32.7539 17.106 32.127 17.4067 cv
31.25 17.8267 30.6992 18.9224 29.666 19.562 cv
28.2578 20.4331 29.9014 21.5503 29.457 21.6157 cv
29.0186 21.6782 27.6768 20.8472 27.4248 20.8472 cv
27.1709 20.8472 26.1621 21.1636 26.1621 21.606 cv
26.1621 22.0464 26.9902 23.1333 25.5322 23.4985 cv
24.7861 23.6821 24.1279 23.2622 24.0811 22.4009 cv
23.4766 22.2974 23.1523 22.7915 23.1523 22.7915 cv
22.5996 23.4097 21.6768 23.2856 21.4531 22.23 cv
21.3945 21.9604 21.2471 20.7935 22.9473 20.7222 cv
23.4531 20.7017 23.4502 20.9106 23.5771 20.7222 cv
23.7031 20.5347 22.3906 20.105 22.582 19.6636 cv
22.7715 19.2222 22.9941 18.3286 24.2715 18.8931 cv
24.9648 19.2007 25.1035 19.3579 25.2168 19.4595 cv
25.3584 19.5864 29.2549 16.6851 29.2549 16.6851 cv
29.2549 16.6851 28.8428 16.4468 28.3291 16.2778 cv
27.8691 16.1226 27.1377 16.4731 27.2012 15.9683 cv
27.2646 15.4644 30.4141 13.7104 30.7939 13.7104 cv
1 /0 get_csd
sepcs
.3 sep
f
30.7939 13.7104 mo
31.1719 13.7104 32.127 13.5054 32.127 13.5054 cv
32.127 13.5054 32.9502 14.8384 33.9746 15.353 cv
34.1797 15.4536 33.3604 16.5854 34.3857 17.3022 cv
34.5996 17.4517 32.7539 17.106 32.127 17.4067 cv
31.25 17.8267 30.6992 18.9224 29.666 19.562 cv
28.2578 20.4331 29.9014 21.5503 29.457 21.6157 cv
29.0186 21.6782 27.6768 20.8472 27.4248 20.8472 cv
27.1709 20.8472 26.1621 21.1636 26.1621 21.606 cv
26.1621 22.0464 26.9902 23.1333 25.5322 23.4985 cv
24.7861 23.6821 24.1279 23.2622 24.0811 22.4009 cv
23.4766 22.2974 23.1523 22.7915 23.1523 22.7915 cv
22.5996 23.4097 21.6768 23.2856 21.4531 22.23 cv
21.3945 21.9604 21.2471 20.7935 22.9473 20.7222 cv
23.4531 20.7017 23.4502 20.9106 23.5771 20.7222 cv
23.7031 20.5347 22.3906 20.105 22.582 19.6636 cv
22.7715 19.2222 22.9941 18.3286 24.2715 18.8931 cv
24.9648 19.2007 25.1035 19.3579 25.2168 19.4595 cv
25.3584 19.5864 29.2549 16.6851 29.2549 16.6851 cv
29.2549 16.6851 28.8428 16.4468 28.3291 16.2778 cv
27.8691 16.1226 27.1377 16.4731 27.2012 15.9683 cv
27.2646 15.4644 30.4141 13.7104 30.7939 13.7104 cv
cp
1 /0 get_csd
sepcs
.3 sep
@
12.9053 10.1821 mo
13.0049 10.3989 14.2236 11.0171 14.8506 10.8354 cv
15.0195 10.7876 14.7031 12.645 12.7773 12.5679 cv
10.8516 12.4917 10.6089 10.3989 10.873 10.6055 cv
11.29 10.9316 12.9053 10.1821 12.9053 10.1821 cv
1 /0 get_csd
sepcs
.3 sep
f
12.9053 10.1821 mo
13.0049 10.3989 14.2236 11.0171 14.8506 10.8354 cv
15.0195 10.7876 14.7031 12.645 12.7773 12.5679 cv
10.8516 12.4917 10.6089 10.3989 10.873 10.6055 cv
11.29 10.9316 12.9053 10.1821 12.9053 10.1821 cv
cp
1 /0 get_csd
sepcs
.3 sep
@
9.22021 9.82471 mo
9.76074 10.3208 10.3062 10.5825 10.2964 10.4717 cv
10.3198 10.7505 9.90918 11.356 9.51807 11.4814 cv
9.12939 11.6079 8.58447 11.229 8.58447 10.7876 cv
8.58447 10.3457 9.22021 9.82471 9.22021 9.82471 cv
1 /0 get_csd
sepcs
.3 sep
f
9.22021 9.82471 mo
9.76074 10.3208 10.3062 10.5825 10.2964 10.4717 cv
10.3198 10.7505 9.90918 11.356 9.51807 11.4814 cv
9.12939 11.6079 8.58447 11.229 8.58447 10.7876 cv
8.58447 10.3457 9.22021 9.82471 9.22021 9.82471 cv
cp
1 /0 get_csd
sepcs
.3 sep
@
16.3232 9.95654 mo
15.7822 10.4526 15.2363 10.7158 15.2451 10.603 cv
15.2217 10.8818 15.6348 11.4863 16.0234 11.6143 cv
16.415 11.7393 16.96 11.3613 16.96 10.9199 cv
16.96 10.4785 16.3232 9.95654 16.3232 9.95654 cv
1 /0 get_csd
sepcs
.3 sep
f
16.3232 9.95654 mo
15.7822 10.4526 15.2363 10.7158 15.2451 10.603 cv
15.2217 10.8818 15.6348 11.4863 16.0234 11.6143 cv
16.415 11.7393 16.96 11.3613 16.96 10.9199 cv
16.96 10.4785 16.3232 9.95654 16.3232 9.95654 cv
cp
1 /0 get_csd
sepcs
.3 sep
@
6.95508 6.1958 mo
6.92383 6.92725 7.07227 7.51416 7.15186 7.43701 cv
6.95508 7.63135 6.22559 7.70557 5.87842 7.4873 cv
5.53125 7.27148 5.47119 6.61035 5.80957 6.32715 cv
6.14795 6.04346 6.95508 6.1958 6.95508 6.1958 cv
1 /0 get_csd
sepcs
.3 sep
f
6.95508 6.1958 mo
6.92383 6.92725 7.07227 7.51416 7.15186 7.43701 cv
6.95508 7.63135 6.22559 7.70557 5.87842 7.4873 cv
5.53125 7.27148 5.47119 6.61035 5.80957 6.32715 cv
6.14795 6.04346 6.95508 6.1958 6.95508 6.1958 cv
cp
1 /0 get_csd
sepcs
.3 sep
@
19.0098 6.1958 mo
19.041 6.92725 18.8926 7.51416 18.8145 7.43701 cv
19.0098 7.63135 19.7383 7.70557 20.0869 7.4873 cv
20.4336 7.27148 20.4932 6.61035 20.1563 6.32715 cv
19.8174 6.04346 19.0098 6.1958 19.0098 6.1958 cv
1 /0 get_csd
sepcs
.3 sep
f
19.0098 6.1958 mo
19.041 6.92725 18.8926 7.51416 18.8145 7.43701 cv
19.0098 7.63135 19.7383 7.70557 20.0869 7.4873 cv
20.4336 7.27148 20.4932 6.61035 20.1563 6.32715 cv
19.8174 6.04346 19.0098 6.1958 19.0098 6.1958 cv
cp
1 /0 get_csd
sepcs
.3 sep
@
12.8096 8.09912 mo
13.4014 8.1001 13.9463 7.96973 14.0752 7.83936 cv
14.4561 7.4541 14.3848 7.00586 14.3701 6.60791 cv
14.3574 6.146 14.2041 5.4917 14.2041 5.4917 cv
14.624 5.32178 16.042 5.05371 16.4873 4.83789 cv
17.123 4.53076 16.8662 5.87793 16.8662 5.87793 cv
16.4463 6.10498 15.042 6.39697 15.042 6.39697 cv
15.0449 6.62646 15.0859 7.02441 15.042 8.01367 cv
15.0283 8.30762 14.584 8.62939 14.2734 8.86035 cv
13.9951 9.06348 13.0439 9.01416 13.0439 9.01416 cv
13.0439 9.01416 13.334 9.8291 14.3984 9.70703 cv
14.8574 9.65381 15.7793 9.6626 16.3193 9.20654 cv
16.6553 8.92139 16.8271 8.62939 16.8271 8.62939 cv
17.0791 8.79883 17.1523 9.08789 17.5039 9.32178 cv
17.9727 9.62939 18.0137 9.59033 18.5791 9.42871 cv
18.8203 9.36279 19.0703 8.60449 18.7324 8.32031 cv
18.3994 8.03809 18.4951 8.06787 18.1602 7.89746 cv
17.8223 7.72803 17.8027 7.64551 17.8867 7.4751 cv
17.9707 7.30371 18.1904 7.03906 18.2441 6.875 cv
18.3945 6.39697 18.1133 5.54199 18.5215 5.5498 cv
20.0723 5.57861 20.1309 3.58594 19.1143 3.39355 cv
17.4648 3.08105 17.6309 4.35303 17.3789 4.18311 cv
17.1279 4.01221 18.3525 2.88135 16.998 2.04639 cv
16.1426 1.521 15.1025 1.92725 15.1025 1.92725 cv
15.1025 1.92725 14.9541 1.89404 14.3701 2.79346 cv
14.1719 3.10156 14.3047 1.81201 13.7373 1.48389 cv
13.4385 1.31104 13.1475 1.21191 12.876 1.1709 cv
1 /0 get_csd
sepcs
.3 sep
f
12.8096 8.09912 mo
13.4014 8.1001 13.9463 7.96973 14.0752 7.83936 cv
14.4561 7.4541 14.3848 7.00586 14.3701 6.60791 cv
14.3574 6.146 14.2041 5.4917 14.2041 5.4917 cv
14.624 5.32178 16.042 5.05371 16.4873 4.83789 cv
17.123 4.53076 16.8662 5.87793 16.8662 5.87793 cv
16.4463 6.10498 15.042 6.39697 15.042 6.39697 cv
15.0449 6.62646 15.0859 7.02441 15.042 8.01367 cv
15.0283 8.30762 14.584 8.62939 14.2734 8.86035 cv
13.9951 9.06348 13.0439 9.01416 13.0439 9.01416 cv
13.0439 9.01416 13.334 9.8291 14.3984 9.70703 cv
14.8574 9.65381 15.7793 9.6626 16.3193 9.20654 cv
16.6553 8.92139 16.8271 8.62939 16.8271 8.62939 cv
17.0791 8.79883 17.1523 9.08789 17.5039 9.32178 cv
17.9727 9.62939 18.0137 9.59033 18.5791 9.42871 cv
18.8203 9.36279 19.0703 8.60449 18.7324 8.32031 cv
18.3994 8.03809 18.4951 8.06787 18.1602 7.89746 cv
17.8223 7.72803 17.8027 7.64551 17.8867 7.4751 cv
17.9707 7.30371 18.1904 7.03906 18.2441 6.875 cv
18.3945 6.39697 18.1133 5.54199 18.5215 5.5498 cv
20.0723 5.57861 20.1309 3.58594 19.1143 3.39355 cv
17.4648 3.08105 17.6309 4.35303 17.3789 4.18311 cv
17.1279 4.01221 18.3525 2.88135 16.998 2.04639 cv
16.1426 1.521 15.1025 1.92725 15.1025 1.92725 cv
15.1025 1.92725 14.9541 1.89404 14.3701 2.79346 cv
14.1719 3.10156 14.3047 1.81201 13.7373 1.48389 cv
13.4385 1.31104 13.1475 1.21191 12.876 1.1709 cv
1 /0 get_csd
sepcs
.3 sep
@
12.9531 8.09912 mo
12.3604 8.1001 11.8164 7.96973 11.6865 7.83936 cv
11.3057 7.4541 11.3779 7.00586 11.3887 6.60791 cv
11.4043 6.146 11.5605 5.4917 11.5605 5.4917 cv
11.1396 5.32178 9.72021 5.05371 9.27588 4.83789 cv
8.63965 4.53076 8.89453 5.87793 8.89453 5.87793 cv
9.31348 6.10498 10.7207 6.39697 10.7207 6.39697 cv
10.7183 6.62646 10.6772 7.02441 10.7207 8.01367 cv
10.7329 8.30762 11.1792 8.62939 11.4902 8.86035 cv
11.7656 9.06348 12.7188 9.01416 12.7188 9.01416 cv
12.7188 9.01416 12.4297 9.8291 11.3633 9.70703 cv
10.9053 9.65381 9.9834 9.6626 9.44287 9.20654 cv
9.10693 8.92139 8.93408 8.62939 8.93408 8.62939 cv
8.68262 8.79883 8.60938 9.08789 8.25684 9.32178 cv
7.7915 9.62939 7.74805 9.59033 7.18311 9.42871 cv
6.94287 9.36279 6.69287 8.60449 7.02881 8.32031 cv
7.36475 8.03809 7.26758 8.06787 7.60254 7.89746 cv
7.93799 7.72803 7.96094 7.64551 7.87598 7.4751 cv
7.7915 7.30371 7.5708 7.03906 7.51953 6.875 cv
7.36865 6.39697 7.64893 5.54199 7.24072 5.5498 cv
5.69092 5.57861 5.63184 3.58594 6.64746 3.39355 cv
8.29883 3.08105 8.13184 4.35303 8.3833 4.18311 cv
8.63672 4.01221 7.41016 2.88135 8.76465 2.04639 cv
9.62012 1.521 10.6592 1.92725 10.6592 1.92725 cv
10.6592 1.92725 10.8062 1.89404 11.3887 2.79346 cv
11.5918 3.10156 11.458 1.81201 12.0264 1.48389 cv
12.3252 1.31104 12.6152 1.21191 12.8867 1.1709 cv
1 /0 get_csd
sepcs
.3 sep
f
12.9531 8.09912 mo
12.3604 8.1001 11.8164 7.96973 11.6865 7.83936 cv
11.3057 7.4541 11.3779 7.00586 11.3887 6.60791 cv
11.4043 6.146 11.5605 5.4917 11.5605 5.4917 cv
11.1396 5.32178 9.72021 5.05371 9.27588 4.83789 cv
8.63965 4.53076 8.89453 5.87793 8.89453 5.87793 cv
9.31348 6.10498 10.7207 6.39697 10.7207 6.39697 cv
10.7183 6.62646 10.6772 7.02441 10.7207 8.01367 cv
10.7329 8.30762 11.1792 8.62939 11.4902 8.86035 cv
11.7656 9.06348 12.7188 9.01416 12.7188 9.01416 cv
12.7188 9.01416 12.4297 9.8291 11.3633 9.70703 cv
10.9053 9.65381 9.9834 9.6626 9.44287 9.20654 cv
9.10693 8.92139 8.93408 8.62939 8.93408 8.62939 cv
8.68262 8.79883 8.60938 9.08789 8.25684 9.32178 cv
7.7915 9.62939 7.74805 9.59033 7.18311 9.42871 cv
6.94287 9.36279 6.69287 8.60449 7.02881 8.32031 cv
7.36475 8.03809 7.26758 8.06787 7.60254 7.89746 cv
7.93799 7.72803 7.96094 7.64551 7.87598 7.4751 cv
7.7915 7.30371 7.5708 7.03906 7.51953 6.875 cv
7.36865 6.39697 7.64893 5.54199 7.24072 5.5498 cv
5.69092 5.57861 5.63184 3.58594 6.64746 3.39355 cv
8.29883 3.08105 8.13184 4.35303 8.3833 4.18311 cv
8.63672 4.01221 7.41016 2.88135 8.76465 2.04639 cv
9.62012 1.521 10.6592 1.92725 10.6592 1.92725 cv
10.6592 1.92725 10.8062 1.89404 11.3887 2.79346 cv
11.5918 3.10156 11.458 1.81201 12.0264 1.48389 cv
12.3252 1.31104 12.6152 1.21191 12.8867 1.1709 cv
1 /0 get_csd
sepcs
.3 sep
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 11.0
%%AI8_CreatorVersion: 11.0.0
%%For: (PC) (School of Information Technologies, Uni of Sydney)
%%Title: (lion-coward.eps)
%%CreationDate: 12/1/2005 2:06 PM
%AI9_DataStream
%Gb"-6=c[+6PpZ8YJH$d!1f3j=->[%B_#P&giRR59Op"Y$.\b9$Z9g!sX^$\CU=T8=Z0uL@pKmU8,Uifd^i2%Rr4':C>E59Q*;fQX
%n(rKap5`RnrU\jWs8C-1BE%$r82mO'\5.SIo:Q'W07NZ\X).t5gptp)X8'=emr)*Q*eTOO6,8iTh`ZG[k1/4iJ,B6$j/]At3k]n=
%mep5%*1u$c.f\K*`TpUgGOOG%r;*9SG6EkSTI0^4e]U1lqW/1b/b!,\I=2"<+(,!?oukBWJ,IidnbH8Y8c8b)q=N4h?]T2Toue;h
%554]o='r^h,EKP6`G][ErVPLMqVfGLoM9.DqUa'nASL_Y)gC>6LRN/Zq!H5o$i_T^kkMZPI@F9=driB78FlVrJ,\ldT>10dlh<'I
%ro2bgs7oGG[GS`FoB#;)?b`=(oqU\V`Ys.f*eC$O!;`OsGe=Do]]4Wbo.1(>glITSKV"fk*rA[uFmMXNnt!<1YJ0tpe_bh$o@jq^
%p[<TS50KhY^An&Y0E0k6p_fXP>]*a9cWf^0)Z9#mf<='2gY4BqQF4I*<Td-Vp"^]s^&I+fQlV`)^Vl-lH?o>RDOe*/rQFqbIeEBL
%WctY]_1MUUVE+VAfAF5dnac.PhCfE8c'PWjrr1_d2"5.g4O5V@Ri%_5+6,VZi*@?"'_>&"A$HuVq09&<oPE@c-f&A!%\;io.e`;>
%"-n?,rej!jnb/<VY0k52$YrCBs7"A'^\Hj-[i0-&s$JSihNn2Rr\%1e$hEuBYMSQ7l5tKTQZ(aYf@uX!N-4`ch3<)8AcDM]5a/\O
%0>DrBYTG7^^VBX&2g9cORW.,CT,@*:.JUArr-LIR1e.D'&YI(!:LiH]Bp84*V4cL,S:Z7<X;!KAja>WSHUjR^dADsHqKhUDeiT>Z
%0Dp`?V\>Mi:AF,=KMP>jZoOcKl1nQkIJnO_KCbMG`.R1qo8*10r$f@[T>rq*NaHISH/W*e_n:*"r#$i8J'eIa_S7pO>n6ihk(S<T
%%[4cEk_^17]>gZ90?kMe!/u3^WP#)j!]7gEn1WLcc[b74dGT;HGqF<@n1T9VB?q7LiUc:.q)!?P.W*$eBSJP,?Za7+aYW,+AE3.a
%RUM5fe%@O8A]tbdiZ0AeG^t9Tn,VES1rC='05i24$SO,n!7+VLTYW-*l.5A9H0s"<(JiY;B?q6a_=Q%KakX@C)`Q.d[(uk[7km=+
%3mX<\`Z4M%RPCsTNk@"BAc.HER,IbN@_&'U?9WfBA%JD@,)tS&%A$FOO[9S8mObV+O,qnaT?N3`K@c+1q=3t%9V9YeEsMV's2a-o
%TJC-NhX^eg(MESQ<1^"[^GEU,Vg"^g?*&;](t8-d9MD7c:MeIC5Bg>`HL;!WUru>:T1boreKO7B\RYW=pPs^l>=bTWT+Ldmq3uk3
%iqN%'s,=/Ebb4d$Iqn*>o/H]V`p[-<V`4F^^#b=;DuR;Zj7i.(s,=/=h_SsFk+@D6IQr>RO0]q%o@QG.bPTKOoc=(P*()c`I(iC#
%A,Yo^kPL-:m\bhEr,H(^l'!b"%nKIYo5-Q$Foc]3^(3sWiCa]3\BKq-\#2$+Pe'&1s2W^rfOO(c'[-Y`RQ]k5'0h(0!ut\2Tfjf[
%So[*M<samWN3S=]4No_UF;end?cTDD.5kPKB9tMK)S?Jr=W3pXkJJ)pXi;TuI=3!La8VrknBnbZg(7&:qa#.%rlR_d^O%%5l`g3]
%K.PQTc@*;4:]9F@?T(Hd!7KX?jrNU/$[KH.?`,:C\ir5>OcPq-K5B)OCZj`:+1Aq0j(,XZl*(QIL+g;UkruW+B0JMb\@\s9M/!hB
%l;gArFnTnGhs(.qRNb76O704mNlJd,BRKRs)]-B]^uB,G(3'<NJY-i7YrVD4_!N;=c!9s3Y\ni-.mpnU@:-o2_Fad#F5NV`Ws@_<
%DSPa`Nu'!LKAOs<B@LOOYYRJbW.;WQL\17"2gb,k3,dX=FX<F'ap58`m630>QM#FMp%c5XqupW.Q/A/m)oEFSlaiY"A@c*![%fQ-
%qu6*G_L:L-TagY]]McN[Q"W<oj3@nr53_S!q<%WW5,6:l:S5^Q('8b($eLL80_fGHMcRHkfQb+apBP<Va7W9A3%UWna<Eo2I+](N
%2U"4maJ@1>dM$i64[/HSq/WnWV[WU84I8TPfA4l?hoH4i]@'YrYG3`]^0bBr,T+W[Lg8eCqYJl'7CV?6q\Suo=8oEu;`)(/R%D0?
%_a8hm$ZBu?C1GGa>h);_60d1jK*l5">FFl/J,6eu&R1<Tok=LmS^5>T+9^c,?e8rH]DKe,oXq+#[lUZ"9/jFBZAOG1oAK@=T3j1:
%nB;I+Cq+^r=QBseon3WG\V.1<mpY<X@W,aYnU,mR>Xt;9P<+Vjp&o4I6N+iJLQ#6*i3VUW6?DR].%H=:-F@1:H"*?2k"1EkL+p]W
%9eGE!o]4rF_uChXqB]lp^N&*`Lgh1OHW"6UOnIrg$I?IG(d@+6?[\;ohoWt^s*OY8Vg^k<FI.j#7DuU5QscdnY92"fYlE.%CqAG;
%Ol-!/`<6"Rhd%R=*;2s5D.d\U)O]+S_#D66p7oB_!M-(nE"GelWNajmeq6+'?>5pl`_2)!_kb$Dmld"_l8Odi@3+Z&%Vp*c^>Bkq
%N03YEcZ=MF85K6b4k7=YJ,RU_Hl@FPm"=?0&]JXkLeB8G(45Cj_oE"3rrWeu=TjBg0%lJ?"DP'F7GUN1HbZCA3gY,,$MP?ZR>YnG
%<fckKW@a\*CKL>bV;HX#dH06jRX]SY`NMu3Z_.-^oqab=cJ?'WG%AkE9$J-Sq2a2gmcrad\pWkYRo*_"nZ6?ZVcMCZnWnH<kPh6\
%aR_5^>c0JUoPZOPe_&'R+1$'5fB'.WG2hqmk]%^;s6Wt-_RrF?8&O="^R(d,f(=V$H3+!g(<PAr/2j=HE8Du6PSH13l^lhIC(g"+
%p$]BXbLa/boCA]P$06FSfTU.3m1JrN4Do)*]70#^D8*mg25HsfheDL/^D>W%!U'DthMB>o\ln/+CtseFd_j[j+C%+'Bhrfb"56G$
%gK#_NC:g&u9'9o!rh)Mkp8b)dgmm7lN*oF6I+p3s_pM*R_3LA#h:fcM&kdI3dtbK7/Sj6eH;m4T?PAXTP]&HjoK/GM2gY*09ZlFS
%%sQ,kh]BZG$V,&-C9#(hpqAPl@kMj#Z;*_dZB*aaFWVWb9:2=(h3%LMS7c/HL3KmI'ADM_3o]\=Np_.&be[\n^AID?5"Xp-LJN-1
%Uf)qh5[6*,DPc,DO7`0&50uX5Nk2Ck`J1bB=/eEZc,1,N0%&2[/`!g%HZt1uRaLA.Z[!?*0"cA$JQ'#QB_&*tj0Z:WlVa]ZrBb]=
%Mk=N2kpPcp^N@2,^`Rp_Y5CMpWbO:O_V=B`\)VHsc?VAe\bISa[e\`,WLRQPM_4Jcbdh1Kd'L7olFkfc(tUMAj6<CE4]:?X<U\F'
%VEC6Y(4u)+/j*f;+)>tmM1iCdkg!i4$=-)&_Eradd+q<.GD#_t<78UD5onA4W>32eEQ#Y8U_RET:Etu7lLX;Zj!FPHTp3FqigtMc
%`*p)!DpI8SFFMAX[UgPRFXqlU=-7WGhaNHNG\ZEZj>NLR0<kgG]7,iY4t)1lajJ[3+qk9_KHJ.M`?.$7S:A[/['k$2pIg\!Gj5Ms
%#%Fd*16kK!+!amKY2TW`?(Uo2TZrP8Us`V:T!iEtcg0^b]Zo^k]X7-"W,@rYS[[e<4L+M9nG:nJ>o\tI=GcP%2EO]`QI=aeSduIA
%MLUg-N%^b<p9[1;o*S(-&O5MGFln<[8tR?VOi]Vcr*9p+e^#>orXmQQo&o8n)e;eg(7uiEJ,B6$lZ[iE:Zi\nm*f$CJ+MbLS8plF
%5Q(B6pqdhcOZr9Vc[O-2[6OT_of(pKIt%FcRkK9ap.t-@q:RE=s7l#s?JYPQjk#!m\U4;?m2s+>V]13WgDg.7JA1g<>6R3?q8J^#
%o\hF;IeE^-Dr,Nln%\\`0/pXqp[5H^0+HteHd(mSYPC7%o+5\bklKh^+4U,Njm1N*r;$<70E:U^j/)`.Hu9J+o%f@Pm&,oO0UJB@
%rQ$%'r5R43_#jQ!Mmn0U?hs>`0>;lmBCtW:QcQkOq=H<n^B>B*cV)HB)?9Z95J;FDAm'2,5.pjfea%Ed^7'"n]GqI[pQt?`r2@U1
%qj[V3p\KfOhTRi[+SPQMFEN'2o)1<`H96TU$,>Zto,ktd>>N_SB2>/+FE@2"D=Ps@?iKSREKGZqo8C640-C5jJ)1&"?a/[&*1Q[]
%mO$`ErUH)DrT>OmqnGAkfq8W^kPIP!m`r<)IW"=p0'@UWkBIJLIiad#_o'Cj_s-.JiV&s0["nKS*qD[EL_&I\5IgU^rPSU4rTX=L
%rq=(`[nhHr?gl0d^/+Ln4q&=W&Q-/)SPFBJMOiJ#T#rLSdOCd)ae+<"H1u9%Is8K9]=YcBGO;QiQ+MF1mc%N^o65iOh4AO,DXVL>
%[s,<j[t>RSf%Y57DprR9%Cc=[aNjaXh[_bof5H$)Xk-m*m]"5J]'lemgI&SkVfp[0>An#1XgZYu9.dU!HlGbS51KIUWd"-Ep=a8`
%V<44]XJ,JOoZZl&m`VTbQ.s_[/%(V)9.I3"il`0K53I]KT2588hr^M7Y.<V`;iWkKT8*W5*mu2%kq:ehSm&.nUmt>?.3tNj4NE5%
%+&DDZhSpVW(h8OOk*TV:+o:E>3BVulE!ggJ2Y>?_%41(s64>%4i;D7mpn>n-4+HS.Dnc)-ZVNd]i&u_u2n%1p%<6T0/=IO,G/]H7
%\^@s_*/"9(1qNMY+7@u!H6BmQ]:8<s@%RpFqniKH)_Anug\JA\nEJd-6u>B=.k#c@bPQL%#[-8md7$nhFbH`(]aClEVKLpk.'Glh
%0/(ALZ)2/;=+8uSlQiYW8<1*lU\2?t2<S&)=/Au\=-aXe:4E>Y]Y)6<UVgm6e<tK<?ha+PdHaP6\+8hVC@\Cs.e:`Sr+t_=VHls(
%e,7W9:G9blZ2a`JT\$li:@u,]f?e^HG2*^bFM\Z><I#=*AU3Nlnc\&oP(DWf"oWl-eX:CBJaeS)-[FOqlW.=t?B&8k?A2]g?>9$[
%)p$4%'@]MZVZ&usI\L.ql8<Ot:;H_;hn;dsfA5D.X0:?9RBLdYe_R:m??32<O83b7[V'Hk_Vqp&EEF7Mk"F"[qKgf-mWYk`r\`:(
%DYL`u^&$^<G-AKk7ZVlDf2phBdd@h\0;Sn^oXL_+$\dL\_?hk8%60"dn,X\#\TSt,mpR%alH4,AmY>48n1e0C"dG@V!O%<^'sF:5
%XKF\SL$k)khOX#;m^Q^-j+lQP4O15Bji*Ud(os$/`e]3-MZ%iNppB71imXae:<t/W;W2#l_.0,$Jbl/>O1A\b(\>d!0BK"R=-^rY
%f,]*1>Zc9Wnn@%8L1382I@U9jmoN(G-%egsY+".=EWf#MGOf42j'H%AOcXs"W3-Lhn<t]&ZAnjfj?lh,dQ57$5T#Ss`uFF8*UW"l
%m@U<T_CcSWP>6IDU,Bt`HWo#hlT"#n.u3dYdH[692$2#DF07@;>FH/dEMd^\)C<C(a)U>'=PSnrEBfK*5idKZIV_q&K?rR#eT%8Y
%3*:CbJDH9=FrmUI`s0O<XZR)&*=&m2K6]ENec"E1kCLL!Cht*h/.]HQ`],q_+.Vb:E4l(aq9B)UrRg[#3+<r!Yr3;@\/kM<2#-3#
%3tJ^m*@2uZi2^GYf/EEjmGPIO_07!t(umReI\97P>WE>_>R-V`aCcMuqgNMQo/J.ITMHPT4V.Nu#G:I;hqnmWIm<`.GoRqkcmfO9
%+:n9UN,_AqI7Ocj6ZT\lKkMGX57fFWaW_6%UY`I'Dqki5j+J]1qsudhINW)>Z:Q)m8fb30+#;$qOBq:0$o>nZis6nNd`kn$+mFrB
%%B3u&Hq6L5kOX9=c=k.l&!JnfB`cZ`UBHbbf]aKUHCfOJpN#9T[*NeWchKWYG-^p;e#Ar%H(O)BMY6nmZTHM"p9_t&*G7(mc7#5X
%4.4h:3D\]/'[l7+ZU_r]T"@>!>m\8siP=tf_K0,]M6J#q4tn$2>&7N@5e'%_J"20[B)nh0kFg7+^hN"S,&elJ.Sb(@E&R2Hdg:"<
%63K=uO]A*k_D7[M6K\P##A9s`q8!BKgTV8SQ+NYVkFY0*$_fG:o0d*%U[doUe#Ulsb3QVo^8U%d8,kkTr9f.TIRsjD;`%NfX+Z7f
%'#(C'kDf=dg8Nnel90r#^T;fi<P0-Uqi]Aj:>/aNfW#I_Wj#J3[L0eolqd0N$!$kcU4$%d2ALS>AFEN78,rC!&eb(:%ss5\JAC6P
%QCRMSr#-[=^7(*8ID#SldZ<2&D_<+b7]=i2@nM1@\NbK0p%.?DW]KO,=kaJ$UJ^?$0>Dc/?gmsuX-WaqR^ISg_ESXk4V@Db1WQN\
%&!uXlEr@,,5?P5Kb4T6TI^!@tQ0X3qs+;WpX^")0q$0Rd>If4(q*.uehobVE-<ul'0;?G+r9TCf:V9/X:OO:uqo_YigXjiOo?jbh
%j8+4C0)?VBiIuVGeG"A#X<0SH%:.laFYo[Qq>/2YrY%r8m*M5$j!Tc4:DT]5I)U#c`;N(nINg#g,ZDHI#Pb8;D.<]l+0^p9!8FM`
%D;hLV\PW2$TPTn!_hY8SH%i)38AY]MATP`*2S<IPF'Ck;gKFCAXVuZflLjIeJ%PM@DLV3VjkE#7](t1WjQ1/jMH;tZcO&?N#da(O
%/`0It4[$PRd2/68./?_EpfOPFOfj3)Z_oX7Mfen"P^QC!-Zt0A./P22n^#,8FhbRabNj%kh(Gn6YL+TYj*]D=<L-]m?HHMnH&:?l
%oGED,l>(P'Y(N<1pWMl5Y<./\nh[#hqWc8)/[&om11,AOi]fBB-f"KGl1bfpm5d7Kl0(dIimO_H3)&3a;N@c2F(d(ZJg*VNr>1NE
%V:[d(K8<).j$*t;S!AlAS,`7F^],D9n,G8<J%J92s*F:/s3og%nIr_<j**QY2uL_[kQUs[%dd'4Il[Jf/\h/lrIUU)H->d)c!S4e
%O+6/5^LO;<ce@pHBU#>V:TddeEI:pH^W(WRMrL?6f4PbGqdO9%drUb)[3ka!D3N-6_*X$edJ%FGfUiu3P-r^3Rl4]6E-u87jSddZ
%j>"S5.=&P6n84+<cUmBu9q/ES0$eG-rFRlrJ7TTP^RZs\Sq@r"f@b[a-%fP@Rhi09D0#eOo@Z4-:J]a-#!=`_3r!Q%!?IV<Y288W
%@fmd@l\ok3h?P@`:35cDD(/_Wk,,Zj[J=g2S)t&?2Wm);)DgU0<+iRPXMA=eS^D]U:]P[f,Xh!cVR^DY5\Y\;k,,Zi&']ApS&PLj
%1t<I\)B81m>\A`X_L=F`;W>[Ogb`**2EsrXdp.IEjufP9@g3sClARW\'mOP41NL.SgYLqU3mMcpg,>.!+"+U5D0rg3/JD=Bb#[q7
%g2,?K[ZgU>j.Q6TUOM]EKt4$#0RY?8Rs#-CgC7,=^#VmLKrs`iIGW"ig9af2VEb'-diJJUQBg&6lOIg0J[q]'UikUbjp!q)fC<dJ
%)t;3ZVm0rR^glgqSSdNkPK(Y"lA=:i<0@$oY-#q`G\h8eZ8PeBZ+9;Ig0.n<pc*:?R@B<heN&Y;e(ggABWetPBl:G*BWcF11q2-[
%HY:.&F.%F5;ZWGQZG=^Q5n.;71so$="Wj0!S2SV,G\jO(g,)mhL#.)1gWg\6NK4aTrcqR*aX05cAA*eVCMTF:Ts`0ZD/E39[+5Pc
%X_m4@^3N&7Y%?J<p@Vi6>9"I;nO3<0d$Hq)]`C-4X>PBG;3<iOHi#2GSjTIbqY*^9(dCF,d;(?/)n-`2U]Gp/j^RKCNP4L=72mYA
%+`RS3mes/8pmXMJ=H?UM'":k5E#I/").-4+;"<?S#V\3@5PI*R%Z2<0G&:u@:,l^b.ZL4QI67:K0$?'"o/Ilg\_gdg*?=u(qk_1c
%!Ls).[o9#>F1X/Ng`:PT?b)#=Gq?Obj4X=g%14,BAeFusZ6(*albfUUR$WlGiJeQi?h\8;]e[@5H0uN/>@ng%@-K;jlErY,1,S_f
%2KAXeIXC#"ZHjR:84p_dqR3h+@uIo')S"c1mJ?FCL0?CSb!u<1UJjCqalg'R)eKUJ]6IXL?cP0_`_\Y4o+IgWZdLHjn#gS#h\]q'
%F-L1QR*V.Fg<=3.%G<$MNm#j^p9GOi29Hcm&2g*3.YA_&2F`l7UoY6UKDZ/CrB,CsGC:OP]Ku)=Bu`9##'+I[=k7U5^c9uho+]e(
%%ibe5)jh^86dPFNp-WMqcVn2K'8B?:ED2!VT`G0SUPHR,3A:\!i>?l=VN[_CO7NY"\Xq1ebF!C<W=13]6GakHCTE!gNM`4]1`AK`
%n^1XFlhC[9%Q<8/FQd3BcM*nc7,jMU%-Z'Hh-oi,Mg2]'7V=n))S5IgYu^IqJPN]3[2UVi9Zf#uh6N39V&c,@[Gg>,VQi;WfXOY^
%9OB?!pY8G5>k6;s'?'@jV9o.[q6?>%>,oIGX'[:Cg2K8f>`+=HZ$$70OOl`3I3EZ<LV00t@-[+A!!CL,Y]g3)ntsISAT$7jGjJ".
%kce,\Im=37`.bE+aM?TDmgg9!qZ1?HIO:_cICCh]%W>P\N#;bk/f96/dsbF,L6<<?*TUm-+s"8dbY;m`JN.9nqfZQ0*cGR3J>>?*
%1AaT]PTKE\FBH#YNPJeKiI'Q,$au#N-=e9N=I*2-JKsY:m[>m#?Eb`P"g[C=A$t[6M4U41S"#57N_0-0_&)lPU1FY37"f+XHg]1s
%nTco&5k\Xo%SV[;[((&8U`*W,.P*A]#!%g;L=c-4cqJQ/m;3Ym)3:u!p%2^aj.=!SO]h4spB@i_k$H0-p4n@e])cN\nmrkPCK!kO
%0@dLJR,Uq;7_bp)dfrJ%+GCaU16+b7_m<G,T"ACJNa.V$)JSmt$f`4C4N''1(fJ9"EdY8pCgcSJ>(S&O!S5NU0qLXpU!:WU`1%c*
%r&F7":290@(ZTt,RN4tbIgV9R-[a<ZpSBqW`dWs_9Yf[hj=<aS:b%BlZPh&/#^ZV8FtAeCDMpKYP;Y/a<\\.A6pF`bF9r^d[p)9J
%F:15_FP/8fP;`pg!EV<EE0!fG%OG8B>A,C*PS!PaY!+KXNlO8-5B$&ZZ(".Ch?\X,.KoSGC?Mg(m7(^MmC)d8S9?Y9aRDINSOc\`
%$<*M2$/2Ed`+E*4`+)c^pFZ1Zr?RQ$g*1#"5"*US"N%C4a,nLLNQ<T'&(ps2BOW-)ZSH+a3fqhof;P`h@,?,l%YhE&Id[)^;[>gY
%9d,6/p[l/cPe:s4a%Lao03m)tG&*Htl$$^:[\ZW#>M1H8rh;$2Ft/fm`,S2a)+s."a/Sa;Ou&Qp[%,NaX6,411-4.T,X_%T.OCg)
%i3M:3Z8$[]BH*[4N0ZOG@Plji&ZcpZ)B7dG4F=+LOSHM_80Y,$FQA"7Sd_a;S;a$LCY3W(3O(PAb!e,!4Tce[\irN#j+:>=\.S$:
%@>9r'ViYZk7]7.)b*F;l1V[^j2N>G'L$?RWQf#ORlK6dEq;pqo2m>+*+Cmuor`k4f?&*#-,;(ACiGNK"MTn,mrjT\@?/#j,m6K_,
%l_Uc@4Or!&%"h5IroTdof:kYVr)NI'k"=6,GGg21U#!`lFk-5+fZ)Yak\X#RTRA.o$T[sdCG$.JGDM.,eY/k[3.N,HTak,iE3)fT
%8-74<#0LLI,U90iD[$FC_(+u/da;9;@l<ltfn3QopC7UY*,cYP8?!aG2Pr5>1$#('h\]O;aD`X)EGbu[G!4jtY*=UK4nq4t,'8dY
%OQbhQfZK@%h^"219Z#h@d(.3=*U<g?57&@Vk`b)&8q$C7J_uGUa14bFQ[4])#8u!@FV(XZ*H$rD&qi':PZC6@:?8r'bb`B>d[7uj
%nB`(e-PHp:52ptu/qVt'2@f@8e3QUs0nWg::tb+=0cD9pE6s[?\Kl2)$p']1$>4_6^q)gP7Rt-;)Ld\tdUelmGX*,\A@t\uHhgEa
%m]\2_Af3-Ma>udHW*b*%A:+kV3N1i.PI_#%F(upa<)&&LlSeG:h[/=)A#4U5NS[$9eBOeKo!3aTs!^KJN$ad?C,">ZnU$39R@Wmp
%a;-Y\'L8-3G.U-\/P$dDLNNf)2b(!,(/l^`dYG&5GY_)CR+Uk[,WfJX/h*qPE1gd%jHTA7@'i;r-@I2%PAQsUXRH"VS9YGu'e#?p
%d0<FfGTUta9s`4V"KKQ/_Tn0I6-kP"Ik50/_`=r/ZUkbgA>1tAQ%RB&4q8T4q`[bZJ:FJCI]jCli0H@`IUGGhmA8dZJX[P9+QIlg
%j$D^)oW_KoSAEs!6l=%#Ph.^bZ`i"_dLGF#-=d*e,7^CR90U]9`!;'D$j9(D7uL-+G!XI8#%I]IA-*uB(^C1Kb6Ple+$gN)R[?]5
%irn6AXopI@?uCVk\14C"PMVj/P[,3Ci5[8f5f-!JFW'cH@([X>EJ.ff6Nd]a&8r!4&)e`UG_5.P)rF'tf6t7C/-Ml*J8o&_b5'&j
%P'Ikf2.0s)GsM!?n8gB>8;W=7c,&E.5r)%(VaX@gOmdH%>4r2Q.'/G=37sk?SO,"13?Q2j\[;<i_I+.%Y\OjX)U$2m5.2D5M;r\d
%>4N-AklR\/o7dlP$)"`;3'uICQ0_J+2=q@)_2o7#!(%M?Es`eS#bb!Cos@!O4m]mW_?n55_s]>.2V)uCD&r(fhB(_m'JtA%,NPiq
%N8t:Tom<_4!2=sqM?b3'+7oOb&a:aQW^'T)@(.9c9d2:2dS[l[`_d5=F9CA=:!<^g:4f]10n%%2`c'32:RZUImg>gN%7$gH#R^+4
%!DK(u'JU^m%sTjQhr-PT_+h?BALBB"&5Z!`IGtJk&e$im"hJkG-WHr0&3>_c5t[[d6&[+IRV;c81td4/`u(6`*W.&rao_kj-@4!F
%Y-84#)dRN=YVJ826?SkN#.0!o;H'DZRD:TR9:[Nb:^<XtJWU@\!c;]R2]AJ24F<Tq"MJYIBop"OFh8IsD&]2S*"rA>C\>WFU,QV8
%>X)#a^9()JpLIqMW57F(*":7fPZJU_%.=8]Xb61.7Z1gqn'Tm&_X2a]'[tu&S06IS7O3=g+-aj4,<_0BR?NHeFjMogQ_6U*`lA["
%q\OpEbbmESS)s)I8W/7lZ+>LT%(\bVa0E<,,_Z#Qd0,^E1(.TbifL1[aRC(W,o!o>pqRE+l@JL'S[#Y61XQI?oOQRpJ],GaLaX,d
%A*p#4b!&+hCcn"!&IJd6T;WDS"kc?`q&P9Wk]_hm7$';sWc\XN`Q.l4iMRP(J<L3^NdbR+2nG%o)<\rtChudtLAkCB2=MT`1cIc=
%6f:FB=a"mb'4N<nI<0u"*9_GUHh^5n(7k5IXQ1&\#STWK+IdWf*tWSY:JH]*!05C(;=`cb9GIp?cQ1b/g^qd#5!b&hW?RV\Q5.jk
%!q=HW%_mo5o$@[QGSJPl+,&me`jUMN2"9/*:@D*u&il?\njFgq&b8'b,iN6lQ<5Ch=)dap(k-%>%U.'5;';[H9VX*Ea-!50O!r*d
%6+WZFnJ&:XOt9Vpdm7GaL1b==_`4:,?>R/D%N)"BPMn=VE5K!5"r5X9+6+J=4->*Jn>$X5dE/7VP)JuVEhn/^"@jAT+2epS7Z8KU
%>f/bC]8'KS#RJ*\U5%7ODHIdG;o$fj8qk_O:(4BgF;g)Gj+)?BAM%H%at1!K\]BHQ5nkG)WuN"B=:0R,+$;.CfRe@S-VoqFN>3Q?
%2GQP,M`5)^+T7@]b!;cL=90C^4/g,2njQRZ]u2CGU<p,s_I<RL0[SR*i[XstecB3t`'M37J.`+s-TD#7Bn:i7]7,Ud5U[Q/2,PWX
%n_>:X2``WpLBO<Wl'D`mJn3:71,gPPn5k/7?t))-TY<"Wo$BoHK`2-a>$2di_epYuK%.WDP(tIP(_jL>Lc8??&b(u&l(Fga,2=?p
%mQ+AT8#$-t34V?[EYB=o1e?%%6#['<Rt=.6+XjG\Uo]\ZQlpa&o"gJi3:Mp'(k!$2Kg<5n8i(18=gUQ[eBePR?rO"BU_RM.B-sef
%BnZZD"&6nD<X<1^aKm@@U_Sn7iZJ]q\n?\63^OH'Nu9EJSB<[&KnBH'<lkXYFp.pM)?@bYXUoo2"R=!iS-/@;WDK"4k<OA!nd)(2
%$pHb<;TS$Ro/UEE"'I!B*62H&-Z^TuIH*UMGXX\l$:/Z0aR#c@lV6HGZJ#K0!%qn4M5h(@&>k@Rek6:<i&%%X1$O@9DH+Ru3gQDY
%i,W;49KF=6*%@MOF[Fff3kn'D+ni<?^Q#]dN/m/0p:/qOd.lO3aGGPb%73<0+\^l-KJ0T&8FKR((t=1;_Lr/=q@\qWJV/Rn'I$(E
%#pENkC_%_T&2$O@0ul<um-;Ll"7(X84=DP,Q:*X-]7u,9Z1YmrK<r$7;B*S/HWXFiJt``j,*\qq1K>86n&nNC9JpA"X"paGfTe0F
%E*DTKP]3!s.=aok!,O>#.u8I^dKL:4F;[S,EZcn&$b2':EJn]O+o<DE!9cW/il=RLD<`-6R>9p'YQ;;5VH8LY9"jp&$W]MPAqB^o
%.&mI6A2>nZU!,21-(Lbs]*_0IN,K--RPG0aK0a,"OWoMV9.43,:(aT1>pK_L>JHjcPuQD%K)bsD0k8I6,OX;@/boT"RX21n$f3iQ
%Fl6S7D?*]Ga]*E<*pCOa`79B3K5$?5#Bg;sQAA/:arWV8g@9ljdDL,DLnKaPK/=#YKfC1p?KDWP"A%3@66i=7TK#Z'T<P$Z#f;3T
%2O]`8$91<3@_b:-#]]WQ:%Jo7d6o0FN_$,p.i(R?(;d3WSPptklA%W+9V*diA,0R]))FW,KSbI>944Z5qAkCLQ/pb_8.c2*Lu?Y\
%Y!>i.iRY?tU)FlT!F`,&5)AEhkWQ!on.>CPp!?kE\W$e+OCB/:nN\<i=\rS$V8N79os?u^)7TjGJdE6GUHZ]p&kE*EF3hY#)SM+^
%_&G/`O@@-47[i=]$R&b@>Jgd>2PEn&Qi`1[TL=^j,a==4W3WL)TYArf6Ju@K;+c'EXYTaTn1;ti<dntm#UYeKSQ1(GC6clO[%ToY
%m1<pEWK<t1+b_HBB\FWK!f`DN;%L^oLS,Pb4[e@<KR>$0@3L;(<DV,^!r8Mm;\'-/UZGSMYR%5bk_Gp1-FlGW`9LKY:^sZ2q,DrF
%'sYU_T=h1[n=t-W(eI/tM+*5[MDuL`Fj?J63;NnZ6%j0!XN":,7$Fl@WZNE=[?P&+@a-T$7/IHCL_\oX&#LK#b(^g7&.s,$ek&jV
%cmZ/B7k,]&=J_I@L^/nkgM2OE<!Lka.r:["Rtc`Q*14Fi&-oGJ&55O28st,f*g=4bD[=mq'FtjN6*)a]eR/_.i`r7=9bkSRC(QRX
%L]^"[n\Go-34C&QC_Xh9=a*[GZ%+`uA.#'*dmcWVo=;o;$6i;#7;iMWh@Er$<=fBjkHSm(*tJ3EGmmF__u_]-$RZ9*J3X:c%h"m-
%bSj#:/C;&IU5m^T@/b1F5qLA!CGH&*@3FAI`!R[ilY+_@+HDJ;"Hd:<!K':NmuW,,LM!.S+dd;phXj/he\'fhl%d7J,)CQ$=I+N1
%VB2JT(mjjMBo\2#+5.m(c,D*b+bD8&._D]$,,h8fLkp4V5dRf3for=*\A!S3p=$5&J+;X$YMal[56l+\ZoEk+bgk'+kTi1<;)7Sj
%4!hY:'6`d<N<,hrp3CPI[t<$8f`T/I.iH2H/2XY^+fY?aTr@m/4s4LZK?$i`GP(Q(\Pod?/;$;/Kl#KeSA;\C0845s6!@D0dG&LG
%@-[HB$JDj,9Pa$PhX8D?pH9s9gC>cCBgcl`UMfs/:rp*$+BlBW:rmHs*>Q=b^3endkb9-alPI<bof'Jlao<#Po5F0FJ,J\tT7)@i
%rnB)=<=_RLbD=;SqQ+tjmKQZ4g(R&D'JZnEK5^nkK&H$KE:)i-Q2V$d/WJ?'BRbYcs-['Rft+>].=nVboUIfBMOS6,Jheb@i+(e#
%&E6!o2ranWD61LCWKVG#F0IRTOAODId)nZ/nAN2L1-I_^_+hA%DsRP0cBjU#,G4J@nBEfE"NJ@KXRgb7F$rjAA2jLFd-GE,YR\2e
%W/Rpr]@-SMo:^F(fm1-V3Pm[_&Yd=qTq5.HnDt,$$uS*A\$qoT[\@,2o53[<esljN?Lo#e.n#@[eA<d]mao*Xg!FKW;O]6GJtLs:
%,%0\'khfk:IT\@F.',7mSuXG9@9K$gSl2W#U"dSZkm!F8W\eUHU#eo$!^"\8Ygdhe",u8A)Dg!l;*[I2fj&8SiFA0""YXL%9*.hT
%QDF:B;o.I5c]s*cWXQcU.>)uGM%/[p#RR$a,M:[Q_@m?3J^RX9,9)"gc>1`PO,7gcfH[_h`W;Y"T'V3JN=h[*n0*3k?B)J?H<H46
%LE'GEV1Q%fHX=AciKNerJei$jWrS3Z0im=1+D&=*5Q;.<p-/btrElL^1)TTEOR3=C*O=DdO<GYV]0Y2A"tK(<FWRhaInZm<l&SCn
%5Q*=9k,1Ejebo'[Umh/ih0!TS$K`iX$5Dl$@rP=\flmA5LAjP3np\j`Td4o*5,>6.o8A+0q2^$'^I^a1;Unf3qDc%-*<`;/,VhZI
%EBM+Hc4Lp8?0A_R5SK.t$eL@8>!LWs90Xm]r<>4=GUZnk=2PA81hn0'+Gs1(-*\(?2@QJM7Y_Qq$2X&a(]e$PhgDS^+sYrti,LT9
%_2q8]U_TGBU$r4GM>G./Jo[^'d1i>ZS-1uP@gPjP@[H&!qeVjs,)jMXDG8go+Z'B;h@\D=`c.=1?KcAZV69<#1]n)6j<ou\OZ>o+
%]SL^J:^mm,ip(qe`;CRWOTisjAO]L<M9C(U;0WUn\3klFL?=WVO/-d30oX,El$.iU'ghm>&hpkOkij'0*%T+?%Zb*H_^j>2XjXcC
%JFI2./$aQn876:B-4mH,g^h9.5$-l3L1l#al3VD?Z/s-DmW,qMpc'>:H6Q2hX?[f.C#UH4dM&V]"_+&2<ZS:OnqqsVN.7CDC4\%o
%p'bmeSZi\cYD37uO1e.5Pt<-8+">AH@ra%m^k74u#9o;kk%)]5GU!!B%]H%(k?T@E>jt/$99icc.#eI[XA+L10t\;p_+WBTPS'(>
%eO=cC&A;V7aA=&3!1mJC@152uT&HNEH-]>)"qgf9pMgE;C(^fImD%jU;BS)RW9"Fj&2DKtL;FfkEKS?PI@RT6>nbjmI!emu<d6KN
%4M(aubJ)1T.$/e+Bdj[+>T8T2@aj]Ggl,ZmcN2@0Q`2"W@J'%r\jW-H#fp')bU8ui)q_I3)1,T1TMX_+$9K@AX:@SiW2Qk<\3,u'
%#3hFIVF(&o$js?JP*3(e*'!G/e*R4lN+'Si!RGYMW?'U,Q3c4`M$>)H!cAKP+t#^c^_q86&j(mmoFfRQ36k7I-(8f!U=6PT`tn(0
%(^+MFjBM*-`gCnsK;mZZ^s*]SE#nGrm4u)e3m8nmcZ/[a;lYCtIBqg06X&CV7&`uE3[MlN-P4kgDHJaS!U/ri[b[Z!K2W,P@h>:b
%nfV@`f6FO;9Sfrs4+Z-@9_^C$g$LQ&_`H!fU6l461aInFF'b020e#RODUg&u3E"n]Gkk$XF>:>7'HLL:#s0gWhlug*caba)6#LkE
%!pndJ#VduQ+pMg3fo)^TqE$gqE0G;Q6$e'.XlrW9H`Y64ZUc9*,J-9Q&SRGd=8oE6]L:X22E%*6I(nG&=bHUF&4.k:R<.HLK5A8h
%nd\1s-XB3O^u=;iH98a@KCa9KGB4/oI+5D]\-0:#iN^ONfBi]Y`j!8AJ<t0:e;iiK.5l3[]1R+8*L8h(j?d)//C^KV3tjlB"#dqg
%+oTQH(AM8o[AX3Rh,8KZD`=.?.*s<n,'3@PET$nY9t(LL1PQ3C#!BM'VKQ4"Fbtj/+dAC"Y9kM!">`h592g[M3O0HV7"5279YdE\
%?4+_E./mi5m?$X"XgV^Ni5D?rlE9Yb"NZ,HFLqN3A(\S>^e;.XC<(J$-%`V>P/`uQ!bhlKd[<mRJNop95*RLifK&Mi(Z:qsPG'Ps
%^u"p)[tqH5rFS+q!C#f$L>pj0NStYRqedd#4,+&K#!BM'VKQ's\O>+-3_E)'b7Yt+S8"N"'o3quQk^:SbSEm:8#Z&JOO3:@>U#<N
%5]7T7+QR5/,(Wk*<Um29*lFc+cK%A%VO!VH^qK&k4>)]n(*LS(dqE]3R.a?Z4er=H0:^'J>`1f>_Wd*H^e;&@8hBfMq_hIY&unW9
%b*P,[nBDGL`LQLfN6ocX:u\14Zku4dJ"ptg!0K:=M#%NL*f*W]6sHOg)?s0R:`3R[T.MOP5s)tMom*P^g<%]fS1"D8QO6%<U%I"o
%WSJ65+om>%+ld!M<T/V`>I"@Lbc:,'-&^')&7L4_=TlNn8k<caF_j'n=Y,Y6LcAY[hK*R.&Z0)Rd;;92@dp0X,?UnEN9kj"$KOSV
%L/X$M_6YQ-!(L"DgU-StMiR-I8:W*k/`@D8'a1,@0-VuGjN[a'A:;rr6c)V4l[W+=:lm+P#+E2MYTqebH_T=dabD,QF.J7F!AOe2
%msM:l%HTTF3"*3l&\/AWF"BA]ka\`+Mg\a!)FtK.(h@2]"O39E59u:8Z0!DD/XaCE2>t!V=L'h;*!=8ln=o,DTOm:@G[GTAM3eDa
%E6?$<O:CW"C+ZITPBpGa-^>-3kE[F[nZm#LN)M$c5_@5d`PecWV"%n7)65359EpC'Ph(*B)AKEQ64s)3#^_H>7OlILEasc<#dAVh
%S8'c]Mj6fO<1BF&$H+O)+[N2#:6*"`?%GaG18X&8%pfDq7)8sgR5MK@k!C'5(mSHa(l:'+6D!$V>_p48>W#oRZUeSeWWimuNC7=]
%8e6a6@p4Cl-W-;5fV$8%_H?Qs0MA5JAL%JgmD3j[W\j.6^IR@jM:dYE31"0(84NPOXk4XOjCjC)QpK.((#!,;l&gT1/iE'kHBc_>
%HaALRFFr2.eu$>p2P_T^1/g$9(!1R))Qh\=lI&[CkGd,A9UrX:arlKUN0l,h\W+LW51@3rSi]G7M[3C/><A!/($@$VS/I@QMVc,L
%=UeIP`7,/1^e1?]GV03/9)KAAASXn<MHN)NnJgJk/-Y.IZ@2i4B?KPP;[_$H]&o9"AAX!k,rtX:;;NJD37i55a$JbS<?*g)@c`>q
%S.,kk8Z'DOe6O6GCa-VG+`0[#(FuqJj+CuSf)$"akZO(Jac)a\dh8Hr<.7DIGWj6;aj%l%2YoV"Q?'L&EFgKQ7=6CtN(DEIgm#f&
%Z;=4U#_@nMog3CE5H[O(0%&blMulu!Z.'2ClAgCoK[!N=a>ADu7j9d5W3F_Q+O$?Lm,I1OT'9DU_C_b@fX&\[e_nHm,nq5R[.FIL
%.:c0lB2368`p2S)^tK'*5pX>&&u9l[b(h[`bZeP*'q?GO&8;P#XqS<[<jeqB(dWCK3#`(@6aE67KoR;9a,,sD=MWo,U"Et/Qe$8b
%47=8'N>Q]2,9c8cOBFl*9-g$[j?>u`\THj$7dQd,Eoo_')e+>]D5'nsZ<9PF8qI2B"`\b,+a5MtEu($=m3$'n[W:G'<^!KNYd`:3
%,n3].TZf00'Ve53k")D@JpopCs&(#4$jo<d]R<8,>`X7`Ac=5JLk,bMae^E3+P@rs42Hl")&81MX&GKhl!u/lT2YfW-jE5Q6!/8=
%&VqJub^Ol4=J);VkbP(4YudZ!NMuTM:;J?C,5\Z@.Pcp<"7oD?C.^"mk\4Y4"%52:UtZ7-C=6HuZ8LR>Qs#hlI'Ca)=X=9[%&EhG
%1Src%-W^HBV`'7R.H=LD8`FeICpbh"rt$<JW#F&<0XA%,Zj1/thF-U=#*]s,[hk*1j"pslX'CJO?Gc/nZurpa)@2AgdHBdA6cBkf
%6i`!#WHsWl.dofM*BF6`\hi@\'*jUQH`5u'*7>%:ZRGFJLd/X>'JKb:EF_*l4c-Y<Wfa:b57_"c`mkn@S>]Gc'A-iPEt+W*kGIX'
%;$kq#:&Rb"*dK#sM^Et+)!hRu*":',+nH>cTUIWnNSsK$j>5(FUW/ZYlet,'DQ4kU16rMl#m\mFGWglcYeC4i7iI#jY\1?]a$m/>
%\EM)8TqZP1!\]Ce"sljH4FukqQC"Fh?<GWX_^8k7D]@#KaDu8Q?#3h.EC&AZ:3VS#1b;fVcfpDl$p!'n7Htp%+,d]W<XTLH9\i&!
%11Ma_krA52"a*)I7ala0P!29nE^Go3PdN76H4q2Cef84q1"&Cq$:]T/\'9L:&l-$!gAt4ZbHAL@<eV;,nJLP"MAEB=^sC4].Bs`s
%;WnKg5!$k?$>9&T$6l&H:AMFl[4E3C31AQG'NC>`?"#B?g*F*=[4/^g%MC"Z7bCDV'4Of/Mlu-/Ztk2GYa6E^W!fBpi]fro$@KW)
%H(]%aJMRL-Tbi$L#9R&eOJ7>!@EL'q/"1f>4!am;3O('3f^_/%@KZd<Zjb)QN<XKQSe(0<;i@HLA&q@>7O32ahgjWaVJeiInZ7"6
%JUo"5NtRaj!(C_0--E#KB"Lo23,q0TjL7b-3O9"sPWPl-,E32@Z.Io(`.V2==Yk"$dK?:,CE-42Nl\E+k(269IY^nsa2JUD+")`_
%,<+$;6@Un4<(MT0YR_J[#/:d;,k9H<FHOP%[QKccAr$XDQTXmJQVGP0BlAbmc88'fA;(m&8ZAG`&f,>1<oE7MCqI\Uh&C.=LG<"@
%N92Fk+^8g6F"n5;J@*$,9$;m&NG/iJWSiYM,1.m8BXW_GCJFHL&ouh0;4t&BklI7BJ35UgZ:/JdNLW-J#!?OMMM!H6iDQkT<aQ+[
%D"@qnM%4SZc?BkP.Dk;&$HIe1G`aiclh!_BB8IK/`/,/rn3e3(AQL7=@ReY6@7b:2So1fuUh_a/Tmc-Z,t0%rEg]3JKdBq)l3Jc'
%.*t:US4"DNNQ%Y>h,Y8]G@S)GTVd7<*:P*CF?"X^H]p;i%b-`fIdfN;T.[s82WcC"L+[3F-!%'C>GZE0f\*t>/dSi"Tpld6CD]%,
%EU@-mQ&.e0YoC..C_7V>6)5jC>r+lu`KXaS?Y7;&E!S"*M+<A0M97B?B/)9LFlVHpkE7dcjZlU$cR!,-C&$1CkN/BKU+0<?;%NeP
%5SJ?'@i"Sd(,Vag>(P_j/&0h%EM>85Sh]_."(Gc,_%^%?+XAJiU8u^R?7T?(7R:427BiR=8@Fh?"nVN-F_)gpN'_Qj\TaK3T-/*P
%(W?EdKo.2D*"=WI%=nW76DFNn9+ql6aKec?knVG-I0\Q&iInh:>3k3H'Y0PE)]>%7)U8EaM"T+T_glQQCm1S3+&-"3>tk&rjPVUV
%`POC/Sn/]>Aqq>eJq>Do6/>]+mmMR8fGQ7t,XpfS&f?e]pBXKf'oSV;_s3n.C[@!i'0&<"ihTaT9XDE8aJSMd!D]XpA(WY.qRA7B
%mC%'smsY\6FNFWNT`&]#$CI23/u<ZQCddBgD&&_I767\anRZ9jb^<_J&K2bo<moMm9lW,SEgN"(kTW@0^dH'h"!?N5QIEtBB=QjW
%f4OQT8i<WgTb=^(8)T]>.NB]h.MMIpp5/sFMh<9D<D%\\b:K[_"igfg#3*43#-)0g'ETY:jQ]("^+@n.fW0To`nV]Z]F?Ejc:15:
%ne/;XWWSj?=FI%:.E^B(ODgDB0bqlC%AEmH@qLh!7#s+DY.6%]^dkG4A?D**%1?8%P7GS0":#=*#X!Nq+,VZAI>#R_p7suU7FjR?
%jEafPRB#)Jf`L6SJup<*#7>k>GVgE5bZf_22sc_jd`9C$@f6fKjl8QLNH3-ffVD@s3@I*?NUk`:$1sQ?.BD&co1ETDl5Ym&CLD'5
%XHh&eiO>iH_3dKE_gU;L"enD-l5V#f#TMQoR.>7#>E`lrMF&K76WA+e,#oYI?X2nCp8Jr'Hd!!]m?ag?Q7p1D(AK[hZ0n)`-^rc3
%c(^1s1/NWoFTtgKL6!O`_^MG0a::k<ADBX#KZ&Urbh_">>c)1/jDg#$N`(6acYF*<lu[Z!Hh@*,4L/6F<S&?ljN<-$&anLq(^?SX
%.0S_N@oNAH;_DTjC!r)cY#0<iV:0S`O_#."k/;(XSC,Oh3\6V>?FZ:<]?C?2qJ0$_"h1CpZHisMXME'*&%cPUT*PdS9.110,]TcO
%e2,ih'GX48nAm7l`>3r6,7_V\ScA`\S6eI;D*HP^3G9L@fH5'aeqMpSlHLS<?:4D#1\!J;UA^k>;#9,t,n;MX1-WV%K9R(=n/"/G
%C>Tf@ATcJJ2>GVG_LX*ibouI^Lf!m(H2JSjFs/MMdP^T1'5<($6\9,144`8ejJq'H7-7Xf0PT<957e)"/N6.J<SEpcOh/.Zm=&i:
%*]DQd[9nPU-+Usi-ZR#X[jnc85U_5A.QqI`PXZ$n[T\*[A)>Jl[Dh66S#2%-'_FI=fW5St.M8b7_+f!V-E&.)okZ.HNX21/d[4Jb
%c%.O6"#LVC%[hf6@/X,?^%@8NMAZ!pWs()\9),M0?s-T69OdYK@DL8nD7*4`Wi9LH8LP1.]<UE+2%+PPA-%l@&lVJX"9Lm,;[;6d
%)A=!]AbKi4i:Z`:10Mr_0giVfa_8Z\5O<CsM')Jo9$.3*ggiA(P\@jPZd)NS.Z.Z_)Fq3I_o*!Amp"=7F\+`oU@@1GHP*RLBB."7
%c-:"=!@tsu%YGt'FT$?QiCW.]JEl65SIm&Ie4;9ZJU.N7?rFVm6!PYP'@4Y7H]i5).1%nEGcWo=O:%aO\n:4F/$Ni&"C?D\@;'=D
%=kB8[!T-jTOj&Ep$2X@JLW_-@0%T.;(h'0IL1E/RpiuupU=6#4)<<41EkP=+W5)n%nri@\+QsRA*LHVb;eAT163O$9;-l<lT,M:u
%DVlDhCW1jM=snGm3q2ka+bbEM-B2aR)OLl(*?uJZj-17iXq;,d'%`'N+^]0[Td$X*[?fa>CEl6H?d@;2#j+QDqXJfRq8#2*jJW9)
%(i([d>k7e-raH,1HD<&ehCSV1K.m1>1<FMD%._M;,rAig/dEjsUg"j[e\oDQSF!RCl&cJ(ZUFM#F>,8ECeH'ma%U8>(>jmdT!#%-
%P(!W;-oDYt$q#u7CCc,WmM!R63#W!%(.Vg!$roY\[0K*[ABR*6>aUZ@e1PHcJ)^ZQ,%Hcp!1mPOL63A%bYVc@8,Pk-RW0`c5R_C#
%l@p]ALgRK3;h6BA2J_6>1BUB'g,N%f.V]SGi[h*t:o\*D%B^bBHImmT+Q6d/QCYQYj.pQ\o;4O&U(QrqQBE9Y1E)nOA85ci"\]RI
%/A[fi[;3?5U8?9he%t`FP)ch[?E2Dsn][n6;D8QF]8Hl3FhoJ_+h3>lO-Z[S0b/GeHtc!\QOPF.Bq>m=_-/d]l.Gg'&slg6<7\9L
%<*Zj7Q5qGJ'Z!5N^N;dp%\;R8aW4Eq=]1XRG?TUcM^mI`&a0(N>cXBL6^q>tFSeX[(eD=[1DoH1pJ0[^7;]HEoar,G*'CTq2cNY(
%0'M8V<Y&e$`#%.Aoe+XsUOf]><$WfGB_kXeijm,?rC,]-$u?o8"`(-l_s(b^qCBR_nML$,f;*Qs-np_6OC4j1LKr>jX*Xp.5h&oO
%h4.7G,:);X,b6;!We@U@kf?r&"X35rTE:lJq?#XKJc/`l/brXQpqm#9h!%JlAQ^V[VLdmTML<bc=W4F!UEpb8BT?;?-$])B&OVnC
%SE0I`2btYN8k,iDZc$['FR_IMZcQdV`WjA9[;OWK;Fa`7A5r"aJ4s)H9N=_]%BVpBTU:o\4dD2-0f8Ku;q)ml\<5<@V#!hD3=J(\
%o@".L+@+)<&8,$B-5.'E]73;YE2q4-+Y6g]lEG0X0[B8E9ls//E_rI77*Xei5Wf]4U;Wcd>j]ZX5@Ta7jq8(fU&^;gbml)=`HI6-
%KuD(s3DtB4S`0sD_*l@WL4VAgnJC1o(M5)9Z$h/f6lRs/aL!YWUft!5,Pe"&5DMM`,%bE+;/&34b?b4E=ZaVT?#b!+Nk%\QNpBFb
%"=;+p4\19lj4I+M-9<.SNsikhC7#OVkMcRr&*;NTMe2?#G.OZq.\mR+^kaA)0"L1tcP5SPn]>lQ"DtN&!'j)o"`g#[AeSlQPN9aS
%:?VCiJhLe7rYtZ7mV-eVQ=]8FYSI\Nq]WnSRt*J?1g/B`md]6]4k'iNBnOd9C/(>U/T/.O3/K+^/E-oReCd%oDj5;mG?k>h40UT/
%&5#KJ=r\\i3<3^KcD)q&8W`rP=j2"+R]f-fY@tRdi+Tdl_^D"?k34E-$S]18^mr.A9bpkh]-Y-t_]P9nH_nij%*Fl:>KrBC!^BB/
%/X$@VCl.TUd>6S-q_tH\HisM7]*<SJge.&GK^I%WF2cUl.PJ:90sM'\61%s@hHXLH3i9f'3Z-fIc6J;*o:abE6qXeFOqL:gjPn%t
%!["qk$U)cJ\]VBSC)j28r!_Z&8N\#H%uJ)@m!k1\,s@,n;k:8"@aU-N^:oHEG$).DMB/lWW(k5(gI`RMo1%[T-@]HdY-$m+`P8oW
%QPddW[.QtJ/NQLuZ62_0(c;I`H'LB8MtF$"E^cG-./3(ge*4IdVb7(c+qI!c&K5r:\kUdm--/;$:-Ijgfj:U/8TJGl#+C[/k\/G\
%B[ogiLdC1Q3`GMN*FZbm?M""UXt"*Um\2,)B/H>&SV5@:mo<1NS^Z$*Nh]Ln2E!L5hW&U!MRZ%s^`CJlD&,L]&8`0bFVHikS;&;o
%.4Fdk-/>9S;MNLlrA;#a@^2jd3'pm!#b0WgT<@P&Zo]T*3=1ZjTU%T?>_]kIW$$m6q]^+5BckoO<gPpbb/Nb[[b"'-AlfNPa,pt+
%._uj2[0RcO>g6YcHHGbD<4S*Q*$AFKlQTg9BL1mfr]kNMY%!6nD0-l#"\+@M>2_,XE*T8t1n5AoI]gMRIPt'f<\@nN0QcY+`$LV;
%\Y20U:.#iD:_9gG:76.aKGRnliq]8+_Q-/U)D,IM#Wpf\fEI.q!j<=gq>,?-3;iiY8\=Ii.+iMWB'Iq!frn@C^h#M;!aZgAj0U>J
%+/`i0L"K#]qTuAWV:!G=P'-EE<!=mGLcb8rdNfp>H(rZ;UiSeok;/)/f='6Fl^XE)F\Q0mCj"^;ijkBspmC&Md1Xpp+`O8%/4qac
%Q\9A\-u%??%q?7TH5M^6C0$G?!QQP*f*[l*!ICKLng;n;/uTjc$@7Dcd"uQk.8WleVg1!Y8)a`1?VpuemdCuX5:5h.-]71p\<(l7
%`9$=5Z#NJfB2D<R-n*KeEWou`9aWg(c1#>H$Q%Ls*&]O8/Oe"e]Ge'Uc6cQ,7;<*6?).HmGuju5&Ras*g%+9U845IkWMW65dBR'`
%Z(rchLJlX_NO-oEYCMPD%q#[kGgO."5bSN_[r1o$H+_P!?qC^r7OhN`3hGn4S\u$;H7?SkK%:PX#Cm]EKIR5ZP:V>S!kJIHSW_PO
%PS.LTEY8ce-nCI-p+0&pD\6?"TGdq9l[46u*Bbm5.q/Y?Y7q7>MrFr>Z+K4nBM"II2\/ac\O^;!W[;/Ro"a:.<P=Wg\">9::KG;c
%mPj_=Q\\A36aI,tQ_k+O$h+4Rb.hP&QJDX@96N%?*:o$))lafLHRqKKH>AgXh)$l)\+9?l(AB.5:,)<Cn4DhAk%qPk3fcn9Ed4-n
%>'MT<?uq.1Oq#'j6%Do;g"[$7\/7t=QSdo0C:g4A9BKK!A>r3Rh8Yu^d1D:u,2h-i]d!hA"u$n=Pk(cWg*E^dPGkdi=J:P:$BP_V
%^gDqu59fcq3P(E?:;A;2D5k\G=Q"_Xd\R'bWZ`XI.MjHsM?Q(9!pZp;_h-481eGb1kcWJ,,f^GI'fW>8Ju.6Vd^qg$XG7dbjr?CZ
%gS@.81J+?dXdtXqf>t3>D;esF71*<Po5pstBGOJ:<+eBoJ4_Wr8mD(+K,\iW)&oLM9;.oZ/rHID:]Wu<p7ncQ?$",,Z*."=F-^]L
%k^!e`Hh;Pomj8of)OZScVR*TIduCPs-+ST,pFoEA9jinRD"3&qX^im5'5(8or$C]16;aotbYQ$n/>/?pP$4RlC;uJqH=&,:PSU2G
%X^Y/K:4]3Q&<Mk&ecX_Mf/V:7[$*d^V<X!`"r2uR>)Ho@qj09dTlIMb<^W&5P/F)p"tLfCAV[L!_6Q(?EH':_*FYcEEgSnR?)e2X
%PMI\*[AMUZ?*kn]p8n#5+jC#0!BKT1j-<nV&O8\NO]@J81^'K"rhP0Fdc3-h7T+4`f%,HSFdi^CNgd^b]h7-63(QJ8#d1&9j:QVc
%T:D7%gH]*re?`&.&0'ROBI_\Dh?*LM)O+lb_RbgDVB;;h.6-ljdC]X^hh&l-7`>eGGT5<LXcafhA?A16aUhL9"W14MQ5(10NZ1?Y
%&_PmkWe23k62*!P&C@j8SX>bn>rRn'F6W`Y9N<M)5RfA8ldm3Op[QD?:QtiW2pDJX4kPYSWXFg/)ep!bRUsuQdXnkN#q)^)]9eTo
%r`\8aG/6shj&PeJDYgNW__6Cg_R`F@Qe3;I$P?,^'[B@CSu$HN]hlnOXF)q*kp.j+FP/WKjbOCQ+)te$a8&/Y=?H:nKhEFG^g#=j
%hP/qiakS<\WXHU^29OT.cONI]"W`?ICSuhKVb"SW]>lFKC>0b]AMZb=7csZj@bd0j8Y=BBG7n2K39'WL'A]h1*m&G@k/;()+M19m
%2+\*SWg^=><mGUIgn$qllTq#'BYtr08oE:uQd$aE@Of\.0":Y)[Nj2]lYM`X![LL=TiO4N,df8E=5&*Z"UA1_+UmR7-acJ7fOlXr
%"mIC7a]bMR;.cELl91[o0qZQredAE`P.-Oa(qZ#-)n;bX4^+7CWj33n+`Yk6WFsg/0f&u&BPL*GW!Ip)Eu#XrH)!&u<Qg<H>/4=i
%^[S=6h@P?hHAsbXP'bX01?_`GV%gY<h?pes<b@K-f)M0&a?^0D"P+B\&Sk8$:$)MLb>'mRY0q-gaN'InVGtMk'"MtOfGQ8tLNor<
%2<8LUdilUZBQ-pjK+\!imu'8/065KN&i;mDggJMrO'rb5<]US,/$?'U-Xb&YfTaDM.UP<'-Aj1U*0IAEEb;7&;%mfe;K]fnUSo80
%l;_::)kfW<X1jPf:nF7#!d^s%==g!F=?T<skX"QPS]dp8%q=r"h#]dVN&[@C^nl\p+&)<gXi)if/Ff)0Ocgbf8RKCVm1PJKS2lde
%i]l_nm,5&^Y4\q;=8n?%<>uI*gs24M9QXNs`d63P>>St9Kr/<uicHoYm;@\#0CISj^aN]_,rq*h'=2S@";_T^\(TIGe<LS)&qpK;
%Z;T]!FslZC9Qis^'T3@Thit5SRiOr.r<3fl@Y]qSMb0p>>!'(0kc7)m>5W`s<+8H&1-#gVC+P%e--/OB)'[)\`\F_EdA:c/!CGdn
%IdUWl:L\inQ*2I!j4<+d(I9Ia*h<J6(Xnc%MVk(Abm.3cQ6SkU*):8B'f";a0rJaUX>+!RDQ9]Tj0!B!\<_q\Dk+MbP,jZdKCU3c
%%,tB$Qm9P8:sBPRf$ZtOSL^!H`UG.QA?et-;H5^W:hrs1Q#Wc!Xg(g+'^*kAq&?cbe=u)!ke862^jX/AStZQCZb3$VW7.2:@b61!
%4_U4s`ljKWM!iH;mAcP<<8eE6I>H<>Uo\%W(kXjq"XJG>c'E)"19-Ip_Pk'@FV&uG-AOX?W*lqf]4hUVL.pFT]@X?V*"\s^WSSIZ
%m8bNoaY9`&ib2)4PC9Q4g/2N0oE%`.n<2s)e2BieZBlaM!bYKWfh,jN_Q)eo,'c.N[<+3EK'u0el7"^1?4`=7/?$FuP&;u51Ii9!
%V'[&8=T56G5d=rEcX'L'Mj:A1VFRtXO1n/L$rs@4*pE00<ZL,D!S!8IUCC5;^Qao^')Ng!%!:IY(7;1R!:$kZkYB$A<(!VFa$:=%
%X=L"\WPj6=X)M02j0ho'5"c4a.GAsI!=;:"=)S?aFcpcE\>G5s5V[3m%VIN5.(*XMC5[AZ6e#dS1%`=7.&H2Y>GiOmLR>AJBMnLc
%?!s8#K.[cK1(V"k91p3*L&%r$)hif&]1\gAWle)e>BGcql"58UpD,TShP[&"V!ZBd$i.;Ed;XY)\e*YdX$'Q/)<qPe4f=HjL!gY+
%U)g5^TKk<1Mn+&dfR(m?2k/U<L9-^u7\:L7T%&+?/N7tb-[)U_hM>?*Q<?VYY@p'iS3BR"W/9$*I4tk?On>GlY-m"u^lo>2@$8RY
%_ZH'[a#qHZQ8.`,p`f4r$Xo/Y;;0>8,7@i0e$=(qf#+3)1S&P@`s!!_l\T_@>,@[AhH#55"npkOIDp)jr^ADY6)hak(du`lMcJWV
%miZ=7]d?I%TfI,oj[Yl43ot@^>Lpg2?30[mCEN#r@1n<f?<Nfp[,-!Nk&uCYLdEfo2foG$SHp\R5'tqS.@e^4&ej?[&=:DldW$$d
%lGj^QIVGB2UajohXq1!nEU"(0]8&6'KS"7eF`p?Z&X&_'W++6\\6F`6Y3kk4f(lO\fIB\`%-M[`^1[k+&>t`D$L]CV?eZ4OVbn\p
%"9q7+#45j0Q6?CF5.PaVPSrC,19@fqX%g''Mq49.JQ^29;]mc9>n&C>SuqPr(0M!(*7s.h3G<FQO:]nnMn6tM7P#lH.tB2+O%KoU
%h*FC=PP!,[UHS37P>o418EHK.=d$[74c$/ObR-')E^&Ft.+/0gRb#\1TaZWQU6XD(`WNq%F_Hj%YV)'J/p@Q&X"t<c/':S/C7>CI
%d`atSSj49_BX%QI^.m%U4I7C)TX`C2!aUs)!tb?tDQCmR;LO+6;Tr1+,2/;WNY`S"+(r=T('R(g#W09)=X(eSK-EJ)QL4jE:GO(`
%"?=B&m1MM0g5bLoGj.hg*tSsIr/XaPde.dW]&X3B:^i]M2>mXHA!P2T/k-#$/E7l9%2g2[XuONcS#==+N[(/I"H9GIY"<O)Zc;6M
%i9C;s@*pZ!`$6iCE4\]DLjG,">II1^k^6hF'N6\]3,/>AX"fq8.tg7@B2KlRWN&%16lF7scZudGX)3SDP7%F;6_j^qp+V<L66k\0
%P6"HahgoF[73DgRF3ZLj;4LG_Y#9T(W9+-,CjFshV(5*9>EtW?W\g&Q(+ufG%`'"c&$]n"-/URE<,`V:)(;Q?!sbiuX9\<*!3Vb0
%h;QCan5`?YL^oJL=Uu='n^SoqaVWW&jTP6f]4Q'Y&7W/<\Z9Na[Ftq>Ic-=!@MNgDS]Ujm[k4tKeT0ljOH5V!9VV(XH7%"rRSK5@
%+a5`C%;_mqC3;.Vs/j[RWaUZ=VY.5E\Qg<\I<90=LL;&[i+cgcY/[qO&$`A(2EpDREPrg-J*NGH"c7pp\c2JcI75J_fFT;*SfPiR
%BP#K*_caQpKgRSJLN?`)Qe;cD\On%lOYYlXlPe)?H`%5,[&dG[SncC;`WV<rPpd<]M>fQHmat-22b/8D6*[SMIu_]G3fu>fHBcdu
%7Q+9m8D+#!<KRRL3h+@\)B,UCkM86>=X+m`=ST8[=X2O4CBtRq77h4eLicF8%O3ik9$CP(p)3HE(-I"Qoi:9Vj4Yqk8=k]8Z_TsF
%4e9V_A[/'di#F'jDVLQlagq*Tgt\(Uj;'9739pH`F/6'uk.S`Z+G8Ei;[U.@>Ja8gZI#U3*g+W<pOfB,2oKjZ@>pM&:6HW[@jeE_
%0Nu'K`jIkhbU3.Z6SUuXMC"GD3&7*+/[W`(O#r&p#JE\]Mkcj<!NFM.\osm''7@JoSO1dZ0FD`/TUoc)hQr@Y]/p9>]seQ9(8S3=
%XspNL/$SaoNi>qk"0istf14H!A760qPt%)1=oe9KQTBqM?Pt8<(9J$*'Rer[FLrLp=\\uPc97R2gc/r7iNa7Fl$FT%QKcl[?9eL+
%2@D!N,LV4:pMPM=Ur$'u?/fW0pg@VRje+&a(1XMd8q'U9=An[Zj!A+"'XK&51`SeZ@&9pZk9MX;JXsZjM&8V=s&LQeRr(GuMqI%Q
%p9iP?SWXN'9".XaHfi"f1J!]L,3%$)^Y1BO6pL(s9_`'ha.1W/=du9cSJT.o@emRHebJi9R`.('2J'GV,VW]?;7IEPOls\m@-%d^
%i2r98$:,n/i9X'1'f!Yc7D3f#H$@'o+NlDARgF%?q#Ju`Th;hOXXAs)Bl]dWq8a?id;ZDmX(GHc2^mTb4jKolG]C".Ensu`$MX[5
%<<W"r<C?nE=:cG8i0?@Ybi'p?f(7*d6a@'!Kmi+36dSZT1qgiDYB;H),>R`ogmlsmLr6=H"%c6/kIC.bZ[3JlR#4ip=K_&/VTJcU
%OaZ-rP`%W.1pQ?>mVp"&(S[fWALGCJ$%YO8@9)=l-o/0.QS^\n4<Q"OWXLabF$XLdJX[j@K36ahrZ,c*GC[Q;=J@kP`Li48_J!SE
%r.J)Jq,%u0F;hVSpP>0C1a_WVnr):!$J3J&N7:Pl6SJRWr!3JVUpIsRQk\YWR[*P`<0O&h=(FS+lgted^leXJgIdFP@.b]^OTihj
%h$^q^bRdKP9ieuAi>n;M;:IuP_ip]=S]+6QP2N^G2RZ<>]q+#cNBi>8G9ZG4VR$H:99u].i[5%QPm_B[o4gC4gc2&C/3n8&X'T'<
%+G>3c,k`5P_!o?kQ*LL_X9M+P8E54<W#o"*$AcR^](WXK(5fg7_t&'I[](BZf'>nhe!K]]'8f0.>@l@b7\hXEOBeBLkqT)T!ese"
%N:A)H;!2$<$_,#@5u;n?<(Su`<dmCF%?<UT3f3YY@oY]o9Tg%'74@FioJ/E6j%+K3%-:F#0t>iV0+ER(<k"[[GH,*hH#kuDW1,l*
%MWH?Y+9du7h>(M?b.hRIl6BYXf_Em(F5[1lX42pQR+VKS*(=V!j22BM;Zs*liROJ/3/<O2q]lsn!a%9P]YpPF3Et'FK\dq-,Y>M9
%hE1/e:*Dg^Kailf15a5>`?+EBn_I;]-5cNTibjpraUH[t]$/c04R-7oM*c`P>UTe!?ehS;]G.:qJP:Wm\][tmCDnWg^`l$anQs-=
%,P8-P/r(d51TIs\q(@a=75"8YW.:,0qc;=4jYVkfFg@SNe((8iAkFZ5cFc'p]_2U;B4IFoR^LSrd^i9\>,n!:VqE(E.jMXT)Tu-,
%'UR";O_],G"7/3H$e7940=j.'fS4`XMk^uorlkVAT3\jl?*f&eZ^>%)Y[+Z(r<$nkQYs8-cK2:P?^;tiQ\68-)_9rMpkp.4Ta/(?
%i5MjkC[e0m\'n_E:+1jTgsNm:[70@#,-%Kcqc"ni;fA-VFR;Z0o^h'7s"C14Z]-8G'!#XYYS[Jr;CYr>TLNcnW=$tJ`0ATIMo"gq
%<hS]c'$\*HL'l$'F[["[BB"Eiq]+ian<:$@%W4_*[$*OD#L:A4[QeWL-GULJ^pd8oNTn;Pk-]><VKl:9P9.F[K%KgRfto+kiY&=1
%R(pJmo`QX5%-\).p9Qsa$iKB*L2c>]g_'HQYi!.I_/YYg;H!;kXtT1abp*=j#'[0Fmb?pGl-h;/rG0C'4ZlBsM30@"1Q6orXa^[X
%;cb/s:L,(HbK2ik=&54HUOFY/p_a5llM';L:(n*Je$;_kBtpfL[e\Iu3a)@HeodG[VmrnYKVSCdZ;+EO#t5\sFc'AN02#3]^-*[[
%QE.k4o6kW#Xn3-5(I.7c\NgLs?T.f+%M&LcJkc!\E=KWFD9)W/'Wn5n;pUT=!7Q]<D0($f2TN$2\g;t2S1EDq(dmH',4?lg-ZVKl
%N'OEbFG.2\iX0q=&d`Tt/V'!%L;EtJlotJBjtsC+K@V,d876==3hc%sa:8Plf>bppic/BN-Rl?_'%P\A<,3`'R9)<+EoO&ngTF[.
%NPfj_g2ncj&gH3-\gsk9P]/0c;5K[+]b.PleMV%m>`ie**UDeeC;'#OL)98Yb'K2N9J_;Afp@kHi^`$TF.C54>#6G`9s-hE@-Tf;
%h>H,75m*VNEN(U/b1.O)=p24,#\`Binu@D+,S?VS\P(+nEC5bm4'f#(!ZqIL)-,*)<(N>\_'X2<6D-k/?6*R2EZeNpSANCK6`KoN
%,R+V5'R8,SfkA;R!MXoIT.6CqK*74H!4'ZT/ZM#?E4LpuM@rkA(kA/-R_V(Iec3i3F/V'Gq4%kJ-VDN5(]ZWYO0^r#77J5_VJBGF
%I]eWp9L8/i=+SZ5ld$G7[HL?4%euI&(4G.g]ftW!73+jRXqfpsbccsbYX=-l5eSj]XJL.f#g.l7\ilb`?.6$$Wl#:I,+c.H\IuIX
%2?sSN$](L]@p%7qar6Qa"4UA-E7'cG$]FVYSARl$R0&Kn3;%)JiJa`[<g"3ZNPZoQ_3`GR63`;V)5/-q$T45Q6CKTrY#U%'#t;"G
%ophfLi\GZrp]?I\`23Y%aeC%t>e1^I`TTprK%,KA3\S_SGX=^*#RRJD*gGgu*RANm]s^+[oe^pU(`9VU/mlVoca7c87f\9a&JA7i
%EqTL#CX=jcFjlG2+SE;_T"A>&+UOD:CfN5,857dHS1.@cZ].[7r<X;TRu,U#5OulJ!HTNk!"j"XdWB=^P?3S_iMD9/LWaBGnKn]Q
%:.l'cO$7r!erk33`Z`AA-%H]KNr*Dio7I\C=r,7%.C07.DaNqm-8j'g2[PVC)&3=?:9(E"/"cVOoiD(H%/#Yh@Rls2?UeM4YY-T=
%Hpbd;J7#*q([0k0Ln9RNgPn>&/Fs];mDRRp+p11.imS0Y&UQ1jq/u7SR2/"U[?\O7@+6`<%sfqK(Fb^R+Y'LU!TFK`<3R?qaq?A1
%[!r/VVtn+of&o'GEq2.bj,R1_.p_`5%.:K)-Q,c\+`^,'iBfq'MO:4'lG0StZtSP]$JaoD6t3.>1W(O[-d7oG]/X)_=k4l*\g3lj
%'6CZXlq2uj`t[+Y3CLf?-E41Q[=sM/ES3&;#QQ8a30=aSAGkf:6][N*ZokZ>[c-flHECQ`#QP3b$J#>3H4KJ&M]=^V&f$*f8Mr%8
%m#GZpG.L.;""r1R"5\Wr``f"KlQo:/j<Q(p&F!s@SA0^2Y!f5/j#Dku5`R*5+=gS%PTDO:/-D1W\p.t)M))anZX8m9i72Y_ldH=2
%Rl9D%Pr5C,J:^Xc>&$\@`HnKSEEU=)q=,9pipk/4]b[BV6OGC!o-)Y^WO!^+K#=1L;'ohcEhsadk]!@<!;5tUe>"Ud`j[2KS3dfn
%T\HA5M3(V)UgmKf#t0^o:%oF,>LOO-$-;)_'OdNF!Hhe7.m&*FE)&FQDDe=gr"0&Gf9u]9LUhLoU#nrONZ=-XHB8gR(S*Q#)ddA2
%MiT'b<I0tCZ@P>gf6fAl&C!jJ)J?oOg)_t9-rL:@J>08cJ_>PhfhQLH2$R<)Sq'\IhQs_@`.uA`G[`'8\t4#l2bi';<HHBb`KS\q
%3_mg*HLWU'T@bNH<a#M.^g$K+-V-*V!bN?B[>Mm*A2+3LZ^&2q&@Jc8"Ooe8#0Y]rr2c^0&B[B@.>J#bW&1;bbWP<nMBrXMo>5Xd
%<C<5\5p?gf%\.*Q=u7kukr=SgJB`HDG3(:5H:aYq0h>g"%gS3fhCe06j-;cr'EH7&=j;JQDD2,E'L6STA0g>'/@qLXaEfae59nA$
%<BE9:CJ.LtW@V?8YWFaSE$=`lYbo#(^]?cPF2]7'-7r*[3:!2e[:g*-gY$QZd`2#2Z:[\e9/8B4ZXFl%&XGGCe';l8bbULeh#sfc
%PYt'd+CJ-F983=V&(M)jWEKf`.aYI_lX@CAO&u$gh**9$<$aAJo&%sYIRS7:4">QDFcIar260tV6Kdp<kI5EPpM*:Y"I+M?Kqg[C
%BJ"3)_<`?2YcBH,lF$u&n?!6)m$cR"5f;@-Ml^tshIi[WOTirh(:4Rq(M_nYmuMO<W`OGmFV]u>@(./=!ZG1_.7J(3,'$KjN)ura
%*,Q,=]m.2q7k=V)m/JOARreHdAINO<":$^*2))gMcABOR;2kn=kiA),P=XJ?Q%ERjUN,]/<$*Q8=:meMF+Q`^-Xp&-\#)5hFMO'X
%`s>N'TK+NR6?"C-C\O51:^l&Y!en8RI@5f^+OLmVLNOK('H'fY!4`LrTtQF[daJnD1ae_(Wn'1GLp=)HX<XJ@.Se[jEL%gB:2\=q
%QsDF$/=9kSXMUbIcDXdnOFTf,B$BWP?MXL#R$G=_:^nO?*OPAa<)YCAM/Q^g;.miTGibB'7;5rQ@B<d;<k]Lm7[+\r+4$70$k?Mi
%]Q/NIXkNp=.)IIcKtPd_+,$sO1OlOr8HIA%[d_JW7>0_aL]Unm<1e.3\^%T`c:-]'P5C]`jDn6L.XSk72FYC%@8`kUi'MW3#O=tm
%Yo#/&nP'BG>2^)Mc/$CB>LKU./R<V668)A7+KfqXAm@%b7^lVp*h_-f(KdF)'VaKD]0eW?^*jXh@ELj'Z_P@XiLtX9E1'JM.NARb
%"r+<T^gK::RrAeGO2grtUS,W\"48@Z<lX',>'eP"I4JrU(rAfi(i4D(4^fmqQ8GkYR2gum<X%'.D6'TB\B)]^M]2Z;EUsSiZLX5.
%5C3Yc/QJ.=#Jp>\iO(]Nh\P-4Y#VI$;6Hd1`ml^:Jd*_3o)lK6*==jY>BcuhRG_>sQ!?qd:O)%qRqcM\1_68#TM;VU,Lj#Vlr*T+
%c12Y&&Qep9NL4kQ.MqFpTTJ:f:e5Zhr,_0IEG8RkZSDI?["j2>2MUU%GeA&dk4.u1kc=4uDj5.<S./1fghBL#e=ZfkY!S*.KVP85
%SQepMk'G9G-6VEa&Pt?KWn1DUBNMNZ%nRfiGru3DWbj]/33#KmdZruVk/Ps48lE7`g8'!K3*3;mc7k%#B<>X)f8rD9of.3&5C'"(
%dAm6:/]2/n+=YZf2`m1#Pn(tilJ-A4*j=qX\p^<:P9Dc;\U@B%(3\:@</&\>s&..-:QUrCE#V'6gK-5O#k0Sg$ZS^@?]seN7=/,n
%5VjP61c7NSHN@6]FXs2g!2h$Z<Ik_D`td!9C0[a>>-]NX6Vo9f?"`dhf;BIU"X=#$]EIAW!Ye9bS,mL^A5!B>,URRC=maOML,eP=
%j-;crgGe5ZbQZ7.qk@$:3@mcn@9/t&1h"7t$;]gT1=LimOie#DT^J&@c0p0/0.]T%:D36+gFfZ'(6W^@`Rb[LWX,lCY@c#rF]:.Y
%l-pF=K.0-4ONZ2kaY.DT0sddMAB,epNn"r0*J5n<>Y*b:*OF>+@G.oDDhu7T0CHg>Ps(QoTPA\h6\!SU,/EA@<;;Z),_S-JE?=VQ
%./Y)G5:T/,]B>F:/m!a.D(HFj<XuV?>)5)SX%<@:3_$gLW`Dj>+CMLu2S(hi-#%'"d[ERU.U:AbVj<VEM@C+,q]=MIIl1"FmklWo
%<pLOs7TC>X=:mN4g4DVmCZCSJWA)SR[u07,Md,^rAW,-q'C.UT7G/.mW0&J`n[VJuX9HlLEhUR/;R&%[dS3?BDIUD`EAG8HQgQV*
%).-RYojP/.'lM%fU^#U(1$A]"BYZ)pCNaqidTU^(DaGTU"fhNl<hUl]Qs5eTjcXVp*3(FtETQEu(gLD"pO!t:Gq%R,(*2(LH>t;R
%YO'Wk]JLleY'l'%d$gA0POV7Xg*W)u%q9^H1+PWeS:[+EM0[aiaggt8i'G\F<d$h@(9Ee4dq=r[*'GnGk;\r3\eUVT-!O!N0k`6e
%!=](*&i@G:@Z/_aY3rif'i?JggCaCjmjlk-e)H'rqZ[au*e;!$is5X_3oGOdq7(=[.UA+ODC6L/m*LLSnJ-P,[:QW"8PqW=.\s"@
%;<JQU24?fo>"Tof0Z-X_aXbBP"hCH/F9D(;L]hPZ/^AOO1Vq$S*iH<$*f9q2h`/j+C4-+d%uo'"C=MN_1c8%1Ur/:QPDSrBT([ls
%nBDi$ElnRe\KVdi]`GYh"4hHHG?C/4NETqE)eWGunX1JCipk/$XgU=%:B9+0jX?3])q?C<]UE^G#j/+G.dj::+#.QeBQ[0JOMV0'
%S-#Iq_hsbu#103cof;!1R\s06Ijc2O<uXLu$ZN[@]=ON5b9l](WQEhQG.T/C9)Rs1P)(H:Z\/]\2fu\%/!pYrh+HWi;qDep"RJqq
%C'fu$i!Xo%G\)qBCD8/RX@h*_H+uaeio5_G^3ZgU2U*Y?Ad]]p'+SiMR6k.F\Vo8);s8\uAPY]!,Ig[uZT&CBK;%r_E;C1R:-ht#
%.Pu4U;$K_a_ZC6,/AULB'$"M4H>g0k][^Su+C\EI6rf=f3VS3qWD`M':M:MU%bEu:]$r?FGZ)$ih3&P$Ve,=3M;.F:j-;dU?&`rc
%H_:qn_2HoNeO$Qql\1^T+`]HVX#dWKmUY&:Y1eGkZpWi(<W)r'C9s5#Q^\VL2&$&Pn.8E#P&"Y&@%ei\;Za0n#tC%Lk<+Ju(8.X^
%6,j+E0+3@g[:nMM?@C%KA(:R<D6Zcp%B9e@J5,R.WR>4_hC,`e/:0/2?1j,Sp2O9mA7O9[`T*4HdTtt82c5eRIaK%t3B_94W,/aM
%@M6Tq%ss+2Xd"VQLBB!cEG?(:Febs/?&]/'TZEL3qUDBs8r';rp?$%V#%efAXA@D9ip.fqR'lcGeXi>uPLBOd4)a'n;UHM`mu8T-
%*C#C1T70/&(H.2YF=[%2(oT9L`+81"/q^#UR&=a5Z6a13[hk*,p1T>d\:UO]7H^+OjFH$?K[[h]:s%)-Y'`8V-I7RMKo934.<9-j
%hno,R#uI?@MUqMHTS,cK0'Y-;i4AXshj'BgY/u3ReA?4\AY\:-qdR@Bk#,HY-p#?,m0d:.-L6bX0[._;#i7CpA[,O_bu>C:((J@X
%-3,T2ks<GiOos)gUm(oabqHidMoR>poKcBEeWu2.,<4'::eEU%.ea^bGX]GHe6)!6iBS(bDFue^H)->:0r[tOT[TiW'l(0B^E1O,
%;-Hh&E)oOO5VZ.:BH^O^1jRG>=B"Aj96b1cF@&6mMBhH&l4_.?9g_V:CC2AZ98L"+J>1&RbnKKEYlBctn*3Y[7i&eaHS,7&S8eOQ
%%QG)lE5jo$Ch&Z&f\nsJhgVUOFekLE0V$g3em3@Z4(FtM8u5EcWKKf6QXUoM./^&Sg6$2p2?3iV.n2YqU?o3VNefC<hG$gWl9>p1
%np'2o!uch:1+P8nLG0W*/]aZ(Ks@:Ui$G/S<)dtbCh2gaZVf^uVH>'>#ZKX)fKGchSY_c$bUEr)[!$MRDYhn/UXTr7H(.IeX]R%g
%Tu5W*A-j-[90R:TaHB"i0EC6[6hhO=iOh</cIjhn`cQrV)"1rc@WPp1b!(15Yf&7Sam/k0[N$3qTkO'%?HThffqfW&$V:gGI@Sk'
%O"$Hq]t3_h*,1Y^7f%W[D)>!0Dq6jh[<&@9RA:`kdKn2b(jP*5g#Fe5;^9-Q>r:#D/f=+uMNRD(R`/N3\,4knlm<UN7X2&9;)[L2
%c?&[k'VhuP=Q*pm6urLo?Bfm3W,<mf+]Hp)_Db.`;fus1M%U9%Z#YU'__NgL@Tf'[8B[r@E!n8iVr@=%nBE3,8sA^8MO>>``9JZ_
%gSYXA_^\^His`M,74T5Z1i2PI\=*s$.`SNZfZoA[,8BMB9/Ol=F(o?`TEHm#(RV=UODMftWCUNUo'U[PC'])pQ)kr1WSGSL&rRLR
%$cK@VOTm2H@Ih^P0h/ga$PY-]@W%,:?mOI3B!@g@(./$2c-O<t_kJ<BFbcN46$@-`R15"IAiu8cTps"h](Q?SlbK)HR.Gq\1e<Zp
%J]=(fBJ87rV;rABH)cf^>VH\?kD^q\L3$iuBs]\e@9!=bEsF6r<7d,mQq3$cY#lQEY+,qOj%(o+X!DdGmfU,@3dKIT)B^fpBt2pb
%`(">rq6_gF*n*h?,7Td"]4'CMW1<'@H6Se=o02d.D$bh%M7G"u[J78AR6`Zk+^nqWG\5ulAd/>f)TmU'ah@=BAn.,&YrdBEd[oqP
%(cABdUM/9oD6`FQA]Ds0;Q'nTFQUhQ/`&Xl,EKi#+%e;\`PJHe=;]U31=?Ai]Mk5GE\'?%,H)+68uFAt2>ZqjjpWpg%5p!#ai"NE
%%O@R?IC@b#>eC';&`0)aAYXZ1.5a5d'/c3ZC9u4b^qmEn%6..oDP^#f-bUU*gr;R&KJT`e1:9q84PFr2d*gTokNKrD]\V`I*(H\<
%0Yq3CAFlCPXrtPo1h-UkitX=CU"4MF8h"C3.[;<5S+/3aT*#<Q*+1>dL]VD'k9Wi6,Ek*S[(/6[<fuXYB#^!.GI!?+1k;4*WTI?+
%#oInfh#lO''9br:o#$e=ckL]Sb'GF&X0P6j@m187`H]X#AIj-W[s7TJ+%AU'P',:i)*s[Cl_]k9VKS63BnBq/Te`a$b8OOAP"Z8F
%)a.c`PMD/!&Qkj<CqQfB)E@m94FMD[!Fo-085IW^#8bTCX;#`j%3MH8(XMTd*:3BCDi";24Bnnk3;U6d'?N`C%][CC3_,'Z=gZ8]
%>4jsr#`V8OaAuo)A;3QE`Zpro4&ko7YeR0s_+gh(4?hc!EVB+=WuWF(Z#3Y"23)&@5b[sQX,_rf_qfl2!K!7rY+UB^WMUGkn&=L&
%_*?$mG`"AVBhY0Dg?MjLj[A.r(@i:]X\PpaYLlHZ))<`K_b.:l[^\!]*IX-m=[EAIBe=F-hj9X>1*[j^B<4?UB1..bYgJS)2/>so
%XX3GB7X?rN,8p=u52Ba;W0%Zo)(aHcTE&mSMJbU0_3bF-UnQm!D'Rtk^/joSX'MJFRq7&-\%R`0Y]s;^*_VJ&&YkeP)2i/IQ`s4Z
%F`k]'24h8fl6HteI)41\cJUS'kE&?1@r^SLA8j(4_oTWiG@[dt-e^(BZX%Yc.oonUeA6=0c)2E):lo[1];QPW1?,)BHNmD,KCCG]
%Ltt=X#&nKrGMlelfjb!tRRG]1G1t<"O-6b5'F4'j"(8F81Wj=WJU?qpY5&-hKmR%9"8>oI:GY=\NQ"IMjmWa:aIF-BbigqO6cYG:
%=0E'n5j9;)ritWmajZa!93/KEoJK0/*DL,r`S/]@4n)S:P#U9s)sQ(\*%NlKg,gfS6k@k`P\?Ul?8[NR)ccL;'<<.SY2O#=@q=^t
%_?Zb[<cCpPZmaJT.%;kFYspW,3o`X&#_K<!pl$#9]pImk-&9.GUme>?ULpc%PsXA;Zlr/AC$Pj<7UpAj#P1\c7"V%i\&=)/f5S,"
%oh+R.)I"G4UtE#Zkkh'7EJq8i?$j1K"+DY)0o"7q[oKR7`ltbYOVY#47)K.[N>ujea\;W'oDrJ)YF:"lFSN'V,'_dg?C/.se8Z.\
%#K3amespU\;2^#<8jl9JEZ0:9T$ts)2)rFNO,4CX17,DO)Gptg8c.G:NVN:>DORc1G'q8g]emqF0-)3*('I4l,*.u:-Q('07')M'
%dRot6GoOU]TaFS&B/^KYnT>(>,q:T4UaMRK7QT6,h;j9[Q&R?A='9%o.0tbdb4chK$!fIGJ\t]NC51N-Vas331mD`e=E^8pD%\C=
%7d"TE)n*6]>J'KL)o6cnh0S7Ie8I:bNfhVe.gF<R)U!jIJR#)>SOmsMB#M$IcNMH"P*+Wf)GSG.5Z(dWc0),67qRadiBnnoSJL?B
%Q:#051e'^j,mjEaP+n>i1E[-**fJRJ,t5+!TAa!cmBi#;6.m2O%d+bHC6tl#1@Js:U1\28&HR]aK\6*`bW7,Oj*Y"s/7RJsWKNYf
%A"X*7:_q8lP$!-S_60t4-FY>pk68uX=edl!a0<"B<<e)pQcr]8!d!5ZGd<I]?nB[aGW&ORGc!r?JC?]pe5I9+(dLa3Kus(p&L_D%
%'0A&D<8/<G0nQVDNAKEo1mUCF34="=A=@XmUh;/(7_5QKR7`d%8Ifgc20f2hUkY3!g*9L>Kn\,]_d]/V=tRUAJ\l#7B/%pH)[j\Q
%XAjfeP=F@V[_pr-YVd>49:I0QG2o\2G.RdT@.0VkFulBL)c+ftmF38u;R.Tr^Q,H#T8fY82cfS&c'tMfkEOG4m<)LBW2'BMn2K)J
%9;[$6ZVdqsg>SSiVG@d3[&=<hij!-t7J#b$/Eiq8K&E_m_M3dK8J>t.Fb;SSG_BoF9fDDm[d!9q%n5Uc@'d8aAu%RJde=l#9=>b0
%GggbQ]P4tQBIlqRn1jJ:$nF\UgEoWMmX7Q7g3%M-HTcW'o&c()gq?u2\@2"(f4mdQ#-B2*"DZJg[b@:+=Ok31A":3Xpj#o@R=]a>
%:k-!1:`\Z(3MX0<d2pbM(6WPl1;sXs#W3+6/@qEY"%@T5SiuhgZ,a`j;\<^h(2/"!A>S;U8Hmc]/XU/u/*nP`j#q-W2]`ROZU3u9
%&@BeC.Bq+4DMgU%'EH4iW+oeZNah,dfGdi&pp[Z+NE\/CE1CUO^Eqpb6J[TT(MlCrZl"J5j9geO,A&6#4YkE#D)5s$qs9GB%#L5*
%h8e>6!a>K<b1DcjB&#`c/2`A\0`kMno0kV1%e3!uQ,`7MK?F:'Y2&*Z;s0B*3.#@t7%5UEi2R[A"r*nYn!>p,!&9jY-&KX<+u-<k
%!*7+7%sha]D<!?oCWf-2?a0eWT[eeEcI86>ZK[=FZ0,*LekF\jD(d_L=X4i)-d=H;H_-5un>sG20\2UPKhH.lKmSp"jOd!W@Xl39
%m"fd9W\K??HhD/?j7On;=Okk@Fe3I;&prGs=bt9707N:`g#H68\S4YP/A"9LAfAB6gHasR`LNNSWuX?gpa2PY!l&ng*&jP!p367,
%Gf.s`JZ5n6V_!2E]_67kis\Uu[K!ge^*<R.;?6"JB(3&GI3d^sHl<S1</l,HcZ[o5&XJ>gTUiR:lL$gBh7P3J6LR3IjB4jqp/X;&
%=2ARr]@mL]]$NHThus5::*5/*4ArM)^MR;lG&,sle"\`sHK9?iHK9M<dA,M7a-.QYHUrIIBIKJJni2QT1tqQ(G3?fLq<GP4gT5S8
%O\@[mi`$ud[Wt"qR",4ob`epP&rBY9hUV#q8YIfBqR7+JVYP0hmri3thc&1cgBM0CY%5AIFG(EQb^_Y:9JXl_Ucn0]GN$I[a04;W
%cENXSAFi(gKt.`LKQ"4.L`+1WJSaBA[9M\()`;C9*lHCio<ZpQJu3'/!fuV)pf&hl`u9TnBV$]!HW8MJ,u2p7AhrMm$q`<XOMJ]t
%O-7:YWa@4!-6=E0S<_epZ;NRO($^?nP5uRtfgrKc*UV&pQLTr<>%N3unLt\T5uPp^mNhrD4BjSQ5,bgo&p;QWV?6#!:YL1t#U@LO
%WZqkrlqOeW7!/L!,_2*`RTe?C73`r-L.tS5cq&_s@hVc`'ZGc#R7>ObZ,Rj;*Pa";+2FaClZP7l8]('efniE94!sG!fHdkDkeft-
%2Gj]<!\FZHPP1uXm&!^W!6oV(>F8ElgT#s16?&sk`%7TW<?K"-+_=r$@MXfl^%YoC(+DN-`<"3*//HQk=_%uA;)Zq>/0QuMFCH#b
%;`8)lCmZNECmJXCQrU45F:5F-p_cQ!<c@0#\$0R.obKH&Vr#:fo@2O!Bq9Ph2Q]nr_kuJDgT]p%oepViVr#:fmF5@mFImddS$l76
%@FKDb#OsT@VnWp`lMl@rN=jtGJ*-.5ka=@us4t)u7WE<gc(JaZ\i+g#FAoPZqf$]&K8Qo4WT6?6&q-G'9gp<ZdS30+d=[=8c8G`c
%N!r9>[3,m04@hoBh1LSeKWLApA5:\\W(8fSN&mrZkj4rd(A'J7SOq1ip?Q*WU[/.7qng"IJm$6W[HCi_kc2Qf*I66rIdOR`RXWQc
%Wg`1@<G4e"Bs':-]3:="fI.U,ihYMUNR:mmH)?VThWdIG/K!`EUkXua0$'cLQ7pEn4$NRMZjZ4hEeQFp<$^2n`Zuce\7h\bitJu+
%7f!CBL?r#"c3'!I`\:Zk&=-#M/_K[!$4Xq]bUYC\a287&i<UjSksK<T9q]kM&[GPF!GaC2RUIJY(T#g+P49G"nPSUA(^*Lh_W5O7
%GYL]ZY^D;C1ga6l,AX[W(nl.oYZYVFW[9pN^sf5p%?!Rj)0mKVSop>mgAjaeK:;d75qlUt+pin/>o/IP3ugcL-)3\_2l=/F.lX/)
%L+T"J48@:[!rC+oQ53piFLm-.[S5KkX=YRVApIEF_OuQJ>,B>FMm")A:+oNrpM-gBZ1Ca:JSe9V+j7I>Y=(:OHC\72,8*_IP3$`!
%ES9UlZ0t:q*ID\`5E<c-d5?&_Uc)$kQ#;b^9W>7)Qq\j7H)u1&N4k:S(iLs7@Qm53Xr(`/'[]Uqe-2:k9W8IO:n!&K4Jj6!Qb(9I
%fIQO2d/PIJhbOXaNi+V:"tCp9OTsK@:P^bK"Ol*JYnSk>R@&'`%65Vh*4(1%oAP8FqaiDmSmgqO9%(g0Qdld$1r3os(f_<5:FS,!
%8#*,P!`g15`CR(l,T(gPS5g;/k@gtPEh+O+D=e5UY6,%eRrkC/:%$/srR(f+LsRK?8&U:bP;%&LZ*icNm2W7D0ouh%f5?SsoG3<b
%=,CO,Z"nqd?*kM%$E+n9MQRmi%#2-NnU5bZ,-k3t*9/]S-P).Y6!Dc1[rq\*ci^27.;21`<QB;qSXod+kWiju)kh`q$rn[O-]P.g
%'OV1*,V(Omd@'*J4,;qN(#K#o6ZLcg0NO70nM7Q'Z-NBZ;.4XVj,J2Yo"]ujhQet?gL1*K[<KGJT8]nUVlf)AS<t?;RTPNV';Du9
%1@rP#gO:9jl[AR&XRoLEpY\:^/$2],67.MY'V!(&C+"&QWDkr05sIj&YN]N0?Miq#gRkl/lWRu0l5L<]ddBPEojTS[0r4,-"<`bg
%%sST!3;^$a+8,a&.MuIYK@@*<^C\6m%U7`VdBOm^Xa[T3F91G9R55UoFM0/fm397-=@V1AlQ]<k'[,B>YJ*K0*)%*h=,ZOM:(/b%
%f6jjo:T=@KCp\9]TBEVZZO\)"fb8ULnZPiue+mY/G_NnIc0m^kegknlG3E&T*I.Kb'57'fn\If%o3L`#6[JJU'\h/5[1^$EA+_mb
%n*9BqP+>A6YMidN=Q`+4$mf^"!9'QY3@-b*[U/BMm$@\Uq-(,Yp&E%cUjf4F\,*?eqXhL<[B#FLPt9]i!R>aJ"WfA-cZmSaC;ms_
%aG/^aH@EaGR.+%-4^HA4V>lD:oY3f$%U[WId$^fM"#s.%^sS*$i6;kR['@\3JJDth_#7Iohcn/$`9>4F5BmXQesKJlC#I[To`1QG
%J>HXN!*u@6p7)T&`'Ar-%Cgm!(l=(Qs"Qd20%^@]nNse':epS^8_jSNFoa7IF9Vo3U),&?-(49[r+kRg\+lF/r2Q6X/S('!g&?fT
%\d`?/U@?32WE=rp88Kc;4*[n5nA5B^RV-$ertf3)Yf=3^J8`lk`CG$5FdSnK`Ai-n6CIbDaH?K0@6blXH:sTto;`I0N<%9i[Lnqq
%gk'>+n2L;1T&V"-(XXW2^Z(d$VFO@9kr9+GA6PKDs#]W0>A=hB*Mum$XIrGN45*W'gJUi#g^sus&-&PkrsQ7&8Y6VKXb8+^W9CHA
%+)shZGp?erB0]pf2=M4L;EI&`rSXDbSJP\&"W%8q2jK"E!FmR(?3&Xi72_o7[Ldu09cI02H:nrV:Rm7O(el_AIFOtIl\RIDM)DA*
%5[G&S8UY_ZQ%2djVIabY7\F>`Hj"glqAf=qiDcS[oQIDq.t[)*dIjtZi56W/7b>iiI6s/TC_cS+i<d9c@M/&$W#P.XoF4`CFL^]:
%[h_?64'l^].B4CLRL=;UpFIB'RJPPM8Pc8!_.gLGrDTnCBE$OCDRTOZP/#AH)1B_.hi%GZms,)$Zsoef-HqIM>,,B,R[n8<4;'Ga
%1ZoF(G'ILBP2]aNAfrWYZ8qMHA-2hIs$<<3(#!%)?M&NJ?3Tt!B[07m!rPjdnIg<>Je!cp=]cZfho4]gRa90;Pss0V>iZ%eHOp->
%hWF/FG`N?-H^J*u]MW$nFlKYBC+&_+ij*>PH#PO9rjqqc7cI/-BAN&YkU:e#eEJ!od8Qr1g?+Cd9G]Yaa^bj5Mhi>(<3rVN)^@E?
%@5j%5:SX\D;bPb?*9aBTQU<fK"0:D?.P:"!l`/t*IQd'pWnpQeF?ln!`j#P]h,6LB66r#"(X(_%Ok\2#)PmkRi(]W`78b5;KrGcF
%jQp\%-2lM221iS%]%Og1KO[p^"Y8e8Z_-ci60"q?1<t<U?>ocW=c/_lMTq2sjK_meTij-Y=MN1$Q>!9s.t=`^#,)!A[#Oc!Bj4lb
%BB`Ig*R8UUgm;&[no;BIr3P+:`2FD+g^rmla?\t:BnMc^21jN733Rp+"VIY#U?BYI_V&W]_@%!:p,D8`p*Sf=*C!@7pK*e=n.dk?
%=6D#j-(9d21]`[ChWJ;CK7'#/),oD]*<#EmT15e[a.`Knd11f>>Q&/A5\F9^I\YW`AW"/Fn]D^Ye02<[p<[[3S`ERNPq)CWbu\"k
%S&=[_7_K*k@e`a*Lkgn5m(>EqA[cUMcm'Kb0X9[4*pTKlk7+rq'YV=r<-uRkXC)Z;n7+iUB<bAcJi7mSm</FdOSh0?q;934VU_aF
%=fYUb<Prf=5gd$CTLF$=V1&rkV-[d-NGDCJD@q"M4>["g]cLU!0#7"`&C<n5RbcS9^Y<N]2LTo+5o9M&gL;_QCO=,uM*FA1'.C6b
%mp7:mAN_<8N_^UE#GC0WJt50FQ"nPNFQ!2$GdB'CMaZj4noqJS@\M%IdgmQ#nO4@SQp,AG_DhJmk:&O5>\N?8s7N"LVVQR#r8/em
%abm6)rD'nl6H@!YG]>@Wrs=E:-A]%ge])1.=T=^.Kn"K'B8C,=)!%Lm.p)DQpSpEX[?&WFW\?X/M8AKW`haPgn64^V[7]mDG^0q$
%IjY(DQcGEM[CT8:#HDIOqVF="eDSUj]MR7s<3,\1>N4R%r`u6;jP,0BjIWI"RbTZ7p(Gfl0jH%95tmZC(XQIbm7=tDr9+q]WfcmR
%]AId12Yl@F;sdUIIo[eJlJK9G[SlE+9=9)JB/"NuQ:9Js6B;gB]i(o`WC4n2HE._<,99^6%.*i<WLD!?ls-j;72GA!6f5V0%>M[$
%Fr19BQNf=!_1"#*`X][WZ.Wt1@?\n7^l5ZnUg*_gWjQ7>rq/f$S[e0)UL1LNVMcF,YZU77f'g$D]uXcigT,L4s$M*%0!!f/]l3e(
%QQ70=<4ebgT5Y9D0ISGLK5SY7("Q_<\$Y,-^RK2%BE<K&SX)iYdDqGcV:KS;k'XUW"ts`1i/(dJ$2>W2fo+L$?g^j%cjjlCYlh#2
%"dO6_mKU4(YBAZ<NFMY:5e(9rY$J-]DFDUa8@%,gR<T\_&)YLHo3qq)KqH!?R9[>RBEPO\B?7\@p4RR3D&[0U\teFg^BEcA[@4es
%-#Vd`ocMfEGBD.h9%D(0VtFAs<s-%jIb)Z6"'l3Q##jJ)n)h?+#Spm!<m*Wc+/NG[fIVB2[Gr2KN-_U/NV%b9K^@D=&Ii"VIV%tR
%Y1MBH!muu#2fO9X^gk_=D1gNLriC:sB[*t&.j2R]l;Xbu%t]^US@3a=rGIboL;h+j3gEH!:@2KmGEIH*`FcI,ZW9I#A"]0n\o---
%d=XUZc#QW&OQ^ZI/)^uCrTh5QELS`A2*UYG[4D3K*o4Udat4E*G4e,;#jBZN!WhpASIM3OFgY("@C'9G6+"/SX2t*Ym0n):Aac59
%6fprED+Xp3,QPN.M7>V#jG^_>B<bA%<!,Uko4>f-LA(`hp4sH"GUGF3o]b#0IK1&Z1LR^j%?IAZ2S5Zdr`Q?6)<SWcMg'aH%U1"J
%WRT[npQicl]VpkaCOfGu-pXA[s(Hf#)o^*H\+T_AVqQUprZ0bd/k#G?Wu\oq*UXm_)LQi5l_mhg+:llW%XElu(??W"4!>]A"7/\q
%\Pf[gPh`NR`tk!Se@,mUGHL\t$Cnb=?]K=PZ5TJO7Uc0G]2F&I)/?noHS]Kdql<`^eU$mS_q6)n6ti9c&-Q_ah:"Z\S8uWM>Id[h
%pHXWl[83u)Kq5g:Ec^FVV4H?5Z9uAE`#nAJXB4G3L@+arN!usqX7Kb[2RJZ&P*[$$54)C[(-luo%5u!"g$8K25dsdl#'tJ)'pn6W
%\>^pB0MEgdZQWE)Xkp:GKO&Gbd$s<N1kRUllr'kV)TDE#3;)T4Q;[(tYJTpK"d$CMZ,DUI6[Mk6h:b@T&F]"0-Vj)k6R`7eI0,2i
%<emtUddOB$r>[0$+iE!c9/J*nk_.U;[Y:16c)m[@XT?)_.5bX1M!NoLao&q,2XpO6JF8`Ui.^,QD)+JBI/>sdKb"C`oWr&NP9WDd
%$4ZY7kS<+Bd-]@d[s$NaY?n:Dqlr_pNrDC4+$?iO:H-E]B06aUNmjLZ'E\,^H0qh)]6_^&ijrGBf.WVM@+2Jr@E`K7kT.KtR[4c*
%j3m(6CiR0u08L'Z5b77`X"BL]m([B'gAS1^JY>!:"'H`r&L<7[F-T7tdNN9@p,-$..d3-\^P\Pln%'"h''k4ulPRkg.5i^+'KFm\
%`'2rE'ItS'aCj#\jEn-d5GGTNN>lV$8GQF$)#2<':pAckHokX0=q55\1tiAdb[thYYSi*K=Q'h/XAljg[+B+sAqijY8PBjI`'$gu
%*lJnD4KR037+h]"NH6;V#Sks2T#nYaG2FQYT;?!M?i6f_<;SPeA'5)WkjfVRS\$]Cf2q[(paG%[I^8@:]/f49m5G:s6mj#/Lcrrn
%-ai(:iVVE4I>96M4YXe[p(tJP6]qQKXC*hhLY**#[1!l^]m<mp9ObsL!>VkM*i@E1694C]D1%M`M\9tbS#Ybg#GcDjn?2'??5S.c
%FS*6T;Pos\>=s[K,%G)QW,fFDWrWY+Y?'hu0`3-`qqYhF]tjBc<1mg>pJ]frr@YCq[tRSZJJj$J/u<Xq;^6#[IT*K+M*o#XnTm1m
%Nc&r5UQ$BRgdY]D"_NEQK^!5&1(8.A/d"?blR`S1IF;l=as9!`k%ZlY2%=+mnhan2^Ws4cC=5At6WAu-V3Yh=o/:Fq:2LFpW)/F4
%J.6T$<INbc5qDc/!;tj!o%/+h!:ATZ(qSoImJbH$+55ZeL']"#D?t!j%F!ZNO+^KqVkML0#_)u)P5\r7eGWrlN04^l7]G_>O`9U^
%ectY@E=48cD7+IaX8Wj.2g0iRT<g'\6['E5;n/qD55U=;ZWO8`i@K^EBN$oG(')j?FKnOb!c"V1*PV?%r_L&1^e[X61DNp]a$J8-
%Q=oF(0#;78g'MMa`fDp*OSS9<W)>"HdYEUHS:Rpq,\(k7D+BF7lucCtjtatIjnIQQKok*e8\INgh6XR2oiC-'S(5GdPPht:fPS=b
%hX^X,h!E`>kA"5U]d[f;6G4`o0+5>-?D@D".h>84!N+P-^#`F.1mi6gS%S#n8!D3G8!eY2o@$5Ohe)%5SXj52^OGcS9"gd#,a7Og
%rcrRO^X4h.Q$tWT5'VB#6`o`l[hkmD\8\^]qq2Vh,VVpu?q,ZW]9HQ=T-!A?leNTK@-]_BCHY3I0MT"IoY>#ZEqb:CG&k4]"jp(l
%AZH7r*5p:B_Y.1\hVYq?W_]hmb'faDcRiGXe_,W;jAP-R]tu-)8%lXe#1Lr]j1CQt%!:"F`6UWV3ZTYJiriqr]m$f1[6XW\gj(W`
%dT\25f:Pht;TcR)`s-j*m<(IZh#[ShI`V&aYCqV5c.$;C'=#,PY'2,'[(_lkMsBSr4I]Y;PI<(VKsg;@jg4R&Fgp@>?5M19p1K_f
%Y0]<4E,N&X7T\?2[%GSrpiC##X"<(>S?kD%Skkq1aK.pHcACLiogMUq^;N0II9APSqp)4kNqX@'Aqaq[SZURYVop`:]U%=&cM8i%
%:.VI4c.ZH05Df3[.XspGbP,-p.nhb'>\W;6D+jZ6n=4VRpEIjh\*J=C=h.f&GgC/+Qj+m<jqjJWQ#1Fb9D:)Emeue#He//KXX3u1
%[GX(2rddlgZP"lELh,IQVsm/fj]@YBXE//q4&>gG4O1Mu\?F;,nZgBC^oXe`CK?s[&lbGqZ/qQ10=th]ji2)jDq<Oco4PDf1[A@E
%;0*+-9]MS/&_-7'V;J?Z$Y"5Laa;U@g#qf$BD'\1.l&&)nO7b8k@^KNpR65AZ_#h>R8s5kh0mp;o:Asn^ZTVuGD_XI[G8=JLUqHX
%&C.q#j`8\n3M0H>q8Mgb8_Q$P:1Ht&jS%3_DS0W<kE=$=W-[ohiSOM//t;Mt(3O&1pJfjqU@JL8c9?[>*6Wc_ippiCa'#kUAj**$
%PfmN0J6BFMH`d+aLSAQb3Xo;rqH_4Vps#8d:0+!0mo^0N&pmuVdnA"iY;V_94J(EQ<T]@C=!Hf`lXPmcH<ls1T(VlOHM[E@'")>*
%Bl"I?/2oe@B>+/SGUrU7]$K1P\$s"_c&7K6c#moBCYNp@2smA#hcXl(pZHjOZ^u0G]>ke)<a:W$iffr"lc[9=ZfeF9BA\KYZ[U`R
%Q(61%:WPT-kAEHF^"h)?G2l9J7*f"C%qA>k=Z_OCCU;Tn7',';m5:6423'e3eP9UqZ[:$'/BfT`h1qp.WkPcA9B(ipnA$k2&,G37
%R93SJM&nXCS*/X/'1n^:a#,B+qt4I?!+j&2CU^^Yc"?A1Y2S4sQTP(DHsEAOVXF7I-XU-IFK]n#ERqfhp2h--f"/i4AjrM4*m?'T
%ia)OCk2M<bD<[9W*cW?c5'G5_d-26;9q4*&?>CokD&G1#6:u<WGPNc*,gUAf,47eg>c[^%TMi4%HrZ[j*F(82Zk?][;B[V6ggBQ1
%)o']`\V%B1^@/8@Lbh[f^VV<KXecgCf#^q,WiE+PU@GDkjP=b!rG2"Gm`tQ.p&$N6AGnP[!h-?>q<%Rbp/ucGpAHit/3T62IPisO
%r*"/CnGPIV3d]cVrUk!0>WVBM<BF;DfXgL>8:+_Cd9WAOYLO'+opq^J\:6(N>r@%[]ud@(GH>-VO`n?=g6hR3r:VS'f_5::D=L&#
%nG:[#g/maUIGk"upPk9GnGTcbS_JG[q\>38YpimJ)shMh83;%0^Qt@cX1[>n9=%9H:THjE[ZjLXPcDHi*soQ#]\fp7=^b_biK#hk
%JBMi6)@K>/2dN>.X`2\DA\Y,&>HV<@Du6S,qleHE-*igEHJM67<n"!ip=_1Gl&X-lg9-Xo48Qbpdar?#h5PVA$(m\qpMTH^rVA!H
%-nO3fDNucC<2=?8o=2;rC3<=S2S=AP3tKMfkp:Rkp678>g"#+WIWdkqGrrWeo5Z_#r`Ubp7NY_.pqP+*&AQ]#Z/\o2nD8EiOh;7/
%1]TVN"uk2c\$D[ln)V@".a/fTcY"j(g3Y=;D798NbgG.WCb0J'O_eT8J6M./3FR41Hm_iubq>.]LtA1f"-MI=kh]tXGTYCiG:!32
%''[I6^j^6".kP"T>Q)o>in&<qEGMut32A;OH8TYG;_M4D6O^NP'K9AdoNOGYSJ8uC7[Zb4?OegOnmO!H@J$%-jO3Keg;_63<J<Y=
%kEG0u?">nY'bH`#>Ei=$Y#%n0P0Ftj,YP2&GgK=iGA:9bA?dn60:cVqb!5>6[I)D"nt>%Sf^2jJlBibUSS\70Y7P;%\1K5Yh8fA2
%!:e)-*!X!b>VYY#5PP<$jc6gq>l]3=Lif)2o7E".:(+l7f2)J80.:8%gV9,*Yho`a!7VJu,iafsqodsF+f3Tb4[$Lc"(4$6SMSZ[
%8RANK0>IQ(pD^O9`4BH5[B0I%9A"dRQfXRXHQaUXck7sKb??F2Ia,p7=Z_$dc%VN"DZn@BM<6q_XD<Yn08m0F$">lf^\=/qP[9?_
%!A/DkS]R2D$]8ALr9.e:pXM@ZB!Csgb[G'%'W>9OY&7R9SYJ2C0RpdSrrmW>DuC6_?N8<IG8"%glg5LLmb5r]FrB5O>"'k"ADoW;
%BVinr3_l.i?0fO?4aB3*NLBo-Qb9?EG&gaQEe=gI>5h[Z3F?O[1aq4F?Bj>[?S5;5<2BfO;B)7YbTcujLuB+=4'1'_$mmg?Ke+L%
%eqfi;+W7ofJLk?Zp('ohGl'KsfVGVO^n6a^UW7F(J0ja$$U>6d<dgYdX'l!O_Z345Q-^isnjr@VE8MS[,QZd[_`sK0_:6ilZ!b(i
%jbGLV+>*5G/C0;I0*[1QfTH.(#1E&I*iOA,J<V:QiSJ60qYp.J>cj;-aZmZ5/pE,5*1B6#(gQQ8J^0;og`*ahh1XSE&1#of=&WHd
%Nn<Br4`Tok27o]`A`Y=Z("h6Z7H5J(Q(:TX>B'?j&oX=Y$+=S)()DZZ9rMR2s7Gn%*84A7L.9[d++AW7/0#"r#Q9J23ZVlR$&9SW
%mF$p)=i^,_^$Wfrf7$;Pa5+$,cG"uG6V)R!AcHu]VnVdKJaCigca@,#HUC#Am2'4)KEQ\t]jo-QfapNVIu8Ff7+$QM$+sffL!AYj
%A&%/m4nl"'*a`B'j+4Sn`5TiOOHs#W\XVeeUWh,T9tY#aU2]E2\YI%Fdi_c_Y[@XM";fg>0:9DJB+V)Q+IH>JgQl#/Qi]?.7md8M
%`ug'\D9:4%m)PJ14:O8Y)NU)02+14h#m4p-n1geej*?f/?4*%>mTV0m,8lY)k8`NU=<g3$7^L./#g+K9:3:E/#n*VHg,sd_ZZ.#$
%W912q3m_^gMrNNK0H?59gc-_">!78igG`3k[Kb=j9?S^[Kr;*]a/>Lm1@`QRFXqii9FX?pG:`Gu85Cl^2-e%A%!gGF0(b5.m.;-r
%Isl+GdIfMeB'>?Taf(#]=SpZ^6OgS3>.)Y.(\(ttIImpf%<-!IZk%6TE9tj4r5A>!?^UWFkb2lY,OLKAU#Iq#dD:_j_(/I)p3kS2
%A`(pK@@EnT=;Ze3p3cn;jh!h"TuT0S2ZlBZ-oR'skKq,qiJS)e#J\*P>I+?`L/Vt[_.KZ>`*/f@54\[Ng*IOe])Y,nD^X$<1n9;I
%?tm,:P\)BDSf3EH])-TMUL*0"F(8NK]Led*)sYF'oSgAD[Mt*fKY(\8=BFir,OKqtBgPAFl%\4bk&kH9I:nuX&B4WKF/7Qe02/.u
%UqL[]#h+3K,aat*fGgng/1(KnYFTW;^j-Od;n,%%4;@3lp,)@bI^SG4?<nK0DFKcSbA:F.mZpc8:\CBO3BmF6)9s9Yldm:]=Y=:m
%3aeEGGBFOSj?_>Bh.?X;0F6BhQ3/59Hl\6W?NtU?&9n9/$W'kn&qhrunD%4V9a>"6ES#dIYMu6,:qf$>>?_RF*Ng`67kgt%H;nsJ
%rV#:4d(@\!c\kk`:P,3jji&6/;Yi*G_r2q$LB83VW^f"Y;<?Bl&rARn<k$uEO>&c>%aB*Y>Q;>3/q5]sh$Ie9o/7.%\ZB[Y>&)!0
%7!+"H(\4q@X':C$%R\7lin>;hO9>X2H/iR[PFEZBS6!,(Of&.t*p7,To2am"KZVJZ70J/frl4#2\;;V9ITEq?;'ih^6Eq;Xp)R`[
%#N<S&,(rP>TahRr'.f=.biXi=9q:tUI$)H?mb+g6aC*aed,Fmn>@f0q-O$o=>rFF0it:Qc9ogY1q:nadLH0ALcYt<XmTq98Y5L\h
%e(Y5EZ:+J=+4=1:L,9Fg4:Zf.?8%0WcJihG!Pn?Ar,_$/PLCZm#aYA?Kn[Wc(I52/,d=H]f3?jMm,>%De'")l]WL9:-39p9q+[4P
%DW>GT=2'H7*:M__H%XF,GPBoPJhao(Bn0H/X%bc?/Z]dYqVDL[E]C8ohU3(2g^`A:$TQ.^3H=ejE"\<:JhXYH%:Qm[ErZMt%+tTs
%Y0^`RJOL&5c=,$SDWH[t[JN+`XUM_m4ikK.>+e,-6\]aV\];$TRYU4ij_'DHC]CCP<q7ur)/N<e/,[CqA_j.&:l`CW(BaF[NecdE
%d,c*$UkeaJ2:3.3"(I!;><irXLIB5D&L&Xbm[Dp>.#7fh)<lST0KY2c_`ChK'o]:"Ok'5?63q.QUG4$h\gHTP&pG4HBl23Db*G&?
%aaPIR(C];+++8j/&^j)hK@\8OjNUDWgh%m%Bkr?;a)4,7!LHP/F<D5cbQYS7*$/e*"Y/_NK8B/B6DKq=h_`=V7WOlliJ5=r83?!M
%LBbgII_WG*R:o\(JEX:8G_RMt4$hPt-b%XV(N\YplVI5Yk7bDe&:"@712(tRF+rJ55r2!Ek6R%9`lm:"5,F5RhWHJi#ml\:I=)dE
%EE"&B>9f:LA(<_/Vh*1T6_YlcUo"aBP;"s?jEsL1'4+R$rJW#$R5`:GAq<cN^R!B.g"]=n;?KTI01kQonJH]^MfU8@`TR%9;db<C
%P138lK\9&9oLSK5/#dBSc)?fZ.pU:o;A13j";6HQe?>DdOua0qJTZ^0e,\<7d%.o)]AE%k7esT.n*W:n$AQPg>)3#je"9"BFsaC#
%geCfcGjUHa$i$.!S9qD4p;2h58RZE8[deaIK=KCH2A;:+_O(U3]Ke.e#SU5(ALA0iGP=[<-\Q1<4oKU!PI2'e(b!R,kX2g(#-FV'
%iT<I5Ng3F,X*32fh0mTYhbD"n'&!s)TS><ngFSJC1`nY46J6Db&d56oT%o3CJc"q'3Xc1Y\h;N[G_#gun0^W]7\K%kaN$%I#BPIG
%h.rZ@@PA^l+O[(o0KE_o)Q?-lAc46,[=6_"?8bHsWL26t)aKZk!6ea59B^iK`gR^I0Fd/eB4k^GnRXV%Uh<h&pQ9nh]DhV+^jk@r
%QGY!;1s#m@3Yu#BX7+&T[X>\k`mnTS6hEQ@]\:Kj<]UJ!P?h;9A\MYqR,0D4$5?555!LHcB@j`SOsPL@mB=rH[M7I8bQ'i_]sRKK
%8AFa*c9PQ0f8IRmLjkoo><M&uO.%.q>n_UQWTS:TSjO"]X)*Goc!9ZejOA$$ghO()QQ0b]rKqKgkEim:kpFum1U``$roqDMh.PTG
%T\u/C]JUMu9eRh7&)4P^nIP]'D/D0`"//ZUkC8`qPKf6YTE"g+/q(AEOPE%;$Cc%G<hU'+^nlGOZP&e!?$/Gg='X)<qpUJ8&Er/[
%ViU]u2A`61<$q)>n7(aCmFCS54/IX+'urH,c&lVWa:o!c==%[O=f%C)3\.O&jR;dT\]#`pJpF,UB)?=]X4Fo#_6:1\X-Ir#N8M=&
%[f2diobui8an7a3Fogp;i32$bh5\be)LeA#),&]l$<1=@RFXB[?0T!Cg)Z?"f;jBBl[\(C%!958W:Qhd9F'b&pd.K<bs:.<D\<:1
%*]LB`j^&u+;Kfbo3\b:p>\<N!Z8`c9\=CP$9<E/Ql+d;:V,FLV'%\"U"@FQV3)rEIN-#U!GQ84f>j&>MoM>S85r^.=0Jj8!'n:4"
%>_-ZH6^%D&i6[Coh6/d9\6G9QTu1,J_f<0_F\anYL@P6h41[.ZL*i/\\aNtJM$0uL,`mGc&%E((Z>8=;4JVkp6JCWe*M3=]FMrhi
%!sPQ8_c`RaHPKrrlc9S=<`%_.^BnT[des%[_f*e+a-`!>EKWs]bO6_>IWLI],#_*#W0$Yu?C6m8(HrHe6j?eS=9?02h[HQ,lX=$,
%[S7QZ@Is/)rpX$<?k*bsj*NsM7$W0NLF=9T-%$VI?pY,<b&Be&9&'iOE-gejhQ__1+Y*tTc7KL/FZRj$J',*13i/$-LUhgmp1@,>
%rI/[:.i42X2rV-sdInnlq4^`lW84$u@SHSl<@Q.d%aLr?q.$f'(fIP[@roX@Xm^CW_A+g5JPAM<6%fGg0h93[Pufh!4@=/Mqg38E
%a%J&1=LkqZd5_.(]sm$fMnYEf.fS;Cn8U/1NF^&1!&HkA#9fMk3`S2sKU4XT1MS,Yj-Dk%'t^s@QMfbfN<G#4#&3&+OJSlN;+-`j
%cU$5IjEBbue*&`)?a'ajMP4F`)^.q[6Eumh0Nklr!&!3BM#0.md7lJ0MW82BF'Z_:$M1X^r<r3ZG<akk&SOiE]W2Rbc47BbL;tMm
%GPB.+1E?c_[j1q=E-P@JW/<$_LWYZ>a29j`2COPYGj\$!X$@)u5Rg:,+,/#D7X&?#of2(XO4t3*d"fMa`TR\QW?sEm-&k#4jcEI,
%&-C.!iJ#HG%lipi3:p6h&&$C[8&V)g+i06PRP)`)FoCan8&$sm3=Wp"o+,)%`lg7M;a5,pEt1PAS(oCuKM*+e8FZ$s%-+0l!R_$)
%_nr<bNtBJHPR\]p"(Z"gYsqF7Sj\#F9S6aO52;F>jC<5")5/mFI1MD8K@Llp"OgMI]g6(7GQ,<I9Mu=h9bbbDIlq?4Zm3Z/aR&$+
%6p?=-f!'M'0$ar*k8C6gW[hB-[p$\nB\>eoA&_5i,&K']BH&]qgT8t6G8?7-3?I>,0hMht*<0TkZsab9Yel'_L5[uQp2PD<(p)m<
%."0tA<Srql@+oEFqf\nON*3<'[k9Qp<Z)!mHmI%iN%NN%2f\NUf3ulUT/:.o:SQ>n@W&@kRKS3r(Y8ORNKA^:e\=gm@]DI\Jdu(@
%3A:bfi$poSV2\He_=6=j$Z3j+_^?OQ$@"JR@/f[t2<t&W"BSa[%[0h)8Noc`n?%iB<=LJb*U'_:lC\H[&3^ug)U^RT*lcq??Yd`,
%8?_+NNgBr,A!UrM[+PJDQe1a5'pO<%e)kL*RE^!PcXA>(LNfh-#&_.>VA_;OPJB<EWu3_T=I`3u.?[Xn?k`2>n.1^a*F-8"GD1bo
%Yk"drP9`IBTuSNOBg,:*QNu74-48$/^l7oY]MQr,"<uCu1L*2'g"Gn86Bdqm+QLDa+!Wa=p@$aGmbE=53^(n1&>>7_Q@FREL*`XD
%K7]V%$)(,@I='<H3F6R7oLKKY"=@.+ZpJ+,K2st:W`Cq_IDFc#5,AFt"qgj36cS.L-nRhEbs4kV>8pc5)YD!?8ntk/NhCD$Vkr,Z
%P'Y,A.h*r,MfZ'FU[mc7g4!oDTU^t:#0b3JR8"gdL.UYJ=!>h]]]q3toq4$njAeuH;A\Lk-<3U#i%%>r'>)%n\Yt%hOX5-p,NS[)
%E&!M[4%*!$=_C8srRr,P&_1MOc4oBf@NrJu;$T*<F=i2l]ICKGOGHMmeHGrkmtK-"5`"F^R#X?s,&3JQqeIR,aKSGaWaQnn"UN!-
%U4uE2?/E<S6Z@SgU1t]l_G\us-ZiZW0YMX]G![?p=6Trk<$!c-'m%fO$7a[K/,hC@Ht];)%;Ug-KQN;%np]REoLdrdQH1``(".)E
%'J9qLQ$W)6*<&#_C-dP->Q@O8D[S$3\cA"*(7WrR0#Zg^CTj,*X2g4%2(nL[EBMIc]a%p7Na=?:R*'i2WSDcdAi?O*?9KD)?7dFf
%0d$.5^$LaXRqY"Qm<[HT$A-Aamd9:p@0tD-gtVM-GJIt5Ib`\-2%tDng\%j2ZHd/Hmd9g8qW&amG!QA^9]^9_2<W0>\=.+omd5Ud
%>&G_f\@:d8DaP>.o]+f2Qb>s-g_:h(G0N(#:Pqs,EGkusp9M/=I[KK^hG.eG0]#UrEUT"lPloGqI3/.VE_+muSmO\Lm0DI_2(ItQ
%hI2W&]-/tga*ZUr2;ZPbp!LQJ=d[7C8'<FnpUGE$]s-%?Ib[#,.^ekZmic\A@7ei;EUOHYS\KU.gB35fk3gTWH\]Q`XsREHc`dYN
%jn6jEN*!;lBH.La=TZb`"C-tBAWBR?:#qKu*l?:eN`@/KF$)kE\3!`>lmGS`Vi?aJ\b4&a*t)eHW<V]])ul1MQ">tO,+L#Kk'.0!
%khc4iF$)kE\1c:MZuPo;NR&H&E)3b>`*h<oN6d,OUL]C?O+dF2k'..>SA1OAI-,[0ZuOjj*'84("NU+@:&)s&nB\fJ.WaBT,Md(o
%6St8EL();%oFu'cArbW%f.Uugf\V;+*$8a1IZZYYM+FP>@PW9DW#3j>=FJ[LF*n%Mf8%Hf&#"Qu=O0p*SN.`8D;=*-ph_(dJ(hF(
%[PhISGR/-^`^>fK3?BA]I!#,J@-2]i$u!u>_%AKD6_o^f"OsjfP;s[.D;5lO1KNZ5pdc>YUGFT@4Rh-Z8;@Zu\6V&XYqj?e^gr/m
%Nh8<q#a8>kqQD]q_^>B_135Q;D;5`ZNQ\H8UD$"ueZ2f6q;=5Y4GLR1*^5^8fRr4:6%-L?C%pXb1TjETYQ0^Yi-8X[s(!/j[g?d;
%2oitq&]]Oa1SG0Xrp%=>:ZZb%L3G%7B4/P3hY#@!2ogE=,u;t$WEim?9AjIoNa!QcZ*NH.WAc'OIeXo(d0j5p"dC:EO5P8/g$CLY
%"_]9RboXl@2h>dg2c#o@2Z"&]9er2dAcfpi6Y*OLKItdM]52X\7+_(:fk8/aipch]p6e,HJsdsLc0c161lZ>F))Ksl1C8A*g$CLq
%!j`g9`/Tu*4u;WMI\UJ\#9[k]g$Bt*HMe2SYhA@F?JOdUZOb'U:F2JnFCNJ_ZItdGW`.)Q*u^t:\SUu-OfBgiS^$RM4XZcE*h!4\
%Qd+qRVG&M0I5(5@.bX0PTX59`lqXnCe?[buPW#pcp6e.^V`4MtS)$0I@cH)-1Si*k&CsW=DDjT13X8uLT6rPDp`T-7A[C+t3dctC
%aP#q(3p<IJ9e)X'W>son0^"WEkF$fUq.t3r/'"HlfdB=)K8sr4.Z,J5aGlS3m]pk,/":t,?#a[Ag$CNo"_]9Obs#X7?nI-d+ZDkK
%qoiuYo7YG%-X7eXQ13[H+>_#YmibSDIZ_nCD&o-k2L>G#%;)r-RX4BQC#o*>`T4>XBCP#'Y6aO;B!]h1QXkRf)E'^II=U!E-_$Yp
%56TUi-BQJi0cPQom*i(HA@'U@=k.9*D"_;WPR1s.UT/2YZqi!;SOdLnAi$i2p)32dP7_,%*]]]QN+6E#g$E%sW$u8`;\JRoF.Q>h
%qi!*I4059*N,81f?!pR`m%[k=a3J9=ZjohWS"0[0)%#]Zb@\e>!KY*aPKmd\eX-[1e&u@tG-"A"S)*4/$#PM=,Fb7D%f4.+9e;di
%iWAAS3k]A'TE+uuA[B^A<'P6dD"\a=qJ!jRf`tA3,b#h'en=L6nnD[<>A<EE"f@TrDY55FRo\[_eISOF?KQRLC*o4VDY8WrVO+i2
%AH84)K@@nH\'iiEkmEX#>dpAqEBIGgiQUtVM>t?8>^%Rp:FU?J3:VJBRHmlT3Sk%=QFUn0Xdeln)O]nb6I\6HKf?]hF\?4$Y#/->
%>ka5jT5<Z$>I0_qk5'T3C-%dK'7<&a=Q]H>H#$o#Xq-$AF^gd)<ndC0&]CA!f<#2ef[D18\aC2#5)%4'mi_1XB<GH&nXpk_?Y-Be
%?DAj5\Se(d1WNu4RHkVL%,]c<1=laeMl2`K*\oqH\!cQBY_;7PY'ZsS:Esq/BI)["1=lW!`KSDK\'ii[6@43I\aGB_a_%\[C$VGo
%Q,h-SpBsigE9=_Xrf'm?WFW/9\=R]jI[Fg2\eXC]0"e/pY5>D7U7(=JgA1fG9epd<Lh8Hbb]Q^d2YkSi@='fHb]PFQIDU?kpYbjc
%p1As_c\Gd5J"=,fD7J2W?t,PieqOhKqm8-1"4KjiPI^+oX\CBg4^@@ZmQE3d%E53h^qc7RpIX+K/moSBm%RAMJ*f4<pG2RaWJCIX
%i8\3Cl,@)SIomV>Vs4L;r!rC)nsf,8$sg:44$J1f;Kk@ndbc;2Q4>*U`8"6TUkPtp&WF*5ZGrY=*-3[VpSpFj9[k6])Cj5cpn`7C
%^,70Zckf\,VR8Ig\1Y#*-q*7]/#/0WLWr'nE?i9,%Klso>+ISRNuPe44^^4;l1j':%UI]^:]rp<+ZDKE&*G;G_Bg@dAZ,/RGRa]`
%>b-@SVhFRU4X,]16hpfNP_Ztrb(,j`ruG5`l0ng]UCP>FYW4Q1h]q4KG;#k`&eYjf-;`OWF!.@:M8L4'2iEILE(I(?0+Rq<)bd@E
%$9eiW6S]+Jed#J>)#?@*VFPH;pL@;@T"(H&_^&68ZeRI!4@rq>d)2X#5DOJ?iC=l<@14.GnT(q;&G'6R/at()OL@p.l^lU!Z:?1_
%r:dJ]"=B2nEeC#T79-!\ar(pR6aMXI,/>n?rg/\e=sd6>g7>`Xk[f-X;=3Bu"3Z*D\)QiKR_*%R3*VZX0\rcq@=)EOIcA6E\2eDs
%iC*\8kV;2u8D@I=#h!>0]X;+$DBFW>;O\!e-n9iARrED[Vsr?^$o000>]-G>2c7p:!;#KnKH/]GNj.1[m3*VaR',apJj"B_a?7c-
%CZmT"[[LX8cJc_2E#EI>!R/JW\4nd>Qa=K?HK,jsS],*P8mH`Q;h]fH/N?BcPUuO)oGQuJC<W]M6qn&X;XZ`k6dJJ'h11d`#u]KU
%!ng3bg[7"2aAQ\D)^/VfW_#1WO6I7Y6D60YK-d.L"Kn3-AXl6aM'IhW(B4fo3c.7\jd;,QLK4J^"^)6OdPG0P2(<J@-/i*U)cOb#
%We0.;+n*Y*"Q_]-_N:Foc/0bd"'@kA@QC.1AQP)Y*`Wop8n5JI%8W=5P!EE@q!+7@/%6Ofd)]bGAMGppYd"+1hI&s(E4Tk!9%t>A
%\T"%.L4qI/>&FZ/#+2@DAeH;!cZHKl%W,/Z!F2f(L8FIoVf\;QUR,u;HSm`,ebL,PkT';]hp@rR\0FeX;BJ4c>#>WV6Pj-JP[\";
%;oE=-Pi#hLP4/j/o"GeB^C`\jRDR,p9sX')Wqb\00@-)K??Xk\YD(ttIa/U&8fOJ.7<*3pf2#<%>*:q&FbZ.1:Hu`CodKC.3-Q1Y
%''^dBII%#+!auUI(eHkXEcF_cYg4HSHmQ0*#m@tf*r6pc*C4TRI60/TNJZU:WC',/"eJ%SW?3Uh8#*GT^a^$^P'RCh^7Cpm*]-3X
%"*`R&;?N08@4lIN8NgTAGJTG'F>Buc)YMej<4E-=M[rRc(FH9m]QPX($RDHTb?c_\*Kidqs-pbS)sOr<hi2#"@70mccXeg#^(cSC
%2b]G$6Z@T1q=PeP_UmILG/BF0fnFqaHT4+GHTE3eN?gD$T=PTOEihQYMF';?I:rNb;0Lptf9XLGJXV[,nP6j'7,E:2FcKa3RH2nZ
%+Jcn<'Yb5`oes.5I,pZ-eC#1&+^A:15)bP1PT-MH`(4-G?AeX'Z01OF5]nlkOC>>$\?<?nM%/>K6hoPe-_)oL!&5uMi\Fl^Q8ZmF
%A@!7k-09IQ`$H&;>cE$LiV'^oc^o0X94nI$.4:H;n*LiRH$oLN2tn5o;-%6.G+@@dhbL<Q<bIjV`mBl59@^FQ5(.a(;9`rhTAm)l
%gLtKd6:gPCUgBc@0o"O#bi[`%%Ym1(gFQV%0m!4WMp3mIZaZpg=m$qic]f*^9"+Y`4n!KGDK9pnUN<[P>>-T)[jQ2o<n=jSLE!@E
%&Z/\pW+u1omc21%h!AHfAN#sggmG^';%a7<\+?$,n)dW!\bb!>.9H>;=7s1gs4I3t48h:E?Kq=Ne%sAT(#M3(^\YUAeZ\^+:AQoQ
%q^^(GfC[e>f=h*)ei7$kI"uFiCCbd*cJhiG\^M-,B'3@Jf#AoCn@?+#O>#Lml"_ZoSY(U*4s@REDC;usXgq2>2fV$nqRh;5/#:JU
%CR\mLO3;OT4'\q-S)a5*>Gp9Ug$*.I;qm:SqO]jj3kNT$Vkpnjf+Z9,q2]*Mh[V/ab/Vs/d[-j!VN4YuojWpAQ,?c5"TY9#=n=$K
%i=S(9G8$kDX:):2X6[*-Fm/tj(G,th#fYn`]rfq<7+:Oi;a6W*BWgsTe`ZVB:M6l1SAI+h\#78^!EeX%`>;RA(@TNb[*<o3nbd/%
%B_h&\E*LbW:)$f3C,T5I..(L?IUR)?,Bf!lWI(,\0D3Od1qGb9SeSrSi3G<,CT%&L1sZIE:\.0NH*<YsD!^$G-/-[L/h[2Yb`e[c
%]%2l,k=6=Go,-6'*Q5mAg,^0,NH%(P:FqXS$2*.UqGTDdL]-MP,[ioT*<SGWH4B:3rT\I,5J-pjL%cN;acW-"5InIsNQ-is=H2>H
%s4Np%-,oK/fZ)>IDUm$KXEj=m]2jsXL_2Xm=a4,qQFKYS%'JHE>_Q/@+TH5`qJuQAXS=[\l^Gj6p:[S\pZG5XdofI)>59ePlh1S<
%._0Y9G&Hba5$:\5MAn[uFl/K?V6ee&Upf,tX^uG=%\WFL*)*m9L0JUF]H1&'3W<T=1"A71eoL"c^UVn`ntd5a;:HV_]Ug^Ak?%C9
%O1p/G*$=prXbmeg^%o@eI&3$aC%YDb?XEP!?BplSabs0d-J<.Qo;KPZ./1d,j1WB6qCDFYqrmEam7N;)<;rbRX&7:BnFh1Z:)5Sq
%!g*BWG35@-`sO(Q:R6og^?obdZQ2.L.qW!qCLo/KQ)Zd0@lW1"m\ZNNr^eZ</s6T79'WNAk+\t:54]hB4JRMd9`ibCoPgK#bkq"6
%R]>i,73%J8P\/C:O6(iMA5.G>@Q5^m"-LQ_EnQWq/N::jREN:H4<?#dp<,J_fBt[b1)o'<]s^S<XuhJZkbJ.2hI_3PCBgufB9&#`
%<;:i)mMI@`ChuqFK1k[qdacu[8s5YoKFWrh]j"0[`XXL(oC59"g2"P/h@A]Kr!'p%=^UOYU'HI/M:5H(0lqTL[q)m`IL,]*WIsO!
%&"QP\hoB,mPrYn'nt:@n-847@3go`%L"C-drd1!UKrY4c<cZlcVaPEFAUR:@:Y]5ebNi@ea"gEoQo3D>L*d;NeG%)H"q\[N#HK/H
%$(oDRVf&nI7Xbo!RdTdXXK[;FN=@,Lr9O*KR+h>0J+=[r$fFb*gQlsZYhua;^Rb6^+?Kh_np%Fkl0"@`,49A/EHY+#`6UV'A0XrI
%HZ*^Q,VNcu5@>Z";<I)E]*&acqjA,KX7_^_GPd"TU'RF[r++D[DgufT_n4)sqYce:rEVTq#;rrFqCf=^QcL`o\"g5$2s!51.+s^u
%"/`]#:L-*.^1Il@r+5;5-':L^fpUlUm=Xalm.6MV2m8NF*tK/HS+$=I1_T"LB&i;G2<=?jOMtek.ebK+lTduiHt-`o\u_EsMXV`>
%mmI]Q]l*N;bfAFW1%X8elsSCe_gq<(.pLkUT$QJ`f'`fNH>(oLS)^L:k[fsJ%D398G=rapD'L!$qNlM.REN9M5VJ,C*$<HA@+M7=
%mAJG*FtQqs.&S[Mc;)jJG%$.cA-ipucPJh6P^/k4h)MtA(/_29:J(N77J^Q,R5V(+Ed[39+S/o!=7JCb1<$#`lb1R!Ia9,lTqD>N
%+5Wl1gH,_A-,2AS^\9XiHKW(o^=H3Tpr@.?]_n?k^oi3f.hC<gaq4WI4RZh4no=N!P>[F<CY^S6BRNXVT9jCUL"#\Cq:>:CfVrLS
%Tp^Jb8"Wu<\X#uVeFqiFTfd"]:Him!I_]mG,Gf7Z?#On"048Tnnr\6>nQ8V+lM5jlhnoa92RVW!bAfET92s[4BH?!^e!85T"0.pt
%g%+lu:>;d#WLSBR=2&'"F#(lW[KQXt=U(T\rRe1tC+n:fDJPl*Z?$tCp6''f7ZQjrd&>MVb!'$ZDFaRj20D`_J&*-0,&aj?iJ65N
%+S'W,`^%eHOS2J#hlkl_Rg5uYn=*U&rbuD6<G<>l/N,A>O+eZTYO4\F^$O0S4VS-3SKW([6WGc*D66l'J_@Kp2lhYAb?V>ZCq-n@
%_GRN*C*Qu6f$lbG,7iK0A[o3+]<ZQ/JJtb?K3CQQFs3VtR7b=Krbs^+rmO'K+*LLoW.6XCG;-Z*1Z*bs3I,6-A+_;U,O](EZ0T1<
%q3\0Hkm=p)B[Iq-Q12T6p\OkZDXV*($*HMsM;Bl\<9\Ishn_c*H)>e0NTrX5.i,VIqq::OOYT;jF1jK$?#D9#!*K/o>NGi"+psuT
%kOoO4d990;MZ8cB%I:JEDkt\TbI(TdI"cKb0e.QB``R;i%ns'dXFbW$,Ju\=5+aFG/(Nuim:2_A[R;^<l"YN[j#q\<\_1U^2jKg8
%[:3c%H1nRBL7t>7KFW3lXqEV/"n#T77+KT!r8iAIUt9Hj\L[Y!&I%H-qrNQb,BKTqBY$IkU2%mNrE^r+gmr9_\LI."^a!_cV5.AL
%^Y\j5s(J_9Pe18W$r3h)-e@dmf1Hfr(KRk\9"Sp*3oG0X('(3OMBCpf<O<67_p!W"M@DW*q?uMiO(db"Q51ts(EFWu15;[>&iEGR
%_K%:#]tV70qjuXH;>^<`?$RlJ,RZPbDYBdX>@O+2q&OQNq5]6ji>KGahIOY_Bj;[b9u:m@>OLlH&GHgVHo(HkG4Llt-(j&"V2P5\
%0l(M9G2uBAh7i7j;Y@S4:9Wj':V*jH;?h;6K\0RbquG3E>IVa*W`6Ce=ZU\f>q`j/fO2V^90gK]?$Zj6,1#RH:_=5dE?&gOodt"+
%RQCqEZ1YeB\lL?RL_b^Bqo%G?U,N.``--2PpDp!Q203!4$;Xh'@CPp$Hcu/MJV)U6c7Al[VE3I<a0Sb%]."^8F'7n)M@:e$IR#Lc
%^O>%[a%8!KC1btKlWj"\2g9s;>sW=NL\_9-p$1o(i[)51q=9&k'$F4dF3$%F8/CYPQ27o8HU\WMl\\=^41e:ZB.i@T2<Vc<e$0pf
%/7N1l,[SUenBSkHCL>3g-%'L8LN8[GFLK@cQFU`l>2QC^Hi1\#PeE^Mr#W/^$=NqQ&:bMD0'nZ19R('Jpa'g,0#4rodU(r*>>Lf\
%[qhYA-'mb#C:4pIZ"@'q.j#S1$+[sOoseF+nj*Xd8AB9Gj1Ek[;V6pZ\$bM/>d(Q\c0alc%peM/CTYOglEa_J]60DK=DN%Sh?^Ae
%Eg'78O;`(D;dV\.j*0`ql+h`KhVDP^`8euBCA8,NE$0'@bo^h/iX]*X4#H(F!;[(J:Z5De2q4DbWjoG3aDZOO/q.BTpMWBuI^JWV
%]4i;-nP+CN+eO+,c[('KqCf+RGKPc=>k4W:26V79IfJM^!u^aZ5u$i&]5i>PV>;jDW0b'YO^:IT7lC#f,\?;M[e[YoH-7KUq,n7V
%W>EaN:V9O_`?1n=E,aCSjH:B?cL9@$A0>%XDG0c7i-=\&"ZM%m*ItoPhrJt<B1_'p:B,08^j?UtV`OR:3Ee"YX^?'dqJUA<fIMA8
%`mG%T.@5+to>];caM#bRg.1RJFQ9liS.'rte%N%p_S$feCJXR+$\%3tUVfLg2fGV.?u``AEor:[mTf14Z]:N(G4T^>H[0A68CaQT
%.9D"QCPIX?0+`&W^`;7XA[C1SWH-mFHqBpk%itpe[F]I^"j-L"^R+0(=r7KaQsDdj(#Uih]'<PZ$VZ0m63,P"[72KdbUS*'MM>`S
%^r0=;;pqe0ApE]$YC*QLnTm];7AMpjIe)1[qIS=H*h5+(4$jWuW5T0I$ah$+I.P>Cg=Bkg_6i)uX!p%B]-0'OZbpDNm"Bq4U_c1N
%bS)?&W9XuC@n/ope.Ahq),@F&0\*@&_nlQ*fYL1MpP+;X-;:p.UOZo?)&VZVOu%B(JK`6O9[6&:_"6;OVndHKnDN]laXm>5WXHlO
%n73I&Y'i)skua"1\NBH%5C"8n@N[QfH1,pa84^O3<ie7X6qQ<GFn<_5n@Z7B$/0oD-?olGO!(SP4DC(l@r`P=eg<%XOKPT!?29C9
%J'rZ:)>DCJ?>Zb5+4lQh^D4YX"%$_\i@Xqe$Z`V[i<q2XX???=qu2LpqeVg-R)\maNdPa=0Y?o*leJer1knS:AKI92O2nb%]EMnq
%pqaY'+/$::(me6Q-3g:3`E)Qp@CDL8hG1e@\0`Q3`+aPX"Yd4YP7U>*20>&snZquWjk(a=#9VjK"<BR;\b5R]9[L%sWk+g@B7c-a
%Ubk<nc3,.L,]LuJ[kg=j%eC9WqK=4LfV*J%Dr8hC*BVcNmd8bsTOWa^$@R:`'6NTfeTgt7-Ks*U2ed3fc3,.L`*)HegR4^E#Ap#\
%^7>QkG#3M]q0"+KfHD;s&_oug3d-Smq"]([kh*/Al@ZgA#s*6k6i6\&-Ks)jW?a'-^cJu.9$&RjXK1(QFBP]pS(QLfmd4OVAV&\)
%A/s7NmK1JF_knS<KRUB-YYAZT--1tG%KVNV]+73qMPA9SU2H:c@THRYO4r['^Ij97M:e@I>l+Z+K="A;2rFmc=8XM/G6!^lj!-*o
%P4$aD3!bP''EtZ4;^RZU/,#9E=c]sE5=_p5:EDa%BLHIcg+JlP:YF1ElKc:[PB]_&MpMKVHZRbFNZq,HU\HV=:#-kir6m5]rrCjD
%kUR"MBlRsrrWSFUk9'lY2u&#ZY8rBKAGKnWZh:X-3l?A&H!,'h&dfji>gmhJJcKIur;jjphAh93--.;DgFKaK21cdQ?kQTi0'GN>
%P"3=V^Vh4M_^LkrXJi:N[[JX7*%50m70+t-'@`,S:H/NG"j2#4Is0Pnl7CIa02AQT8a3!WG1$EFf<lB!?QL#b@mo_2TOsHf.u`@W
%YE,#SlOTD]>\78EZUq1QbH9N(FQp?%/R9CkOX]YOg`B7VKb$KOfZ%PsL!<r0E,mj0]HG.TJ%\`QQ%.pWm)1L"F`T(r[D^dZH?50s
%qbF8*Wc.ikghZAb:?7T6_qb7NrppU[Kts*?Sj<*3[OD^M%oID9qYJJGHhi9!TAFR+482q9R,(DG2p[]ak&JVtjRj:E\rV:mfgr1`
%Y?ZIF1"MWf^G(bhCKt-)6oC_/WZKb[6&obdp?U8S=f:sjCI[6V]/fK'7e2Z(YFCeXY#DG<WdjauX`D0RD>#01a@>_MI<_^4R;094
%WT".2FCP]*h3GU_bjeR+h$QZZ2!<+u@^50<b#g+M2Fe4in:93u@Qdf.+>OtAe%k8!j?TsM.qQ&FOeC*4Zh2XV+78t_kWPlN;f(mR
%Dn\iC\!)_\EkTRZDsm0T>%YLscXtT1:X@&6CqEW+E(bh7)$,of;KBI!HF.mtGB^EHXkS*'ocTqG0&(Yti%bhRqa,0^\R"o\L^";5
%Map5-.s9DnG"4kEZ'&>,m&J6cV3W68Dc8kZHQ0ZKbaL/L2H!]:?k:sdNqV>5$`D)Kjm@.aQa_0[qSHeirHpGO5b\JgR.BckO15l0
%o>!SRp#[5DCTiuU?GGQYb"hj(e=p^+VA5\#\#JgBX_7BFIas>*d2^or9G$o2YuZ>Pj(!jBRN@/]=PEnjG&,dX[[nS'j5khr2:h;`
%FRHXg4fcA*U/ej0iR(u3jeBfN+t.cVa4,=qJ7H<40(VaNGS1:JI]S/!crZ(&U$SC*Hg*-U9V6mPh.P0O\.MnJYLSpuju51<(EQNm
%$<q2O!*8_Ck?`@q7K89A/Y2\_r0Ro'[9qh%c^%`>Z/k^JlNA!/Y;>p%/D;fH3]b_.B[F\(V]9'\_0aj-@](ptWHJZ>P^A5T5<hRM
%l0?gpp#)[gk*`eQIHS@+PRd'SQ,H8a@[D>7CtjAbdQSr7gM[`12m_SbD/X2XQZLRFPNd:?#'k^tY[LUm5hMbGH.^ch93*'NMhPg"
%Fp5^?7&jQfnU$8%p'&(E]q=Lh5T\dFQ=pE3"ldcqrXMmem[N"o&H=bbGKDEGYLj1eUNWi)Kq%N,?Dgh10`Xmj15EDq3TJF;JGf31
%h7f]Ucf0D#i?`(qk)HG:=^JW]pGub\MEPF93dn\91.!ihE,3/p2hI<QP^IQ"6P\b'BcPe4)sTo\q,=s=Om<QAT$t=a&XZB<RdQ/k
%>_hNXVKjC)&oVq)Hn?3fb)KO#JhBEcc0?&%7`*lVE"?tpK(+"[iu[9m"JL$R)YY@UJ/\f.)'q7k]Dsmb$Wu(/dgC%=&]$qqg[kR&
%:e7'1DUSu4A%+*0j#4RN2oDdl@bdgsi&5)pEkiO$klnSZCQT4h2SB)LAfmd&DUSu4@g69Yj#4RN2jhUBELU9bgC-g8c'c=@-c!uK
%/RXOloE*fURc-P>P6l3GF(<5"9eX;A"AQCm48Ak8_jiDCT't83DC,\:KhO#4NTS\,&o_RdDD7%bj#4RN2jBoBV"JF*\06Y,D&>j#
%!&n@'n-<`,nH\Ja^aTGsq1jJo1r,)=S_E+?VA%lWm[g2-8rOGA7\qJjELU9b)m1MI]&qTFDDQbnr]6Dt6mS1=/Dt%@gg%+7dgC%%
%hu])LE-$)O.0[6/J<k0WAO6X3Gm:WL5/<-`Bd:W7H3%n!$&h>W,6kZg`S-OXgo+rN2_eF.!o,n>1\h#0\sbA3*A,(O*C`2g!&kZ-
%*Y=h;lN"DFeP%@+/Khu[;?:YkXA8W]iW[(,E'pE)(GGQ+JD1K,h?t`<nEU'5<&oPg(]6>0NS)\]M\l:P^^[JE_8Qe2*T2[r-Fe<:
%Y63RAdXmAnr&VWQ,e=*o0*iBP#5:3nF^GBQI+M#_nZaV)g>++'F(CJKY>hKYZLF0*B^YUT"!`P1jlmmp7JkTJiAGZTnA---6Z+qh
%p2Vh:KmVf`X08'lD[`r`\G\Qdm#5De-ur$@]:]?+D1AT,/Ijh(<kktV[>1>/T0@U5JRAtlPY07>eT!qs2UBFsNQamD>"WOe)UE!_
%$g[/:hqLg;LX"sYWdL;jmI$V0hJVbFe8gK`GpIsAfYWKiFX*.B?1e&"Vom9`$eZK$q=,_B9,DfnQ]L1LY&_"Dc<a++],0IMrAO7r
%d="HkkrP0m3t%JLiX^Y95e+U!EGI#nd9OBif]6_Cg>/#2qIV%E?B[f$hoi^9h^#Eaf7gmZRLos<RdG!\59ud\[q6q0!QW+lSi)l6
%<0,e2Buh%\E4qf5-a/jphafE--f*cP8#c>oTof9Kkft(^C$(,C/fqWc(#;%iNFHd@rt->5-1$RIHTQ%Or_0`NHJDl_J,7<R$<c%#
%NJ>[4(#([En)Z#t]iu)n5Mq9bFiGn`F0LU8X%KB5^Kb!t.6Xl-fma=L?-;<(e_TD!lgnqXeWdChW-ga?Ma^e+d1:pH`TtX^c1bOW
%^JW;sXh7nLig44MF<MZPUi#?5\E<J$hI`gNGK#e^m<,+lqT^XAR_n;-Bs*Y(NNUb2M"E9TNr+)'(tI(V1peGi4%%XY1Pb)Z)lkL_
%,=XgJH+!Xb5g3'5:q*u^kp6.&=o9BhB\9L8PC+JYM7`l:pgZq]K8nU?q2uVQnS4NIM$Rs#4pj[(hfc-1U`r"QP&a"d@.o52Vg784
%+ifeX6nZ")l>ie@Gth*f]Ra>_?:d$*QL=!Na1L^hkhJd@%_mH&KM:`Pc0gIgHlQ_L]%NqPkEEEIjECC"&JT-%fV.(PB44kFYQa?@
%k*+Xc^EcPo]2)oa)`)m\m&:M(]ebR'o^2"SB^LfLhO3(0%r/)mV=/c[PEIg+8XBi]$CkM:OcYC15s"dgjS7o%:Q1A$3.o(&$>""`
%>8;s<"07\MAuaOrA\`q3.;"Rp>J;E#eSae2<BK('1'=6_S;&fr(.mF*g@jR"]u3*Td<Fs]A(=2i_nOc0[@K:&6SE#N?Un=j>WU`\
%!u4H:$eoTfGe\S1d\tMOIc/e@L$V\H:LQHY^3h'cU;ohuX]XCPA2f%0VFnHolT??)$H!Hr>M:T4C0.si9'(YAZJe$AEg/O9Xl:HT
%N,$6;#8j`>RVc*ld;%%@#YeCN?GB4GaKMT.8$/14r_r4.r4tneIlR36ri>;r?I0mJ/AiPb[cRT,;:7PCY=.qp!drfpG']Q[\Q<Q(
%Mk,>A$.=!@P.s3)6kU*cq\=Eq7\TkrpBoa8V\KgmpPP&a"QUaur9*LOR6UQC5L/a?/hX(X!YX[\8G##i=u\Ug!^tHD1oZVPZ-R!;
%Nd'-2XpV'$#QHi:s7HO[o":\brea7/PK;c?(TGVD#8g?rlN/_.@_<>?2-#MjB)[nPJg:Vt8^TsYU;46gRi&?K,u)Co7=c8sh^T/o
%VJ#m)j1Hqs]'rU&;H.HDj#W54_`Sj*7uW?GHjq1fEa7,Q[hpd:'ibtmcld=k8/aGkJ:Ro-=&dV`X+D$7_cKH8'jrKCVJ<+DJN3mj
%7sOj>Ng'#PI*Kd/JX7(=I&4l/!Lj(/WX^-8EF%bc,A>\/0d6UL";Ust"GJBuhuP",DDm?%+A&DZo=>nBj@V+n.*t6[]EnEeP$%c>
%Z6VkV8/Fk;H'Gfa$;*_9!.(/+M$)J>LoA<^&SGO%"/qq6f-Nkm\c=KbKaaYI]G_Bm\AF)5(4k'C-3ZObBF9epZGQ,D!AHd)UW!C3
%<[%Uhc<Ge8,_?`^"AZ=M#V[(r*,kq''R@JJ!29P]AV(=Z(88>Ch)HFeX,70-MK)eGi7pT0cJtP0aHKU0Ea7X9fPp%'!\WDLr/5]J
%^B=]`'&o@UnI-UI'?LKb,0AJk'+mS+>Er1Y[k*\<"P@WN#;:o6-l:JlTIF!?0'NH:bn2c43]KDas2Ih71I+i=(EdTaLG!sZjT$Fu
%>D9<ffK/s4"r1+C<)-C!/p3^)O#X&Z\/W"3P!8sLK[rPa*&7a0#6e.Y@),(F&N!@KaR4j6_3PEKaX9>6.Y7]!6]qQl<?`rUi)A9D
%pdE^'$j,9R?=GDs<2=Oo71p.R+rh/LIk(k/LnG+9B:1>=eRX5i!(]GL"AL'rBUYgXhkD6W^B"<q!utp5-_%!SKK6oH"0KAr]#*e.
%2t.+o5N)a<)nI8aK)5sN3c5j`.`1E=2uGl@s/)^pW!&6S1[$%P4=,3==?ljc6N2ip&Aj"?aR:Td,Yd4F'one%'b:RX6IHUs"3qO,
%T`^3=r$qaMV_S+te\Vr,]-8H7V[A*K'b1Kk%_'^s0P-(l7+;6C,"77kCR*fX#e31)5Rn9p,fE,?,#H/6A.D060^ob.DYP:cpm[Ui
%&)kU1J0kT5S3RnsYW_O\E&C@%>Y+qT!H,`SMFJL0$2>o[19?J5Hk%'*?).oJ#IFgI\u8Okb3AQn!PAK-@qZO,b&DO^F-LP,Yi?"\
%W,oBO\ce"V<Egh5VZL_^'Yp]u!67C'-eI2Zlk$l4X<QOZ\Nc#\fZ(H%SK_VoLb;-F8/jSId(jXa:?7G.l?)PM!$OX9nd;;ZOZMU8
%jAZ3la6eVXC,3(FpfgVRJ,DmP'/b@dh1S$=*"!Or.b!4)rIc6-g3?UCC_YVLg*@%=gG(he_!X0J,Ro]LYm-)"9u<mR:;Di':*RS(
%,)cp>PikDd`5/URaW^j*(Q6KQG8^aInOp[)$nI#9:*gGrO-Bsr5^J5):Zp.ofK9iiF=mUUQXn2O@kRZdg3DPS\9:TC?]bGL%D3)W
%KQ/;lTp2eZ1mpu:*0N2pd",h_QPc;[4pX+V@7Ds_\00O*2OC/td(!Ma-4ka+b&dl2Pq7jF"GM4KMh9(]Rk3cF.Ne`u46^9'i$4A:
%F%ai1"L8-`JF1E36Cl=IEHoDu;,D4R`V>O;!a6.4oFa"`3$n-&&cY)oLt=nT!&NPEA-P<%J0)kNn[L9i(P$NM,#TdO:E0p0Oik88
%>.P&Pr'ZqqlA>SJ")$%.VU0k#+lYs9C]fN#:isS"!#um<3GLIB6tA%&)5)Pu,6E56[K=$TPX3.:M';s+(q9q-!Y#JidS>r2X9okr
%!b_\o:hF&h#k<_nW!6rK&QQo>@4GrP<JCn05]nFu1@1Pk9r/<1!rI]*Q)r>@!W@bm,u?a!U)T(Z,GGH+4DZK(835QW;)Z.NLoc:W
%7@3E"!)LrF!\fFEL$G^$3Inb6]VlshN(@*7U(\0'7+bm?+_2&WQ&8g:Y]U$<Q=[)IMDAS*W2G;7,*ckq;A!bt9$(9].gI[rPVlEp
%6%?]TWjWK8#"VV=71R9c<h#*`8^@j;@c1IR5^=$@dSH667X5uT"Z70hr5i^]r$>0_$Km(YOht'ejDMciTS'BlQ@O!@bsRa:DDi-f
%;$oT.84$$[X@r`?!YZAHL`l<<!AUNW$$6GM&dcg6L8M1X1i,Ki7$>XK!"SLHG*bJJA7R0q4blmBhr"Kb$@u;L5]qS_%Q9gl&TrI@
%'cA)`;j20?5W-OdJ1IAmdP9]s;JbnZaM0^\);+'7R'6m[69,]a-pUE-*\Z:C$*j`e".=05e/dB>+;b56J:M!p@u"<C?#@s5UbWS@
%^tl$NogdCeb#(EXQ"cF/nr-f;Yh?gF'ST+?%VYB.g]8asJF0#l,8pfArJaJ]7Zlq$6T#%CVk>h[/-._@)6-<S-E,$A5qkheHM:8o
%38)BnfPQJ333)ip=##9k_QXd9npn[Ws2q]h*kdRYQj`D5fS"bid$X]$"iuf,/$L0Y>c\aK!?MG:e)7uB*W;"(7HD\eNp1iFeQ"Ig
%'$"BUel)W#h"$cu8de2pdi;U>ZaV)T1H2?/pPi`<l`mYO1iJeWL`?`ZhcIejVGMS0I<<#E79(F8Paa'Hlpd<eWGOGoUmad/p$?8r
%k.W\$amoqW#38Bi!Jn2@Sl=s;2MI<YBn\H>6;YYH6lH)2kpDPFU+PB7St1*,g/lo!!"S.?hcfD\X1=n'i^KT9`Z>D#9=Kgt:th)=
%/ehj!^)d_]P#F-=S)@[&k(i88p4c/]q#rXF/bYHs%1jL#2qFf.PeY>=U\GT=6u74eB0jp(TdP^;!e\pM[-VUs`CQ_992'9B]?$i)
%pH!>W8boqGhQ'U*dn!P0qL3BN*:oKTlAN@\O/OPY63?6)Tqni-.XRb8JOtk7T4_BKkJ9%NWF+aj.592a.f;k^Fc$`]FU)74<N_UD
%U``l$QZF<t--P_J>7f>JgUe?M_(@.u"_adLR"?iq=>)"#5aBQ/:jdhk*GQ0"i$6pN0MfB^Ya8A]_QcoXjWI>#fI[-Yo"Ih#Q-m^a
%Y$p33*0SAQm)a\8.'@?GFgN]bQT>0_3OYRVS0Et,![p_48SmJC+B-,[99\C&<%]c(#u['g<p2PSXrC$-f&@Veq%lbXm1dEerFpM!
%-@<j)k]epi*V.gjr+N=Y*A0`+VMR,?C;V#le^7,!PGu%qc,1j+a-/3DO9V0;mUJ<p9pfM)]ZZ\&3TQ3&=^Bj3.]4F#"SeTVGF61e
%(E)YbE[eMk[HlB/l'1rM+Mg7MH,hK>%VfZ"B(Z'SSIL-dG2>]es-#8`$.k@(/Zsk[7/j?Z"O`_S+oY%g>"^B4^A=^;$9j=M.<JjW
%>ubJYm[@E1R.i:m4PcYJi5]j`o$FNn%mLF"2&JF^,:G&UjU1KJe=6ED)Sq5iUlTe(g8:r+UsH^-`fjXpYfG_R_e``8Eq]aZ7S_>I
%Pk.2^)WjQ&^P.fKG"djRL%rn,D9GJ,U@F_OTtBK27H45_q$0KAG#p>$<'_Tc1QQE&6-OgW"H')'3?bk&n#%`2)PO%&Vc%I7BC1Fc
%[[`=scddHSd4'G%MtGOZ2%idj$tsP=4,W/=``>6b=IrI!!Jau5h@\`,f?EAGW!AgeTP]GuNc,)I9mRfE%hI!n?0N<+@gdX2X-1BH
%=QDO(os.F/"6hQd:0q6][!N+7\)l[9-QN^km,$Q_.O=\(,*B>$\EfZ#?t^(SK5bKKLruA%>)\Ekc]Xd)+Yc6Q-0IfL10DpLG_pTG
%mN;1!CO;:D8c!k48J8_6XkC^o<sS/8O(m1j9%oqiTt*T;`V$4P%@0)LkN>n-AV%:sLKDZYca1M<\Ura=[0NQWLb<Jg1CT<*M4K3f
%%uEh*o4r2U-kmo,gd>Lk.r1`]E6N6F"=#jV)0&)4I47ZK_Kih8a7DM=K6IB5MaCR^!<"ddVpIIR2I"`62]GG.VB6YM(2LuIYsYca
%7btp^`CEX$`tEN:D5YOq\('g\B%m,!UZ9KG'Ms1dk`Z,%8K"FH<rO](<S&)d7A_I-f*ZYgo<Nirm7Z9-ja/U4kb$/kk1ros+g1(/
%fKHSM]pQZBM_.SW+_bLB@NA"02pgp#X3W6KWc+4E:g%R<Q]-gR'42!F%G<Fm\#c/++`_Is?[3%$aUlDP_`QW(1u,B2q2(%2FFM[K
%/Su[m@IG[eW"PBP(rV:D%MW,PfE6r0-S9HWQh2c(SkK$b9h^`6bZuq#4G-2OIb5RJD*O;X`S7O/+MLqI0"\G,pK]VakbeDV1Y`*0
%DOZB`>RERF=@_@'o>"t,pQsMfr-((o-!em)JM\7Q:7pkt+>*>*Z)j4M.6p]i"k/1GE;6J-4bQ0dEQ$6^<N.kO9Gth%&c3HBDAD#s
%7hfQ)OZ^9"/KG%;f"7aKd#eelE^_i)kW0U]n-PK+rD%9d:.*_js6C/=L7X1G6'e5^]Y')rPBBZ$!7lFKODV5VlWJ*a4RcL)i%iK.
%O#eN$L=r=&RDf><LWtqC9(W-[r_mofQZFnYF!aM!J91:?N!V/(QXWq94Y&$?qj>h-heMgm9pU3;gB.mAF5mV`20K]U5g$;-aZN%W
%nqL0k'Zko,L\s<^MB"jA(MJM(19XK\_KaW>XE+(<2mC.5F6WlYWXJBm)d$OB[B1+D:o!=EJQ3E!q2SE*2dROj`O<%l*N+.LZGm&H
%m.Pk@J147D)c.iL"76/ij-CW\O_Cp+VmsA+.XnW)(ZC3LhuY.J$`=>=\mOA0\=Lk$"/g01n-c-l&@fM)]%sEZ0L\rCGECPXQ3Tl2
%-fPT0<ZDYR64l$-"]/*NGC5j$>/gkE(q*UCF@*sn0u&8QMSol81m-Lq':>Xm)fE/B/Jegg1X9M4Q"Z>J%NM,ua_?e\?OXNlNs/*2
%P5[eDA*!_^4ONNm^a!lY2K!KP;i,h^#bQEO&Pil4\jI'#i>O'TOWr'aLBbH>EJG_(lE:$"U#g?B_[uNNXqrdf:UNq7RUM$X$H\c?
%G7_WXaeJ]a5tL)i%XqgtXV>c#A'e)L2[n\Q%ZGge:o=2Q:Co!>m(7mHnO`6O64bnT3o^8bFbghVoQRD1iK$2er8ZCqs8U8<nb4Y#
%J,GZ4,3:EV;Xr!bO7/\?pA+5Cn+l-"n%Lo5H[^5;q!lhba03hh`D7$55!OPmqW[VC_j>k&qEJV;ds8j#2a@?8c[Y`K2m$nc@/~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial 911 18555 a
 currentpoint currentpoint translate 1 36.15425 div 1 36.15425 div
scale neg exch neg exch translate
 911 18555 a 640 420 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 2.84526 SLW 0  setgray   0.05 true -36.135
-2233.49466 3199.5124 11.99684 .5 Frame  gsave 2.84526 SLW 0  setgray
 1. .setopacityalpha  0  setlinecap stroke  grestore end
 
@endspecial 1 TeXcolorgray 40 420 9 420
v 0 TeXcolorgray 1 TeXcolorgray 27511 420 V 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1055 1273
a Fq(Classifying)229 b(V)-57 b(erb)229 b(P)-19 b(article)229
b(Constructions)g(Using)g(N-gram)g(Coun)-19 b(ts)p 0
TeXcolorgray 0 0.275 1 0.06 TeXcolorcmyk 1055 1861 a
Fp(Jonathan)164 b(K.)g(Kummerfeld)e(and)i(James)g(R.)g(Curran)p
0 TeXcolorgray 1055 2343 a Fo({jkum0593,)t(james})q(@i)q(t.u)q(sy)q(d.)
q(edu)q(.a)q(u)p 0 TeXcolorgray 1055 2990 a Fn(W)-29
b(e)136 b(use)h(the)f(Go)10 b(ogle)136 b(W)-29 b(eb1T)137
b(corpus)g(to)f(classify)g(v)-10 b(erb-particle)137 b(pairs)g(as)g(p)10
b(oten)-10 b(tial)136 b(VPCs)h(b)-10 b(y)136 b(p)10 b(erforming)136
b(a)h(linguistic)g(constituency)f(test.)1055 3306 y(Our)114
b(system)f(has)h(high)h(throughput)f(and)g(p)10 b(erforms)113
b(w)-10 b(ell)115 b(considering)e(the)h(simplicit)-10
b(y)115 b(of)e(the)h(linguistic)g(test)g(applied.)p 0
TeXcolorgray 0.86 0.6 0 0 TeXcolorcmyk 0 TeXcolorgray
0.86 0.6 0 0 TeXcolorcmyk 972 4131 a Fm(In)-14 b(tro)14
b(duction)p 0 TeXcolorgray 0 0.91 0.66 0.06 TeXcolorcmyk
972 4610 a Fl(Main)-8 b(taining)196 b(comprehensiv)-8
b(e)197 b(lists)g(of)f(Multi-W)-24 b(ord)196 b(Expressions)972
4925 y(\(m)-8 b(w)g(es\))79 b(is)i(di\016cult)f(b)8 b(ecause)79
b(new)84 b(m)-8 b(w)g(es)79 b(are)g(con)-8 b(tin)g(uously)82
b(b)8 b(eing)79 b(cre-)972 5241 y(ated.)125 b(W)-24 b(e)89
b(use)h(the)g(Go)8 b(ogle)88 b(W)-24 b(eb1T)90 b(corpus)g(to)f(p)8
b(erform)90 b(the)g(fron)-8 b(ting)972 5556 y(constituency)96
b(test)f(to)f(recognise)h(p)8 b(oten)-8 b(tial)94 b(vp)8
b(cs.)p 0 TeXcolorgray 972 5897 a Fk(F)-21 b(or)67 b
Fj(vpc)p Fk(s)f(the)g(fron)-7 b(ting)66 b(test)h(considers)e(the)i(v)
-14 b(alidit)-7 b(y)66 b(of)g(the)g(follo)-7 b(wing)66
b(t)-7 b(w)g(o)66 b(orders)972 6212 y(of)83 b(a)f(phrase)g(\(note)i
(that)f Fi(NP)3693 6250 y Fh(2)3866 6212 y Fk(ma)-7 b(y)82
b(not)h(alw)-7 b(a)g(ys)82 b(b)7 b(e)82 b(presen)-7 b(t\):)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
989 6594 a Fg(\017)p 0 TeXcolorgray 0 TeXcolorgray 42
w Fi(NP)1415 6631 y Fh(1)1636 6594 y Fi(Verb)130 b(Particle)i(NP)3718
6631 y Fh(2)p 0 TeXcolorgray 0 TeXcolorgray 989 6926
a Fg(\017)p 0 TeXcolorgray 0 TeXcolorgray 42 w Fi(Particle)f(NP)2586
6964 y Fh(2)2807 6926 y Fi(NP)3067 6964 y Fh(1)3288 6926
y Fi(Verb)972 7308 y Fk(F)-21 b(or)73 b(the)h(in)-7 b(transitiv)g(e)72
b(case)h(a)g Fj(vpc)g Fk(alw)-7 b(a)g(ys)73 b(results.)106
b(In)72 b(the)i(transitiv)-7 b(e)73 b(case)g(either)972
7624 y(a)84 b Fj(vpc)p Fk(,)g(a)g(prep)7 b(ositional)83
b(v)-7 b(erb)84 b(or)g(a)f(free)i(v)-7 b(erb-prep)7 b(osition)82
b(com)-7 b(bination)83 b(is)h(pro-)972 7939 y(duced.)110
b(Only)83 b(one)f(ordering)h(is)f(v)-14 b(alid)82 b(for)h(the)g
Fj(vpc)p Fk(s,)g(but)f(b)7 b(oth)83 b(are)g(v)-14 b(alid)82
b(for)h(the)972 8255 y(other)g(cases.)p 0 TeXcolorgray
0 TeXcolorgray 1037 8333 7851 4 v 1087 8554 a Fj(Type)p
3159 8648 4 316 v 1500 w(Example)p 5976 8648 V 1741 w(Rearranged)95
b(f)-6 b(orm)p 1037 8652 7851 4 v 1037 8668 V 1087 8889
a Fk(In)f(transitiv)g(e)82 b Fj(vpc)p 3159 8984 4 316
v 362 w Fk(He)h(gets)g(around.)p 5976 8984 V 1099 w(*Around)f(he)h
(gets)1087 9204 y(T)-21 b(ransitiv)-7 b(e)83 b Fj(vpc)p
3159 9299 V 520 w Fk(The)g(ma\014a)f(ran)g(do)-7 b(wn)82
b(Jo)7 b(e.)p 5976 9299 V 100 w(*Do)-7 b(wn)83 b(Jo)7
b(e)83 b(the)g(ma\014a)f(ran.)1087 9520 y(Prep)7 b(ositional)81
b(V)-21 b(erb)p 3159 9615 V 100 w(What)83 b(did)f(y)-7
b(ou)82 b(refer)h(to?)p 5976 9615 V 316 w(T)-21 b(o)83
b(what)g(did)f(y)-7 b(ou)82 b(refer?)1087 9835 y(F)-21
b(ree)83 b(com)-7 b(bination)p 3159 9930 V 252 w(I)83
b(w)-7 b(alk)g(ed)82 b(to)h(the)g(house.)p 5976 9930
V 418 w(T)-21 b(o)83 b(the)g(house,)f(I)g(w)-7 b(alk)g(ed.)p
1037 9933 7851 4 v 1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0
TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 2681 10197
a Ff(T)-21 b(yp)7 b(es)83 b(of)f(verb)h(pa)-7 b(rticle)83
b(combinations)g(and)g(examples.)p 0 TeXcolorgray 972
10677 a Fk(W)-21 b(e)102 b(compare)g(the)g(frequency)f(coun)-7
b(ts)102 b(of)f(m)-7 b(ultiple)102 b(arrangemen)-7 b(ts)101
b(of)h(the)g(same)972 10992 y(v)-7 b(erb-particle)83
b(pair)f(to)h(determing)f(the)h(v)-14 b(alidit)-7 b(y)83
b(of)f(t)-7 b(w)g(o)83 b(orderings.)p 0.86 0.6 0 0 TeXcolorcmyk
972 11777 a Fm(Data)165 b(sources)p 0 TeXcolorgray 0 0.91 0.66 0.06
TeXcolorcmyk 972 12257 a Fl(A)-8 b(t)117 b(o)-8 b(v)g(er)118
b(t)-8 b(w)g(en)g(t)g(y-four)118 b(gigab)-8 b(ytes)117
b(in)h(compressed)g(form,)k(the)c(Go)8 b(ogle)972 12572
y(W)-24 b(eb1T)80 b(corpus)g(p)8 b(oses)80 b(new)g(c)-8
b(hallenges)79 b(for)h(data)f(pro)8 b(cessing)80 b(systems)p
0 TeXcolorgray Fk(.)972 12888 y(The)62 b(corpus)f(is)h(a)g(collection)f
(of)h(n-grams)f(up)g(to)h(5-grams,)j(extracted)e(from)e(sligh)-7
b(tly)972 13203 y(more)83 b(than)f(one)h(trillion)f(w)-7
b(ords)82 b(of)h(English)e(from)h(public)g(w)-7 b(eb)82
b(pages)g([2].)p 0 TeXcolorgray 0 TeXcolorgray 972 13597
8420 4 v 2036 13817 a(N-gram)p 3919 13912 4 316 v 1114
w(F)-21 b(requency)p 5125 13912 V 5142 13912 V 1178 w(N-gram)p
8185 13912 V 1160 w(F)g(requency)p 972 13915 8420 4 v
972 13932 V 1933 14153 a(ferret)83 b(out)p 3919 14247
4 316 v 1497 w(79728)p 5125 14247 V 5142 14247 V 1074
w(out)g(ferret)p 8185 14247 V 1916 w(74)p 972 14251 8420
4 v 1616 14472 a(ferret)g(them)g(out)p 3919 14566 4 316
v 1304 w(1582)p 5125 14566 V 5142 14566 V 860 w(out)g(the)g(ferret)p
8185 14566 V 1579 w(120)1809 14787 y(ferret)g(it)g(out)p
3919 14882 V 1497 w(1562)p 5125 14882 V 5142 14882 V
933 w(out)f(of)h(ferret)p 8185 14882 V 1775 w(71)1808
15103 y(ferret)g(is)g(out)p 3919 15197 V 1744 w(54)p
5125 15197 V 5142 15197 V 971 w(out)f(a)h(ferret)p 8185
15197 V 1813 w(63)p 972 15201 8420 4 v 1226 15421 a(ferret)h(these)e(p)
7 b(eople)83 b(out)p 3919 15516 4 316 v 1162 w(60)p 5125
15516 V 5142 15516 V 719 w(out)g(of)f(the)h(ferret)p
8185 15516 V 1562 w(54)p 972 15519 8420 4 v 1022 15740
a(ferret)g(lo)-7 b(v)g(ers)83 b(can)f(ferret)i(out)p
3919 15835 4 316 v 958 w(45)p 5125 15835 V 5142 15835
V 116 w(out)e(a)h(needing)f(shelter)h(ferret)p 8185 15835
V 958 w(63)p 972 15838 8420 4 v 1 0 0 TeXcolorrgb 0 TeXcolorgray
1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 1776
16102 a Ff(Some)f(of)h(the)f(N-grams)g(in)h(the)f(W)-7
b(eb1T)83 b(co)-7 b(rpus)83 b(fo)-7 b(r)82 b(the)99 b
Fj(vpc)82 b Ff(ferret)g(out.)p 0 TeXcolorgray 972 16582
a Fk(The)h(sizes)f(and)g(sources)h(of)f(the)h(data)g(sets)f(used)g(w)-7
b(ere:)p 0 TeXcolorgray 0 TeXcolorgray 989 16955 a Fg(\017)p
0 TeXcolorgray 0 TeXcolorgray 42 w Fk(V)-21 b(erbs)68
b(-)f(19,046)g(-)g(all)h(w)-7 b(ords)67 b(with)h(a)f(VB)g(based)g(tag)h
(in)f(the)h(W)-21 b(all)68 b(Street)g(Journal)1155 17271
y(section)83 b(of)f(the)h(P)-7 b(enn)82 b(T)-21 b(reebank)p
0 TeXcolorgray 0 TeXcolorgray 989 17603 a Fg(\017)p 0
TeXcolorgray 0 TeXcolorgray 42 w Fk(P)-7 b(articles)74
b(-)g(257)f(-)h(all)g(w)-7 b(ords)73 b(with)h(either)h(an)f(IN)f(or)h
(RP)g(tag)h(in)e(the)h(W)-21 b(all)74 b(Street)1155 17918
y(Journal)82 b(section)h(of)f(the)h(P)-7 b(enn)82 b(T)-21
b(reebank)p 0 TeXcolorgray 0 TeXcolorgray 989 18250 a
Fg(\017)p 0 TeXcolorgray 0 TeXcolorgray 42 w Fk(Pronouns)81
b(-)h(77)h(-)f(from)g(Wikip)7 b(edia)p 0 TeXcolorgray
0 TeXcolorgray 989 18582 a Fg(\017)p 0 TeXcolorgray 0
TeXcolorgray 42 w Fj(vpc)p Fk(s)82 b(-)g(7145)h(-)f(from)g(the)h
(Multiw)-7 b(ord)83 b(Expression)e(Pro)14 b(ject)83 b([4,)f(1].)p
0 TeXcolorgray 0 TeXcolorgray 0.86 0.6 0 0 TeXcolorcmyk
9699 4131 a Fm(Implemen)-14 b(tation)p 0 TeXcolorgray
9699 4610 a Fk(The)95 b(core)g(of)f(our)h(system)f(is)g(a)h(hash)f
(table)g(con)-7 b(taining)94 b(an)h(aggregated)g(form)f(of)9699
4925 y(the)100 b(W)-21 b(eb1T)99 b(data.)160 b(The)99
b(table)h(is)f(k)-7 b(ey)g(ed)99 b(on)g(strings)g(and)g(eac)-7
b(h)99 b(en)-7 b(try)100 b(con)-7 b(tains)9699 5241 y(four)70
b(in)-7 b(tegers.)106 b(W)-21 b(e)71 b(use)e(the)i(four)f(in)-7
b(tegers)70 b(to)g(hold)g(aggregated)g(coun)-7 b(ts)70
b(and)g(form)9699 5556 y(the)83 b(k)-7 b(ey)83 b(based)f(on)g(w)-7
b(ord)83 b(patterns)g(con)-7 b(taining)82 b(wildcards)g(and)g(set)h
(references.)p 0 TeXcolorgray 0 TeXcolorgray 11314 5683
4751 4 v 11483 5904 a(P)-7 b(attern)p 12474 5998 4 316
v 219 w(F)-21 b(requency)p 13679 5998 V 13696 5998 V
236 w(P)-7 b(attern)p 14858 5998 V 219 w(F)-21 b(requency)p
11314 6002 4751 4 v 11314 6018 V 11699 6239 a Fi(v)131
b(p)p 12474 6334 4 316 v 508 w Fk(2)83 b(436)f(566)p
13679 6334 V 13696 6334 V 452 w Fi(p)131 b(v)p 14858
6334 V 508 w Fk(2)83 b(606)f(582)11588 6554 y Fi(v)p
11863 6554 79 4 v 354 w(p)p 12474 6649 4 316 v 603 w
Fk(747)g(492)p 13679 6649 V 13696 6649 V 340 w Fi(p)p
14247 6554 79 4 v 354 w(v)p 14858 6649 4 316 v 397 w
Fk(2)h(326)f(720)11476 6870 y Fi(v)p 11752 6870 79 4
v 11975 6870 V 578 w(p)p 12474 6965 4 316 v 615 w Fk(78)g(569)p
13679 6965 V 13696 6965 V 228 w Fi(p)p 14135 6870 79
4 v 14359 6870 V 578 w(v)p 14858 6965 4 316 v 616 w Fk(68)g(540)11364
7185 y Fi(v)p 11640 7185 79 4 v 11863 7185 V 12087 7185
V 802 w(p)p 12474 7280 4 316 v 503 w Fk(19)g(549)p 13679
7280 V 13696 7280 V 116 w Fi(p)p 14023 7185 79 4 v 14247
7185 V 14471 7185 V 802 w(v)p 14858 7280 4 316 v 504
w Fk(14)g(016)p 11314 7283 4751 4 v 1 0 0 TeXcolorrgb
0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0
TeXcolorrgb 10660 7547 a Ff(W)-7 b(o)g(rd)83 b(patterns)f(and)g
(example)i(aggregated)f(frequencies)g(fo)-7 b(r)82 b(`hand)h(in'.)p
0 TeXcolorgray 9699 8027 a Fk(The)102 b(four)e(patterns)i(with)f(t)-7
b(w)g(o)102 b(set)g(references)g(are)f(sho)-7 b(wn)101
b(in)g(the)g(table)h(ab)7 b(o)-7 b(v)g(e.)9699 8342 y(Note)66
b(that)f(the)h(t)-7 b(w)g(o)66 b(halv)-7 b(es)64 b(of)h(the)g(table)g
(w)-7 b(ould)65 b(b)7 b(e)65 b(stored)g(in)g(separate)g(lo)7
b(cations.)9699 8658 y(F)-21 b(or)83 b(three)g(sets)g(w)-7
b(e)83 b(store)g(the)g(follo)-7 b(wing)82 b(patterns:)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 9647 9040
a(1.)p 0 TeXcolorgray 42 w Fi(A)130 b(B)h(C)p 0 TeXcolorgray
9647 9372 a Fk(2.)p 0 TeXcolorgray 42 w Fi(A)f(B)p 10418
9372 79 4 v 354 w(C)h(or)f(A)h(B)p 11813 9372 V 12037
9372 V 578 w(C)p 0 TeXcolorgray 9647 9704 a Fk(3.)p 0
TeXcolorgray 42 w Fi(A)p 10158 9704 V 354 w(B)f(C)h(or)f(A)p
11553 9704 V 11777 9704 V 578 w(B)h(C)p 0 TeXcolorgray
9647 10036 a Fk(4.)p 0 TeXcolorgray 42 w Fi(A)p 10158
10036 V 354 w(B)p 10642 10036 V 354 w(C)9699 10418 y
Fk(T)-21 b(o)82 b(p)7 b(erform)81 b(queries)h(a)f(clien)-7
b(t)82 b(connects)g(to)g(a)g(set)g(of)f(serv)-7 b(ers,)82
b(eac)-7 b(h)82 b(of)g(whic)-7 b(h)81 b(has)9699 10733
y(a)86 b(hash)e(table)i(con)-7 b(taining)84 b(part)i(of)f(the)g
(corpus.)118 b(Eac)-7 b(h)85 b(individual)e(query)i(is)g(then)9699
11049 y(sen)-7 b(t)83 b(to)g(the)g(relev)-14 b(an)-7
b(t)83 b(serv)-7 b(er.)p 0.86 0.6 0 0 TeXcolorcmyk 9699
11834 a Fm(Queries)164 b(for)g(vp)14 b(cs)p 0 TeXcolorgray
9699 12313 a Fk(The)103 b(w)-7 b(ord)103 b(patterns)g(on)g(the)g(t)-7
b(w)g(o)104 b(sides)e(of)g(the)i(previous)e(table)h(corresp)7
b(ond)102 b(to)9699 12629 y Fi(NP)9959 12666 y Fh(1)10180
12629 y Fi(Verb)131 b(Particle)g(NP)12262 12666 y Fh(2)12435
12629 y Fk(and)82 b Fi(Particle)132 b(NP)14349 12666
y Fh(2)14569 12629 y Fi(NP)14829 12666 y Fh(1)15050 12629
y Fi(Verb)p Fk(.)9699 12969 y(W)-21 b(e)96 b(used)g(pronouns)e(to)i
(appro)-7 b(ximate)95 b(single)h(w)-7 b(ord)95 b(NPs)h(in)f(the)h
(three)g(set)h(pat-)9699 13284 y(terns.)109 b(This)77
b(allo)-7 b(ws)77 b(us)g(to)i(distinguish)d(b)7 b(et)-7
b(w)g(een)78 b(cases)f(suc)-7 b(h)78 b(as)f Fe(ferret)g(is)h(out)f
Fk(and)9699 13600 y Fe(ferret)k(it)h(out)p Fk(,)f(whic)-7
b(h)82 b(b)7 b(oth)81 b(con)-7 b(tribute)82 b(to)g(the)h(frequency)e
(of)101 b Fi(Verb)p 16361 13600 V 354 w(Particle)p Fk(.)p
0.86 0.6 0 0 TeXcolorcmyk 9699 14385 a Fm(Results)p 0
TeXcolorgray 9699 14864 a Fk(F)-21 b(or)75 b(the)h(purp)7
b(oses)73 b(of)i(classi\014cation)f(w)-7 b(e)75 b(created)h(a)f
(feature)g(v)-7 b(ector)76 b(of)e(answ)-7 b(ers)75 b(to)9699
15180 y(true)83 b(or)g(false)f(questions)g(answ)-7 b(ered)83
b(based)f(on)g(queries)g(to)h(our)g(system.)p 0 TeXcolorgray
0 TeXcolorgray 10298 15306 6783 4 v 10498 15527 a(test)p
11098 15621 4 316 v 963 w(comparison)p 13848 15621 V
1548 w(Example)p 16371 15621 V 837 w(result)p 10298 15625
6783 4 v 10298 15641 V 10461 15862 a(vp-1)p 11098 15957
4 316 v 429 w Fd(v)109 b(?)g(?)g(?)g(p)g(>)g(p)p 12898
15862 66 4 v 13084 15862 V 482 w(?)f(v)p 13848 15957
4 316 v 483 w Fk(3)82 b(282)h(176)f Fc(>)h Fk(82)f(556)p
16371 15957 V 348 w(true)10461 16178 y(vp-2)p 11098 16272
V 956 w Fd(v)109 b(p)g(>)g(p)p 12774 16178 66 4 v 295
w(v)p 13848 16272 4 316 v 844 w Fk(2)83 b(436)f(566)h
Fc(>)f Fk(2)h(326)f(720)p 16371 16272 V 183 w(true)10351
16493 y(n)-7 b(v)p 10628 16493 75 4 v 89 w(p-1)p 11098
16588 4 316 v 506 w Fd(n)109 b(v)g(?)f(?)h(p)g(>)g(p)g(n)g(v)p
13848 16588 V 607 w Fk(435)82 b(822)h Fc(>)f Fk(1)h(819)f(931)p
16371 16588 V 269 w(false)10351 16809 y(n)-7 b(v)p 10628
16809 75 4 v 89 w(p-2)p 11098 16903 4 316 v 289 w Fd(n)109
b(v)g(?)g(?)f(p)h(>)g(p)g(?)g(?)g(n)g(v)p 13848 16903
V 390 w Fk(435)82 b(822)h Fc(>)f Fk(1)h(819)f(931)p 16371
16903 V 269 w(false)10348 17124 y(n)p 10501 17124 75
4 v 89 w(vp-1)p 11098 17219 4 316 v 207 w Fd(n)p 11488
17124 66 4 v 295 w(?)109 b(v)g(?)g(p)g(>)g(p)g(n)p 13192
17124 V 295 w(?)g(v)p 13848 17219 4 316 v 1117 w Fk(0)83
b Fc(>)f Fk(0)p 16371 17219 V 1075 w(false)10348 17440
y(n)p 10501 17440 75 4 v 89 w(vp-2)p 11098 17534 4 316
v 98 w Fd(n)p 11379 17440 66 4 v 296 w(?)109 b(v)g(?)f(p)h(>)g(p)g(?)g
(n)p 13301 17440 V 295 w(?)g(v)p 13848 17534 4 316 v
1009 w Fk(0)83 b Fc(>)f Fk(0)p 16371 17534 V 1075 w(false)p
10298 17538 6783 4 v 1 0 0 TeXcolorrgb 0 TeXcolorgray
1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 11798
17801 a Ff(Example)h(compa)-7 b(risons)83 b(fo)-7 b(r)82
b(the)100 b Fj(vpc)82 b Ff(hand)h(in.)p 0 TeXcolorgray
9699 18281 a Fk(W)-21 b(e)61 b(used)f(W)-21 b(ek)-14
b(a)61 b(to)g(generate)h(and)e(ev)-14 b(aluate)60 b(a)h(range)g(of)f
(classi\014cation)g(tec)-7 b(hniques.)9699 18596 y(All)83
b(metho)7 b(ds)82 b(used)g(the)h(standard)f(settings)g(with)h(ten)g
(fold)f(cross-v)-14 b(alidation.)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 19299 3837 6235 4 v 20008
4058 a(Classi\014er)p 21696 4152 4 316 v 757 w(Accuracy)100
b(Precision)f(Recall)h(F)83 b(score)p 19299 4155 6235
4 v 19299 4172 V 20187 4393 a(OneR)p 21696 4488 4 316
v 1117 w(74.4\045)446 b(76.4\045)276 b(74.4\045)175 b(75.4\045)20323
4708 y(Id3)p 21696 4803 V 1252 w(74.7\045)446 b(76.8\045)276
b(74.7\045)175 b(75.7\045)19838 5024 y(Naiv)-7 b(e)83
b(Ba)-7 b(y)g(es)p 21696 5119 V 768 w(74.7\045)446 b(76.8\045)276
b(74.7\045)175 b(75.7\045)19349 5339 y(Multila)-7 b(y)g(erP)g
(erceptron)p 21696 5434 V 280 w(73.4\045)446 b(73.6\045)276
b(73.4\045)175 b(73.5\045)p 19299 5437 6235 4 v 1 0 0
TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray
1 0 0 TeXcolorrgb 20415 5701 a Ff(Results)82 b(using)h(W)-7
b(ek)g(a)84 b(on)f(simple)g(query)g(answ)-7 b(ers.)p
0 TeXcolorgray 18427 6257 a Fk(Once)76 b(running,)g(the)g(serv)-7
b(ers)76 b(pro)7 b(cess)76 b(\014v)-7 b(e)76 b(to)h(ten)f(thousand)f
(queries)h(p)7 b(er)76 b(second.)18427 6573 y(Starting)87
b(the)g(serv)-7 b(ers,)89 b(whic)-7 b(h)86 b(includes)h(reading)f(all)h
(of)g(the)h(W)-21 b(eb1T)87 b(data,)h(tak)-7 b(es)18427
6888 y(sixt)g(y)82 b(to)h(ninet)-7 b(y)82 b(min)-7 b(utes.)18427
7248 y(Our)109 b(ligh)-7 b(t)g(w)g(eigh)g(t)110 b(metho)7
b(d)110 b(do)7 b(es)109 b(not)h(matc)-7 b(h)110 b(the)h(top)f(F-score)f
(of)h(97)p Fc(:)p Fk(4\045)f(from)18427 7563 y(parser)g(based)f(metho)7
b(ds)109 b([3)o(].)190 b(Ho)-7 b(w)g(ev)g(er,)116 b(that)110
b(p)7 b(erformance)109 b(relies)g(on)g(con)-7 b(text)18427
7879 y(a)g(w)g(areness)100 b(and)g(only)g(applies)g(to)h(frequen)-7
b(t)101 b Fj(vpc)p Fk(s,)j(as)d(opp)7 b(osed)100 b(to)h(our)f(system,)
18427 8194 y(whic)-7 b(h)82 b(uses)g(a)g(dataset)i(large)e(enough)g(to)
h(o)-7 b(v)g(ercome)83 b(data)g(sparseness)e(issues.)p
0.86 0.6 0 0 TeXcolorcmyk 18427 9088 a Fm(F)-41 b(uture)162
b(W)-41 b(ork)165 b(and)f(Conclusion)p 0 TeXcolorgray
18427 9600 a Fk(So)82 b(far)g(our)g(system)g(has)g(b)7
b(een)82 b(used)g(to)h(p)7 b(erform)82 b(a)g(small)g(set)g(of)h(simple)
e(tests.)111 b(A)18427 9916 y(few)82 b(examples)g(of)g(extra)h(tests)h
(that)f(could)f(b)7 b(e)82 b(supp)7 b(orted)82 b(are:)p
0 TeXcolorgray 0 TeXcolorgray 18444 10341 a Fg(\017)p
0 TeXcolorgray 0 TeXcolorgray 41 w Fk(Manner)h(Adv)-7
b(erbs)82 b(cannot)g(o)7 b(ccur)83 b(b)7 b(et)-7 b(w)g(een)83
b(the)g(v)-7 b(erb)83 b(and)f(particle)p 0 TeXcolorgray
0 TeXcolorgray 18444 10700 a Fg(\017)p 0 TeXcolorgray
0 TeXcolorgray 41 w Fk(T)-21 b(ransitiv)-7 b(e)102 b
Fj(vpc)p Fk(s)f(m)-7 b(ust)101 b(b)7 b(e)101 b(expressed)g(in)g(the)h
(split)f(con\014guration)g(when)g(the)18609 11016 y(second)82
b(NP)h(is)f(pronominal)18427 11441 y(W)-21 b(e)71 b(ha)-7
b(v)g(e)70 b(constructed)h(a)g(system)f(for)h(quic)-7
b(kly)70 b(querying)g(the)h(W)-21 b(eb1T)70 b(corpus.)106
b(By)18427 11757 y(p)7 b(erforming)89 b(a)i(series)g(of)f(fron)-7
b(ting)90 b(tests)i(on)e(a)h(v)-7 b(erb-particle)91 b(pair)f(w)-7
b(e)91 b(pro)7 b(duce)90 b(a)18427 12072 y(feature)82
b(v)-7 b(ector)84 b(that)f(can)f(b)7 b(e)83 b(used)f(to)h(construct)g
(a)g(classi\014er.)18427 12432 y(Our)69 b(system)g(can)g(scale)h(to)g
(supp)7 b(ort)69 b(more)g(of)h(the)g(W)-21 b(eb1T)69
b(data,)k(without)c(b)7 b(ecom-)18427 12747 y(ing)94
b(less)h(accurate)h(or)f(slo)-7 b(w)g(er.)148 b(By)95
b(v)-14 b(arying)95 b(the)g(w)-7 b(ord)95 b(sets)h(and)e(template)i
(used)18427 13062 y(our)k(system)h(can)g(supp)7 b(ort)101
b(other)g(t)-7 b(yp)7 b(es)101 b(of)g(queries.)166 b(This)100
b(\015exibilit)-7 b(y)101 b(means)f(it)18427 13378 y(could)82
b(b)7 b(e)82 b(useful)g(in)g(other)h(tasks)f(that)h(in)-7
b(v)g(olv)g(e)83 b(querying)f(the)g(W)-21 b(eb1T)83 b(corpus.)p
0.86 0.6 0 0 TeXcolorcmyk 18427 14216 a Fm(References)p
0 TeXcolorgray 0 TeXcolorgray 18427 14631 a Fb([1])p
0 TeXcolorgray 42 w(Timoth)-6 b(y)65 b(Baldwin)f(and)f(Aline)g(Villa)-6
b(vicencio.)85 b(Extracting)64 b(the)f(unextractable:)89
b(a)64 b(case)f(study)18686 14897 y(on)i(v)-6 b(erb-particles.)86
b(In)64 b Fa(Pro)6 b(ceedings)64 b(of)h(the)f(2002)i(Conference)e(on)g
(Natural)h(Language)g(Lea)-6 b(rning)p Fb(,)18686 15162
y(pages)70 b(1{7,)g(T)-17 b(aip)6 b(ei,)69 b(T)-17 b(aiw)-6
b(an,)70 b(August)g(2002.)p 0 TeXcolorgray 18427 15472
a([2])p 0 TeXcolorgray 42 w(Thorsten)d(Bran)-6 b(ts)67
b(and)f(Alex)g(F)-17 b(ranz.)87 b(W)-17 b(eb1t)66 b(5-gram)h(corpus)f
(v)-6 b(ersion)67 b(1.1.)88 b(T)-17 b(ec)-6 b(hnical)66
b(rep)6 b(ort,)18686 15738 y(Go)g(ogle)70 b(Researc)-6
b(h,)69 b(2006.)p 0 TeXcolorgray 18427 16047 a([3])p
0 TeXcolorgray 42 w(Su)e(Nam)h(Kim)g(and)g(Timoth)-6
b(y)69 b(Baldwin.)91 b(Automatic)69 b(iden)-6 b(ti\014cation)69
b(of)f(english)g(v)-6 b(erb)68 b(particle)18686 16313
y(constructions)j(using)g(linguistic)h(features.)96 b(In)69
b Fa(Pro)6 b(ceedings)70 b(of)h(the)f(2006)i(Meeting)e(of)i(the)d(Aso-)
18686 16578 y(ciation)86 b(fo)-6 b(r)85 b(Computational)g(Linguistics:)
125 b(W)-6 b(o)g(rkshop)86 b(on)f(Prep)6 b(ositions)p
Fb(,)81 b(pages)e(65{72,)k(T)-17 b(ren)-6 b(to,)18686
16844 y(Italy)-17 b(,)70 b(April)f(2006.)p 0 TeXcolorgray
18427 17154 a([4])p 0 TeXcolorgray 42 w(Diana)83 b(McCarth)-6
b(y)-17 b(,)86 b(Bill)e(Keller,)i(,)g(and)81 b(John)i(Carroll.)133
b(Detecting)82 b(a)g(con)-6 b(tin)g(uum)83 b(of)g(comp)6
b(o-)18686 17419 y(sitionalit)-6 b(y)82 b(in)d(phrasal)h(v)-6
b(erbs.)122 b(In)78 b Fa(Pro)6 b(ceedings)85 b(of)h(the)f(2003)i
(Meeting)e(of)h(the)f(Aso)6 b(ciation)86 b(fo)-6 b(r)18686
17685 y(Computational)100 b(Linguistics:)154 b(W)-6 b(o)g(rkshop)100
b(on)g(Multiw)-6 b(o)g(rd)99 b(Exp)-6 b(ressions:)155
b(Analysis,)109 b(Acquisition)18686 17951 y(and)69 b(T)-17
b(reatment)p Fb(,)67 b(Sapp)6 b(oro,)69 b(Japan,)g(July)g(2003.)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 17893 18468
a
 currentpoint currentpoint translate 3.13719 3.13719 scale neg exch
neg exch translate
 17893 18468 a 0 0.275 1 0.06 TeXcolorcmyk Fd(http://www.it.u)q(sy)q
(d.)q(ed)q(u.a)q(u/)p 0 TeXcolorgray 17893 18468 a
 currentpoint currentpoint translate 1 3.13719 div 1 3.13719 div scale
neg exch neg exch translate
 17893
18468 a 1 TeXcolorgray 26730 19257 9 900 v 0 TeXcolorgray
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
grestore
